From 5f5381426a42c2d270ed39bfa621208eb7f025f5 Mon Sep 17 00:00:00 2001
From: lingjie li <lingjie.li@amlogic.com>
Date: Tue, 24 Dec 2019 20:31:57 +0800
Subject: [PATCH] drm: Buildroot TM2 Suspend: WestonOS can't work after resume
 [1/1]

PD#SWPL-15763

Problem:
Add dezhi's drm suspend/resume pm ops, and remove early suspend/resume
of vout
drm suspend/resume was not support current

Solution:
add DRM suspend/resume support

Verify:
t962x3_ab301

Change-Id: Icead029b59f631b7811e702d7f57877fa1ab56ca
Signed-off-by: lingjie li <lingjie.li@amlogic.com>
---
 drivers/amlogic/drm/meson_crtc.c                   | 11 ++-
 drivers/amlogic/drm/meson_drv.c                    | 78 ++++++++++++++++++++++
 drivers/amlogic/drm/meson_drv.h                    |  1 +
 .../media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c    | 21 +++---
 .../amlogic/media/vout/vout_serve/vout2_serve.c    | 12 ++--
 drivers/amlogic/media/vout/vout_serve/vout_serve.c | 14 ++--
 6 files changed, 113 insertions(+), 24 deletions(-)

diff --git a/drivers/amlogic/drm/meson_crtc.c b/drivers/amlogic/drm/meson_crtc.c
index 011f871..56d355f 100644
--- a/drivers/amlogic/drm/meson_crtc.c
+++ b/drivers/amlogic/drm/meson_crtc.c
@@ -134,6 +134,7 @@ static void am_meson_crtc_disable(struct drm_crtc *crtc)
 {
 	struct am_meson_crtc *amcrtc = to_am_meson_crtc(crtc);
 	unsigned long flags;
+	enum vmode_e mode;
 
 	DRM_INFO("%s\n", __func__);
 	if (crtc->state->event && !crtc->state->active) {
@@ -146,8 +147,16 @@ static void am_meson_crtc_disable(struct drm_crtc *crtc)
 	spin_lock_irqsave(&amcrtc->vblank_irq_lock, flags);
 	amcrtc->vblank_enable = 0;
 	spin_unlock_irqrestore(&amcrtc->vblank_irq_lock, flags);
-
 	disable_irq(amcrtc->vblank_irq);
+	/*disable output by config null
+	 *Todo: replace or delete it if have new method
+	 */
+	mode = validate_vmode("null");
+	if (mode == VMODE_MAX) {
+		DRM_ERROR("no matched vout mode\n");
+		return;
+	}
+	set_vout_init(mode);
 }
 
 static void am_meson_crtc_commit(struct drm_crtc *crtc)
diff --git a/drivers/amlogic/drm/meson_drv.c b/drivers/amlogic/drm/meson_drv.c
index d74da5e..ba6393f 100644
--- a/drivers/amlogic/drm/meson_drv.c
+++ b/drivers/amlogic/drm/meson_drv.c
@@ -15,6 +15,7 @@
  *
  */
 
+#include <linux/console.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
@@ -623,6 +624,7 @@ static void am_meson_drm_unbind(struct device *dev)
 	drm->dev_private = NULL;
 	dev_set_drvdata(dev, NULL);
 	drm_dev_unref(drm);
+	DRM_INFO("am_meson_drm_unbind done\n");
 }
 
 static int compare_of(struct device *dev, void *data)
@@ -827,6 +829,81 @@ static const struct of_device_id am_meson_drm_dt_match[] = {
 };
 MODULE_DEVICE_TABLE(of, am_meson_drm_dt_match);
 
+#ifdef CONFIG_PM_SLEEP
+static void am_meson_drm_fb_suspend(struct drm_device *drm)
+{
+	#ifdef CONFIG_DRM_MESON_EMULATE_FBDEV
+	struct meson_drm *priv = drm->dev_private;
+
+	drm_fb_helper_set_suspend(priv->fbdev_helper, 1);
+	#endif
+}
+
+static void am_meson_drm_fb_resume(struct drm_device *drm)
+{
+	#ifdef CONFIG_DRM_MESON_EMULATE_FBDEV
+	struct meson_drm *priv = drm->dev_private;
+
+	drm_fb_helper_set_suspend(priv->fbdev_helper, 0);
+	#endif
+}
+
+static int am_meson_drm_pm_suspend(struct device *dev)
+{
+	struct drm_device *drm;
+	struct meson_drm *priv;
+
+	priv = dev_get_drvdata(dev);
+	if (!priv) {
+		DRM_ERROR("%s: Failed to get meson drm!\n", __func__);
+		return 0;
+	}
+	drm = priv->drm;
+	if (!drm) {
+		DRM_ERROR("%s: Failed to get drm device!\n", __func__);
+		return 0;
+	}
+	drm_kms_helper_poll_disable(drm);
+	am_meson_drm_fb_suspend(drm);
+	priv->state = drm_atomic_helper_suspend(drm);
+	if (IS_ERR(priv->state)) {
+		am_meson_drm_fb_resume(drm);
+		drm_kms_helper_poll_enable(drm);
+		DRM_INFO("%s: drm_atomic_helper_suspend fail\n", __func__);
+		return PTR_ERR(priv->state);
+	}
+	DRM_INFO("%s: done\n", __func__);
+	return 0;
+}
+
+static int am_meson_drm_pm_resume(struct device *dev)
+{
+	struct drm_device *drm;
+	struct meson_drm *priv;
+
+	priv = dev_get_drvdata(dev);
+	if (!priv) {
+		DRM_ERROR("%s: Failed to get meson drm!\n", __func__);
+		return 0;
+	}
+	drm = priv->drm;
+	if (!drm) {
+		DRM_ERROR("%s: Failed to get drm device!\n", __func__);
+		return 0;
+	}
+	drm_atomic_helper_resume(drm, priv->state);
+	am_meson_drm_fb_resume(drm);
+	drm_kms_helper_poll_enable(drm);
+	DRM_INFO("%s: done\n", __func__);
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops am_meson_drm_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(am_meson_drm_pm_suspend,
+				am_meson_drm_pm_resume)
+};
+
 static struct platform_driver am_meson_drm_platform_driver = {
 	.probe      = am_meson_drv_probe,
 	.remove     = am_meson_drv_remove,
@@ -834,6 +911,7 @@ static struct platform_driver am_meson_drm_platform_driver = {
 		.owner  = THIS_MODULE,
 		.name   = DRIVER_NAME,
 		.of_match_table = am_meson_drm_dt_match,
+		.pm = &am_meson_drm_pm_ops,
 	},
 };
 
diff --git a/drivers/amlogic/drm/meson_drv.h b/drivers/amlogic/drm/meson_drv.h
index 3e35f27..4653bef 100644
--- a/drivers/amlogic/drm/meson_drv.h
+++ b/drivers/amlogic/drm/meson_drv.h
@@ -60,6 +60,7 @@ struct meson_drm {
 	struct meson_vpu_pipeline *pipeline;
 	struct meson_vpu_funcs *funcs;
 	struct am_meson_logo *logo;
+	struct drm_atomic_state *state;
 
 	u32 num_crtcs;
 	struct am_meson_crtc *crtcs[MESON_MAX_CRTC];
diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
index 4674991..a8e05a2 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
@@ -137,7 +137,8 @@ static inline void hdmitx_notify_hpd(int hpd)
 	else
 		hdmitx_event_notify(HDMITX_UNPLUG, NULL);
 }
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 #include <linux/amlogic/pm.h>
 static void hdmitx_early_suspend(struct early_suspend *h)
 {
@@ -226,6 +227,14 @@ static void hdmitx_late_resume(struct early_suspend *h)
 	pr_info(SYS "late resume\n");
 }
 
+static struct early_suspend hdmitx_early_suspend_handler = {
+	.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN - 10,
+	.suspend = hdmitx_early_suspend,
+	.resume = hdmitx_late_resume,
+	.param = &hdmitx_device,
+};
+#endif
+
 /* Set avmute_set signal to HDMIRX */
 static int hdmitx_reboot_notifier(struct notifier_block *nb,
 	unsigned long action, void *data)
@@ -242,14 +251,6 @@ static int hdmitx_reboot_notifier(struct notifier_block *nb,
 	return NOTIFY_OK;
 }
 
-static struct early_suspend hdmitx_early_suspend_handler = {
-	.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN - 10,
-	.suspend = hdmitx_early_suspend,
-	.resume = hdmitx_late_resume,
-	.param = &hdmitx_device,
-};
-#endif
-
 #define INIT_FLAG_VDACOFF		0x1
 	/* unplug powerdown */
 #define INIT_FLAG_POWERDOWN	  0x2
@@ -5194,7 +5195,7 @@ static int amhdmitx_probe(struct platform_device *pdev)
 	ret = device_create_file(dev, &dev_attr_contenttype_cap);
 	ret = device_create_file(dev, &dev_attr_contenttype_mode);
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	register_early_suspend(&hdmitx_early_suspend_handler);
 #endif
 	hdmitx_device.nb.notifier_call = hdmitx_reboot_notifier;
diff --git a/drivers/amlogic/media/vout/vout_serve/vout2_serve.c b/drivers/amlogic/media/vout/vout_serve/vout2_serve.c
index 2f2a2c1..38214e3 100644
--- a/drivers/amlogic/media/vout/vout_serve/vout2_serve.c
+++ b/drivers/amlogic/media/vout/vout_serve/vout2_serve.c
@@ -46,7 +46,7 @@
 /* Local Headers */
 #include "vout_func.h"
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 #include <linux/amlogic/pm.h>
 static struct early_suspend early_suspend;
 static int early_suspend_flag;
@@ -766,7 +766,7 @@ static void vout2_fops_remove(void)
 #ifdef CONFIG_PM
 static int aml_vout2_suspend(struct platform_device *pdev, pm_message_t state)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 
 	if (early_suspend_flag)
 		return 0;
@@ -778,7 +778,7 @@ static int aml_vout2_suspend(struct platform_device *pdev, pm_message_t state)
 
 static int aml_vout2_resume(struct platform_device *pdev)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 
 	if (early_suspend_flag)
 		return 0;
@@ -823,7 +823,7 @@ static int aml_vout2_pm_resume(struct device *dev)
 }
 #endif
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 static void aml_vout2_early_suspend(struct early_suspend *h)
 {
 	if (early_suspend_flag)
@@ -986,7 +986,7 @@ static int aml_vout2_probe(struct platform_device *pdev)
 {
 	int ret = -1;
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN;
 	early_suspend.suspend = aml_vout2_early_suspend;
 	early_suspend.resume = aml_vout2_late_resume;
@@ -1010,7 +1010,7 @@ static int aml_vout2_probe(struct platform_device *pdev)
 
 static int aml_vout2_remove(struct platform_device *pdev)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	unregister_early_suspend(&early_suspend);
 #endif
 	vout2_notifier_unregister();
diff --git a/drivers/amlogic/media/vout/vout_serve/vout_serve.c b/drivers/amlogic/media/vout/vout_serve/vout_serve.c
index a3710df..7168ed0 100644
--- a/drivers/amlogic/media/vout/vout_serve/vout_serve.c
+++ b/drivers/amlogic/media/vout/vout_serve/vout_serve.c
@@ -44,7 +44,7 @@
 /* Local Headers */
 #include "vout_func.h"
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 #include <linux/amlogic/pm.h>
 static struct early_suspend early_suspend;
 static int early_suspend_flag;
@@ -790,7 +790,7 @@ static void vout_fops_remove(void)
 #ifdef CONFIG_PM
 static int aml_vout_suspend(struct platform_device *pdev, pm_message_t state)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 
 	if (early_suspend_flag)
 		return 0;
@@ -810,7 +810,7 @@ static int aml_vout_resume(struct platform_device *pdev)
 	}
 
 #endif
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 
 	if (early_suspend_flag)
 		return 0;
@@ -858,7 +858,7 @@ static int aml_vout_pm_resume(struct device *dev)
 #ifdef CONFIG_SCREEN_ON_EARLY
 void resume_vout_early(void)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	early_suspend_flag = 0;
 	early_resume_flag = 1;
 	vout_resume();
@@ -867,7 +867,7 @@ void resume_vout_early(void)
 EXPORT_SYMBOL(resume_vout_early);
 #endif
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 static void aml_vout_early_suspend(struct early_suspend *h)
 {
 	if (early_suspend_flag)
@@ -1044,7 +1044,7 @@ static int aml_vout_probe(struct platform_device *pdev)
 {
 	int ret = -1;
 
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN;
 	early_suspend.suspend = aml_vout_early_suspend;
 	early_suspend.resume = aml_vout_late_resume;
@@ -1067,7 +1067,7 @@ static int aml_vout_probe(struct platform_device *pdev)
 
 static int aml_vout_remove(struct platform_device *pdev)
 {
-#ifdef CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND
+#if defined(CONFIG_AMLOGIC_LEGACY_EARLY_SUSPEND) && !defined(CONFIG_AMLOGIC_DRM)
 	unregister_early_suspend(&early_suspend);
 #endif
 
-- 
2.7.4

