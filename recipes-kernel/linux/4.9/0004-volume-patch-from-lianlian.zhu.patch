From 2802030220516c00374fe44bb9d048f71f3a47bc Mon Sep 17 00:00:00 2001
From: Matthew Shyu <matthew.shyu@amlogic.com>
Date: Mon, 3 Jul 2017 16:22:54 +0800
Subject: [PATCH] volume-patch-from-lianlian.zhu

---
 sound/soc/amlogic/meson/i2s.c | 168 ++++++++++++++++++++++++++++++++++--------
 sound/soc/amlogic/meson/i2s.h |   9 +++
 2 files changed, 145 insertions(+), 32 deletions(-)

diff --git a/sound/soc/amlogic/meson/i2s.c b/sound/soc/amlogic/meson/i2s.c
index a4f8e56a2803..e8f1068001ce 100644
--- a/sound/soc/amlogic/meson/i2s.c
+++ b/sound/soc/amlogic/meson/i2s.c
@@ -57,6 +57,9 @@
 #define XRUN_NUM 10 /*10ms*10=100ms timeout*/
 #endif
 
+#define VOLUME_SCALE	100
+#define VOLUME_SHIFT	15
+#define VOL_CTL(s) ((unsigned int)(((signed short)(s))*(vol))>>VOLUME_SHIFT)
 unsigned long aml_i2s_playback_start_addr;
 EXPORT_SYMBOL(aml_i2s_playback_start_addr);
 
@@ -72,6 +75,21 @@ EXPORT_SYMBOL(aml_i2s_playback_channel);
 unsigned int aml_i2s_playback_format = 16;
 EXPORT_SYMBOL(aml_i2s_playback_format);
 
+static struct audio_mixer_control audio_mixer_ctl;
+int get_mixer_output_volume(void)
+{
+	int val;
+
+	val = audio_mixer_ctl.output_volume;
+	return val;
+}
+
+int set_mixer_output_volume(int volume)
+{
+	audio_mixer_ctl.output_volume = volume;
+	return 0;
+}
+
 static int trigger_underrun;
 void aml_audio_hw_trigger(void)
 {
@@ -703,6 +721,8 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 	void *ubuf = tmp_buf->buffer_start;
 	struct audio_stream *s = &prtd->s;
 	struct device *dev = substream->pcm->card->dev;
+	register unsigned int vol =
+		(audio_mixer_ctl.output_volume*(1<<VOLUME_SHIFT))/VOLUME_SCALE;
 #ifndef CONFIG_AMLOGIC_SND_SPLIT_MODE
 	int i = 0, j = 0;
 	int align = runtime->channels * 32;
@@ -761,7 +781,17 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 
 	if (access_ok(VERIFY_READ, buf, frames_to_bytes(runtime, count))) {
 #ifdef CONFIG_AMLOGIC_SND_SPLIT_MODE
-		memcpy(hwbuf, ubuf, n);
+		if (runtime->format == SNDRV_PCM_FORMAT_S16_LE) {
+			int16_t *tfrom, *to;
+			int i = 0;
+
+			tfrom = (int16_t *) ubuf;
+			to = (int16_t *) hwbuf;
+			for (i = 0; i < n/2; i++)
+				*to++ = (int16_t)(VOL_CTL(*tfrom++));
+		} else {
+			memcpy(hwbuf, ubuf, n);
+		}
 #else
 		if (runtime->format == SNDRV_PCM_FORMAT_S16_LE) {
 			int16_t *tfrom, *to;
@@ -783,14 +813,22 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 				sbr = to + 16 * 7;
 				for (j = 0; j < n; j += 256) {
 					for (i = 0; i < 16; i++) {
-						*lf++ = (*tfrom++);
-						*cf++ = (*tfrom++);
-						*rf++ = (*tfrom++);
-						*ls++ = (*tfrom++);
-						*rs++ = (*tfrom++);
-						*lef++ = (*tfrom++);
-						*sbl++ = (*tfrom++);
-						*sbr++ = (*tfrom++);
+						*lf++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*cf++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*rf++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*ls++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*rs++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*lef++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*sbl++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*sbr++ =
+						    (int16_t)VOL_CTL(*tfrom++);
 					}
 					lf += 7 * 16;
 					cf += 7 * 16;
@@ -809,8 +847,10 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 
 				for (j = 0; j < n; j += 64) {
 					for (i = 0; i < 16; i++) {
-						*left++ = (*tfrom++);
-						*right++ = (*tfrom++);
+						*left++ =
+						    (int16_t)VOL_CTL(*tfrom++);
+						*right++ =
+						    (int16_t)VOL_CTL(*tfrom++);
 					}
 					left += 16;
 					right += 16;
@@ -837,14 +877,22 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 				sbr = to + 8 * 7;
 				for (j = 0; j < n; j += 256) {
 					for (i = 0; i < 8; i++) {
-						*lf++ = (*tfrom++);
-						*cf++ = (*tfrom++);
-						*rf++ = (*tfrom++);
-						*ls++ = (*tfrom++);
-						*rs++ = (*tfrom++);
-						*lef++ = (*tfrom++);
-						*sbl++ = (*tfrom++);
-						*sbr++ = (*tfrom++);
+						*lf++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*cf++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*rf++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*ls++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*rs++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*lef++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*sbl++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*sbr++ =
+						    (int32_t)VOL_CTL(*tfrom++);
 					}
 					lf += 7 * 8;
 					cf += 7 * 8;
@@ -863,8 +911,10 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 
 				for (j = 0; j < n; j += 64) {
 					for (i = 0; i < 8; i++) {
-						*left++ = (*tfrom++);
-						*right++ = (*tfrom++);
+						*left++ =
+						    (int32_t)VOL_CTL(*tfrom++);
+						*right++ =
+						    (int32_t)VOL_CTL(*tfrom++);
 					}
 					left += 8;
 					right += 8;
@@ -891,14 +941,22 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 				sbr = to + 8 * 7;
 				for (j = 0; j < n; j += 256) {
 					for (i = 0; i < 8; i++) {
-						*lf++ = (*tfrom++) >> 8;
-						*cf++ = (*tfrom++) >> 8;
-						*rf++ = (*tfrom++) >> 8;
-						*ls++ = (*tfrom++) >> 8;
-						*rs++ = (*tfrom++) >> 8;
-						*lef++ = (*tfrom++) >> 8;
-						*sbl++ = (*tfrom++) >> 8;
-						*sbr++ = (*tfrom++) >> 8;
+						*lf++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*cf++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*rf++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*ls++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*rs++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*lef++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*sbl++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*sbr++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
 					}
 					lf += 7 * 8;
 					cf += 7 * 8;
@@ -917,8 +975,10 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
 
 				for (j = 0; j < n; j += 64) {
 					for (i = 0; i < 8; i++) {
-						*left++ = (*tfrom++) >> 8;
-						*right++ = (*tfrom++) >> 8;
+						*left++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
+						*right++ = (int32_t)
+						    VOL_CTL((*tfrom++) >> 8);
 					}
 					left += 8;
 					right += 8;
@@ -1218,6 +1278,35 @@ static int aml_i2s_probe(struct snd_soc_platform *platform)
 			aml_i2s_controls, ARRAY_SIZE(aml_i2s_controls));
 }
 
+static ssize_t show_volume(struct class *class,
+		struct class_attribute *attr, char *buf)
+{
+	ssize_t size = sprintf(buf, "volume=%d\n",
+			audio_mixer_ctl.output_volume);
+	return size;
+}
+
+static ssize_t store_volume(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t size) {
+	unsigned int val;
+	ssize_t ret;
+
+	ret = kstrtoint(buf, 10, &val);
+
+	if (ret != 0)
+		return -EINVAL;
+
+	if ((val >= 0) && (val <= 100))
+		audio_mixer_ctl.output_volume = val;
+
+	return size;
+}
+
+static struct class_attribute aml_i2s_class_attrs[] = {
+	__ATTR(volume, 0644, show_volume, store_volume),
+	__ATTR_NULL
+};
+
 struct snd_soc_platform_driver aml_soc_platform = {
 	.probe = aml_i2s_probe,
 	.ops = &aml_i2s_ops,
@@ -1227,12 +1316,27 @@ struct snd_soc_platform_driver aml_soc_platform = {
 
 static int aml_soc_platform_probe(struct platform_device *pdev)
 {
-	return snd_soc_register_platform(&pdev->dev, &aml_soc_platform);
+	int ret = 0;
+
+	snd_soc_register_platform(&pdev->dev, &aml_soc_platform);
+	pr_info("enter aml_soc_platform_probe\n");
+	audio_mixer_ctl.output_volume = 100;
+
+	audio_mixer_ctl.aml_i2s_class.name = "aml_i2s";
+	audio_mixer_ctl.aml_i2s_class.class_attrs = aml_i2s_class_attrs;
+	ret = class_register(&audio_mixer_ctl.aml_i2s_class);
+	if (ret)
+		pr_err("aml_i2s_class register fail\n");
+
+	pr_info("registed audio mixer controls class\n");
+
+	return ret;
 }
 
 static int aml_soc_platform_remove(struct platform_device *pdev)
 {
 	snd_soc_unregister_platform(&pdev->dev);
+	class_unregister(&audio_mixer_ctl.aml_i2s_class);
 	return 0;
 }
 
diff --git a/sound/soc/amlogic/meson/i2s.h b/sound/soc/amlogic/meson/i2s.h
index b032cb3d6b9b..96339547eb8b 100644
--- a/sound/soc/amlogic/meson/i2s.h
+++ b/sound/soc/amlogic/meson/i2s.h
@@ -54,6 +54,15 @@ struct aml_audio_buffer {
 	int cached_len;
 };
 
+struct audio_mixer_control {
+	struct class aml_i2s_class;
+	int output_devide;
+	int input_device;
+	int direction;
+	int input_volume;
+	int output_volume;
+};
+
 struct aml_i2s_dma_params {
 	char *name;			/* stream identifier */
 	struct snd_pcm_substream *substream;
-- 
2.11.0

