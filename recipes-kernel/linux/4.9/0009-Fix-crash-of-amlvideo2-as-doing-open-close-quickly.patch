From 850398fe1b44297a832fd44ab34fdd10dec70a10 Mon Sep 17 00:00:00 2001
From: Mingyen Hung <mingyen.hung@amlogic.com>
Date: Sat, 15 Jul 2017 14:07:22 +0800
Subject: [PATCH] Fix crash of amlvideo2 as doing open/close quickly

Change-Id: I6316177ef9e09b1b82ca207d0a9a611bcc729252
Signed-off-by: Mingyen Hung <mingyen.hung@amlogic.com>
---
 .../media/video_processor/video_dev/amlvideo2.c    | 190 ++++++++++-----------
 1 file changed, 90 insertions(+), 100 deletions(-)

diff --git a/drivers/amlogic/media/video_processor/video_dev/amlvideo2.c b/drivers/amlogic/media/video_processor/video_dev/amlvideo2.c
index 16c525eaeb7f..7cb70dbb8afd 100644
--- a/drivers/amlogic/media/video_processor/video_dev/amlvideo2.c
+++ b/drivers/amlogic/media/video_processor/video_dev/amlvideo2.c
@@ -321,9 +321,9 @@ struct v4l2_device v4l2_dev;
 struct platform_device *pdev;
 struct amlvideo2_node *node[MAX_SUB_DEV_NODE];
 int node_num;
-resource_size_t buffer_start;
-unsigned int buffer_size;
-struct page *cma_pages;
+//resource_size_t buffer_start;
+//unsigned int buffer_size;
+//struct page *cma_pages;
 struct resource memobj;
 int cma_mode;
 bool use_reserve;
@@ -400,6 +400,7 @@ struct completion plug_sema;
 bool field_flag;
 bool field_condition_flag;
 bool ge2d_multi_process_flag;
+struct page *cma_pages;
 };

 struct amlvideo2_fh {
@@ -2806,7 +2807,7 @@ int amlvideo2_ge2d_multi_pre_process(struct vframe_s *vf,
 	int cur_angle = 0;
 	int output_canvas = output->canvas_id;
 	int temp_canvas = AMLVIDEO2_1_RES_CANVAS + 8;
-	unsigned long temp_start = node->vid_dev->buffer_start +
+	resource_size_t temp_start = node->res.start +
 		(CMA_ALLOC_SIZE * SZ_1M);
 	int temp_w = vf->width/4;
 	int temp_h = vf->height/4;
@@ -5292,112 +5293,104 @@ static int vidioc_s_output(struct file *file, void *fh,
 	return 0;
 }

-int amlvideo2_cma_buf_init(struct amlvideo2_device *vid_dev,  int node_id)
+int amlvideo2_cma_buf_init(struct amlvideo2_device *vid_dev, const int node_id)
 {
-	int flags;
+	struct amlvideo2_node *node = NULL;
+	resource_size_t alloc_size = 0;
+	const char *dev_name = (node_id == 0) ? DEVICE_NAME0 : DEVICE_NAME1;
+
+	WARN_ON(!vid_dev);
+	WARN_ON(node_id < 0);
+
+	node = vid_dev->node[node_id];
+
+	WARN_ON(!node);

 	if (!vid_dev->use_reserve) {
 		if (vid_dev->cma_mode == 0) {
-			vid_dev->cma_pages = dma_alloc_from_contiguous(
-			&(vid_dev->pdev->dev),
-			(CMA_ALLOC_SIZE*SZ_1M) >> PAGE_SHIFT, 0);
-			if (vid_dev->cma_pages) {
-				vid_dev->buffer_start = page_to_phys(
-				vid_dev->cma_pages);
-				vid_dev->buffer_size = (CMA_ALLOC_SIZE*SZ_1M);
+			alloc_size = CMA_ALLOC_SIZE * SZ_1M;
+
+			node->cma_pages =
+					dma_alloc_from_contiguous(
+						&(vid_dev->pdev->dev),
+						alloc_size >> PAGE_SHIFT, 0);
+			if (node->cma_pages) {
+				node->res.start = page_to_phys(node->cma_pages);
+				node->res.end = node->res.start + alloc_size;
 			} else {
-				pr_err("amlvideo2 alloc cma alone failed\n");
+				pr_err("%s alloc cma alone failed\n", dev_name);
 				return -1;
 			}
 		} else {
-			flags = CODEC_MM_FLAGS_DMA_CPU|
-				CODEC_MM_FLAGS_CMA_CLEAR;
-			if (node_id == 0) {
-				if (vid_dev->node[node_id]->
-					ge2d_multi_process_flag == 1)
-					vid_dev->buffer_start =
-					codec_mm_alloc_for_dma(
-					"amlvideo2.0",
-					((CMA_ALLOC_SIZE +
-					4) * SZ_1M)/PAGE_SIZE,
-					0, flags);
-				else
-					vid_dev->buffer_start =
-					codec_mm_alloc_for_dma(
-					"amlvideo2.0",
-					(CMA_ALLOC_SIZE * SZ_1M)/PAGE_SIZE,
-					0, flags);
-			} else {
-				if (vid_dev->node[node_id]->
-					ge2d_multi_process_flag == 1)
-					vid_dev->buffer_start =
-					codec_mm_alloc_for_dma(
-					"amlvideo2.1",
-					((CMA_ALLOC_SIZE +
-					4) * SZ_1M)/PAGE_SIZE,
-					0, flags);
-				else
-					vid_dev->buffer_start =
-					codec_mm_alloc_for_dma(
-					"amlvideo2.1",
-					(CMA_ALLOC_SIZE * SZ_1M)/PAGE_SIZE,
-					0, flags);
-			}
-			if (!(vid_dev->buffer_start)) {
-				pr_err("amlvideo2 alloc cma buffer failed\n");
+			int flags = CODEC_MM_FLAGS_DMA_CPU |
+						CODEC_MM_FLAGS_CMA_CLEAR;
+
+			alloc_size = (node->ge2d_multi_process_flag == 1) ?
+						((CMA_ALLOC_SIZE + 4) * SZ_1M) :
+						(CMA_ALLOC_SIZE * SZ_1M);
+
+			node->res.start = codec_mm_alloc_for_dma(
+						dev_name,
+						alloc_size >> PAGE_SHIFT,
+						0, flags);
+
+			if (!node->res.start) {
+				pr_err("%s alloc cma alone failed\n", dev_name);
 				return -1;
 			}
-			if (vid_dev->node[node_id]->ge2d_multi_process_flag
-				== 1)
-				vid_dev->buffer_size = ((CMA_ALLOC_SIZE
-				+ 4)*SZ_1M);
-			else
-				vid_dev->buffer_size =
-				(CMA_ALLOC_SIZE * SZ_1M);
+
+			node->res.end = node->res.start + alloc_size;
 		}
-		if (node_id == 0)
-			pr_info("amlvideo2.0 cma memory is %x , size is  %x\n",
-				(unsigned int)vid_dev->buffer_start,
-				(unsigned int)vid_dev->buffer_size);
-		else
-			pr_info("amlvideo2.1 cma memory is %x , size is  %x\n",
-				(unsigned int)vid_dev->buffer_start,
-				(unsigned int)vid_dev->buffer_size);
+		pr_info("%s cma memory is %x , size is  %x\n", dev_name,
+				(unsigned int)node->res.start,
+				(unsigned int)alloc_size);
 	}
-
 	return 0;
 }

 int amlvideo2_cma_buf_uninit(struct amlvideo2_device *vid_dev, int node_id)
 {
+	struct amlvideo2_node *node = NULL;
+	int ret = 0;
+	const char *dev_name = (node_id == 0) ? DEVICE_NAME0 : DEVICE_NAME1;
+
+	WARN_ON(!vid_dev);
+	WARN_ON(node_id < 0);
+
+	node = vid_dev->node[node_id];
+
+	WARN_ON(!node);
+
 	if (!vid_dev->use_reserve) {
 		if (vid_dev->cma_mode == 0) {
-			if (vid_dev->cma_pages) {
-				dma_release_from_contiguous(
+
+			if (node->cma_pages) {
+				ret = dma_release_from_contiguous(
 					&vid_dev->pdev->dev,
-					vid_dev->cma_pages,
-					(CMA_ALLOC_SIZE*SZ_1M) >> PAGE_SHIFT);
-				vid_dev->cma_pages = NULL;
+					node->cma_pages,
+					(CMA_ALLOC_SIZE * SZ_1M) >> PAGE_SHIFT);
+				if (ret == 0) {
+					pr_err("%s release cma buffer failed\n",
+							dev_name);
+					return -1;
+				}
+				node->cma_pages = NULL;
 			}
 		} else {
-			if (vid_dev->buffer_start != 0) {
-				if (node_id == 0) {
-					codec_mm_free_for_dma(
-					"amlvideo2.0",
-					vid_dev->buffer_start);
-				} else {
-					codec_mm_free_for_dma(
-					"amlvideo2.1",
-					vid_dev->buffer_start);
+			if (node->res.start) {
+				ret = codec_mm_free_for_dma(
+						dev_name, node->res.start);
+				if (ret == -1) {
+					pr_err("%s release cma buffer failed\n",
+							dev_name);
+					return -1;
 				}
-				vid_dev->buffer_start = 0;
-				vid_dev->buffer_size = 0;
-				if (node_id == 0)
-					pr_info("amlvideo2.0 cma memory release succeed\n");
-				else
-					pr_info("amlvideo2.1 cma memory release succeed\n");
+				node->res.start = 0;
+				node->res.end = 0;
+
 			}
 		}
+		pr_info("%s cma memory release succeed\n", dev_name);
 	}
 	return 0;
 }
@@ -5440,15 +5433,6 @@ static int amlvideo2_open(struct file *file)
 		return -ENODEV;
 	}
 	#endif
-	ret = amlvideo2_cma_buf_init(node->vid_dev, node->vid);
-	if (ret < 0) {
-		if (node->vid == 0)
-			pr_err("alloc amlvideo2.0 cma buffer failed.\n");
-		else
-			pr_err("alloc amlvideo2.1 cma buffer failed.\n");
-		mutex_unlock(&node->mutex);
-		return -ENOMEM;
-	}

 	fh = node->fh;
 	if (fh == NULL) {
@@ -5468,9 +5452,15 @@ static int amlvideo2_open(struct file *file)
 		node->res.start = reserve->start;
 		node->res.end = reserve->end;
 	} else {
-		node->res.start = node->vid_dev->buffer_start;
-		node->res.end = node->vid_dev->buffer_start +
-					node->vid_dev->buffer_size;
+		ret = amlvideo2_cma_buf_init(node->vid_dev, node->vid);
+		if (ret < 0) {
+			if (node->vid == 0)
+				pr_err("alloc amlvideo2.0 cma buffer failed.\n");
+			else
+				pr_err("alloc amlvideo2.1 cma buffer failed.\n");
+			mutex_unlock(&node->mutex);
+			return -ENOMEM;
+		}
 	}
 	mutex_unlock(&node->mutex);

@@ -5483,7 +5473,6 @@ static int amlvideo2_open(struct file *file)
 	fh->width = 1920;
 	fh->height = 1080;

-
 	fh->set_format_flag = false;
 	fh->f_flags = file->f_flags;
 	memset(&node->crop_info, 0, sizeof(struct crop_info_s));
@@ -5535,7 +5524,8 @@ static int amlvideo2_close(struct file *file)

 	videobuf_stop(&fh->vb_vidq);
 	videobuf_mmap_free(&fh->vb_vidq);
-	amlvideo2_cma_buf_uninit(node->vid_dev, node->vid);
+	if (amlvideo2_cma_buf_uninit(node->vid_dev, node->vid) < 0)
+		pr_err("amlvideo2_cma_buf_uninit fails\n");
 	mutex_lock(&node->mutex);
 	if (node->r_type == AML_RECEIVER_NONE) {
 		/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
@@ -5846,7 +5836,7 @@ static int amlvideo2_create_node(struct platform_device *pdev)
 		vid_node = kzalloc(sizeof(struct amlvideo2_node), GFP_KERNEL);
 		if (!vid_node)
 			break;
-
+		vid_node->cma_pages = NULL;
 		vid_node->res.magic = MAGIC_RE_MEM;
 		vid_node->res.priv = NULL;
 		vid_node->context = create_ge2d_work_queue();
--
2.11.0

