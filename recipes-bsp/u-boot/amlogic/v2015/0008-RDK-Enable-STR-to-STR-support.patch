From 6db40494d5281a5b0b013c4d23b433392103a024 Mon Sep 17 00:00:00 2001
From: Terrence Pu <terrence.pu@amlogic.com>
Date: Tue, 14 Jul 2020 05:25:37 -0700
Subject: [PATCH 08/10] RDK: Enable STR to STR support

PD#SWPL-26565

Problem:
Need to support STR to STR and mute HDMITX during cold boot

Solution:
Add lastpwrmode in bootloader to handle STR cold boot

Verify:
u212/HP40A

Change-Id: I0f28061827399b1aafffbd66ed34617546eb0942
---
 board/amlogic/configs/g12a_u212_v1.h |  5 +++--
 common/cmd_hdmitx.c                  | 23 +++++++++++++++++++++--
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/board/amlogic/configs/g12a_u212_v1.h b/board/amlogic/configs/g12a_u212_v1.h
index 45666d4965..30334f3c8e 100644
--- a/board/amlogic/configs/g12a_u212_v1.h
+++ b/board/amlogic/configs/g12a_u212_v1.h
@@ -162,18 +162,19 @@
         "reboot_mode_android=""normal""\0"\
         "Irq_check_en=0\0"\
         "fs_type=""rootfstype=ramfs""\0"\
+        "lastpwrmode=1\0" \
         "initargs="\
             "init=/init " CONFIG_KNL_LOG_LEVEL " console=ttyS0,115200 no_console_suspend earlyprintk=aml-uart,0xff803000 ramoops.pstore_en=1 ramoops.record_size=0x8000 ramoops.console_size=0x4000 "\
             "\0"\
         "upgrade_check="\
             "echo upgrade_step=${upgrade_step}; "\
             "if itest ${upgrade_step} == 3; then "\
-                "run init_display; run storeargs; run update;"\
+                "run init_display; run storeargs; run recovery_from_flash;"\
             "else fi;"\
             "\0"\
         "storeargs="\
 		"get_bootloaderversion;" \
-		"setenv bootargs ${initargs} phy_idx=${phy_idx} hdr_policy=${hdr_policy} hdr_priority=${hdr_priority} otg_device=${otg_device} reboot_mode_android=${reboot_mode_android} logo=${display_layer},loaded,${fb_addr} fb_width=${fb_width} fb_height=${fb_height} display_bpp=${display_bpp} outputmode=${outputmode} vout=${outputmode},enable panel_type=${panel_type} lcd_ctrl=${lcd_ctrl} hdmitx=${cecconfig},${colorattribute} hdmimode=${hdmimode} hdmichecksum=${hdmichecksum} dolby_vision_on=${dolby_vision_on} frac_rate_policy=${frac_rate_policy} hdmi_read_edid=${hdmi_read_edid} cvbsmode=${cvbsmode} osd_reverse=${osd_reverse} video_reverse=${video_reverse} irq_check_en=${Irq_check_en}  androidboot.selinux=${EnableSelinux} androidboot.firstboot=${firstboot} jtag=${jtag}; "\
+		"setenv bootargs ${initargs} phy_idx=${phy_idx} lastpwrmode=${lastpwrmode} hdr_policy=${hdr_policy}  hdr_priority=${hdr_priority} otg_device=${otg_device} reboot_mode_android=${reboot_mode_android} logo=${display_layer},loaded,${fb_addr} fb_width=${fb_width} fb_height=${fb_height} display_bpp=${display_bpp} outputmode=${outputmode} vout=${outputmode},enable panel_type=${panel_type} lcd_ctrl=${lcd_ctrl} hdmitx=${cecconfig},${colorattribute} hdmimode=${hdmimode} hdmichecksum=${hdmichecksum} dolby_vision_on=${dolby_vision_on} frac_rate_policy=${frac_rate_policy} hdmi_read_edid=${hdmi_read_edid} cvbsmode=${cvbsmode} osd_reverse=${osd_reverse} video_reverse=${video_reverse} irq_check_en=${Irq_check_en}  androidboot.selinux=${EnableSelinux} androidboot.firstboot=${firstboot} jtag=${jtag}; "\
 	"setenv bootargs ${bootargs} androidboot.hardware=amlogic androidboot.bootloader=${bootloader_version} androidboot.build.expect.baseband=N/A;"\
             "run cmdline_keys;"\
             "\0"\
diff --git a/common/cmd_hdmitx.c b/common/cmd_hdmitx.c
index 186eb6f3cd..8a8ecf91b4 100644
--- a/common/cmd_hdmitx.c
+++ b/common/cmd_hdmitx.c
@@ -63,6 +63,7 @@ static int do_hpd_detect(cmd_tbl_t *cmdtp, int flag, int argc,
 	char* hdmimode;
 	char* cvbsmode;
 	char* colorattribute;
+	char* lastpwrmode;
 
 	st = getenv_ulong("hdmitx_hpd_bypass", 10, 0);
 	if (st) {
@@ -106,10 +107,25 @@ static int do_hpd_detect(cmd_tbl_t *cmdtp, int flag, int argc,
 	if (colorattribute)
 		printf("do_hpd_detect: colorattribute=%s\n", colorattribute);
 
+	lastpwrmode = getenv("lastpwrmode");
+	if (lastpwrmode) {
+		printf ("do_hpd_detect: lastpwrmode=%s\n", lastpwrmode);
+		if (strstr(lastpwrmode, "4")) {
+			// we only set but not save it
+			// it's only for current STR boot flow
+			setenv("hdmimode", "null");
+		}
+	}
+
 	if (hdmimode) {
 		if (strstr(hdmimode, "null")) {
-			setenv("hdmimode", "1080p60hz");
-			run_command("saveenv", 0);
+			if (strstr(lastpwrmode, "4")) {
+				printf ("STR cold boot\n");
+			} else {
+				setenv("hdmimode", "1080p60hz");
+				run_command("saveenv", 0);
+				printf("hdmimode is null but lastpwrmode is not STR. Forcing 1080p60hz\n");
+			}
 		}
 	} else {
 		setenv("hdmimode", "1080p60hz");
@@ -117,6 +133,9 @@ static int do_hpd_detect(cmd_tbl_t *cmdtp, int flag, int argc,
 	}
 	hdmimode = getenv("hdmimode");
 	if (st) {
+		//TODO: need to follow outputmode flow
+		// it seems will impact drm driver
+		printf ("outputmode=%s", hdmimode);
 		setenv("outputmode", hdmimode);
 	} else {
 		cvbsmode = getenv("cvbsmode");
-- 
2.29.0

