From c8a88c70af3755d5ea1cea2eeadb4a58ffdc789b Mon Sep 17 00:00:00 2001
From: Hao Wei <hao.wei@amlogic.com>
Date: Fri, 21 Jan 2022 15:26:14 +0800
Subject: [PATCH] irdeto hal: tsplayer use multi instance and fixed resized
 video issue [1/1]

PD#SWPL-67095
PD#SWPL-70102

Problem:
1. tsplayer use multi instance mode
2. fixed sometimes the video is not correctly resized

Solution:
1. tsplayer use multi instance mode
2. fixed sometimes the video is not correctly resized

Verify:
AH232

Change-Id: I831425d584f2867a0b87431534cc9bd9619c864c
Signed-off-by: Hao Wei <hao.wei@amlogic.com>
---
 vendor/hal-core/audiovideo/av.c   | 56 ++++++++++++++++++++-----------
 vendor/hal-core/svcpipe/svcpipe.c | 36 ++++++++++++++++++--
 vendor/include/aml_dvb_hal.h      | 26 ++++++++------
 3 files changed, 86 insertions(+), 32 deletions(-)

diff --git a/vendor/hal-core/audiovideo/av.c b/vendor/hal-core/audiovideo/av.c
index fc6ca8f..55a5f07 100644
--- a/vendor/hal-core/audiovideo/av.c
+++ b/vendor/hal-core/audiovideo/av.c
@@ -38,10 +38,6 @@
 #include "AmTsPlayer.h"
 
 
-#define VEDIO_WINDOW_SIZE_WIDTH (1920)
-#define VEDIO_WINDOW_SIZE_HEIGTH (1080)
-
-
 static av_callbacks_t av_callbacks = { NULL, /* video_firstFrameDisplayed */
                                        NULL, /* video_aspectRatioChanged */
                                        NULL, /*display_ModeChanged */
@@ -67,6 +63,22 @@ HAL_TSP_Device* tsp_dev_get(int dev_id, stream_t type)
   return NULL;
 }
 
+HAL_TSP_Device* tsp_dev_get_onlybyid(int dev_id, stream_t type)
+{
+  HAL_TSP_Device *tsp;
+  int i;
+
+  for (i = 0; i < HAL_N_ELEM(hal_tsp_devices); i ++) {
+    tsp= &hal_tsp_devices[i];
+    if (((type == AUDIO && tsp->aud_id == dev_id) ||
+        (type == VIDEO && tsp->vid_id == dev_id)))  {
+      return tsp;
+    }
+  }
+  return NULL;
+}
+
+
 /*AV event handler.*/
 void hal_av_event_callback (void *user_data, am_tsplayer_event *pevt)
 {
@@ -1290,7 +1302,7 @@ STATUS AV_SetVideoOrigin(av_vid_t vid_id, sint_t x, sint_t y)
   am_tsplayer_result  ret;
 
   DMX_DEBUG(1, "HAL %s call ...", __func__);
-  tsp = tsp_dev_get(vid_id, VIDEO);
+  tsp = tsp_dev_get_onlybyid(vid_id, VIDEO);
   if (!tsp) {
     DMX_DEBUG(1, "%s can NOT get tsplayer", __func__);
     return IDW_NO_ERROR;
@@ -1391,12 +1403,12 @@ STATUS AV_ControlVideoSize(av_vid_t vid_id,
   HAL_TSP_Device *tsp;
   am_tsplayer_result  ret;
   am_tsplayer_video_info info;
-  sint_t scaled_x = 0;
-  sint_t scaled_y = 0;
-  float scaled_width = 0;
-  float scaled_height = 0;
+  int scaled_x = 0;
+  int scaled_y = 0;
+  int scaled_width = 0;
+  int scaled_height = 0;
 
-  tsp = tsp_dev_get(vid_id, VIDEO);
+  tsp = tsp_dev_get_onlybyid(vid_id, VIDEO);
   if (!tsp) {
     DMX_DEBUG(1, "%s can NOT get tsplayer", __func__);
     return IDW_NO_ERROR;
@@ -1405,20 +1417,24 @@ STATUS AV_ControlVideoSize(av_vid_t vid_id,
   DMX_DEBUG(1, "%s src [%d.%d] [%dx%d]", __func__, src_x0, src_y0, src_width, src_height);
   DMX_DEBUG(1, "%s dst [%d.%d] [%dx%d]", __func__, dst_x0, dst_y0, dst_width, dst_height);
 
-
   scaled_width = ((float)dst_width/src_width) * VEDIO_WINDOW_SIZE_WIDTH;
   scaled_height = ((float)dst_height/src_height) * VEDIO_WINDOW_SIZE_HEIGTH;
   scaled_x = dst_x0 * VEDIO_WINDOW_SIZE_WIDTH / src_width;
   scaled_y = dst_y0 * VEDIO_WINDOW_SIZE_HEIGTH / src_height;
 
-  DMX_DEBUG(1, "%s scaled [%d.%d] [%fx%f]", __func__, scaled_x, scaled_y, scaled_width, scaled_height);
+  DMX_DEBUG(1, "%s scaled [%d.%d] [%dx%d]", __func__, scaled_x, scaled_y, scaled_width, scaled_height);
 
+  tsp->video_window.origin_x = scaled_x;
+  tsp->video_window.origin_y = scaled_y;
+  tsp->video_window.width = scaled_width;
+  tsp->video_window.height = scaled_height;
 
-  ret = AmTsPlayer_setVideoWindow(tsp->handle, (int32_t)scaled_x, (int32_t)scaled_y, \
-                                    (int32_t)scaled_width, (int32_t)scaled_height);
-  if (ret != AM_TSPLAYER_OK) {
-    DMX_DEBUG(1, "%s failed @ %d", __func__, __LINE__);
-    return IDW_FAILURE;
+  if (tsp->openned) {
+      ret = AmTsPlayer_setVideoWindow(tsp->handle, scaled_x, scaled_y, scaled_width, scaled_height);
+      if (ret != AM_TSPLAYER_OK) {
+        DMX_DEBUG(1, "%s failed @ %d", __func__, __LINE__);
+        //return IDW_FAILURE;
+      }
   }
 
   return IDW_NO_ERROR;
@@ -1445,14 +1461,14 @@ STATUS AV_ResizeVideo(av_vid_t vid_id, uint_t width, uint_t height)
 
   DMX_DEBUG(1, "HAL %s call ...", __func__);
 
-  tsp = tsp_dev_get(vid_id, VIDEO);
+  tsp = tsp_dev_get_onlybyid(vid_id, VIDEO);
   if (!tsp) {
     DMX_DEBUG(1, "%s can NOT get tsplayer", __func__);
     return IDW_NO_ERROR;
   }
 
-  tsp->video_window.width = width;
-  tsp->video_window.height = height;
+  tsp->video_window.width = (int)width;
+  tsp->video_window.height = (int)height;
   DMX_DEBUG(1, "HAL %s vid: %d, Origin [%d %d], [width:height] [%d x %d]", __func__, vid_id, \
                         tsp->video_window.origin_x , tsp->video_window.origin_y, width, height);
 
diff --git a/vendor/hal-core/svcpipe/svcpipe.c b/vendor/hal-core/svcpipe/svcpipe.c
index 67e4321..1ec0be5 100644
--- a/vendor/hal-core/svcpipe/svcpipe.c
+++ b/vendor/hal-core/svcpipe/svcpipe.c
@@ -207,8 +207,8 @@ STATUS SVCPIPE_HAL_Disconnects(const SVCPIPE_Input_t  *in,
             if (tsp != NULL)
             {
               tsp->dmx_id = -1;
-              tsp->aud_id = -1;
-              tsp->vid_id = -1;
+              //tsp->aud_id = -1;
+              //tsp->vid_id = -1;
               tsp->openned = 0;
             }
             if (ret != AM_TSPLAYER_OK) {
@@ -289,6 +289,11 @@ STATUS SVCPIPE_HAL_Connects(const SVCPIPE_Input_t  *in,
   am_tsplayer_result  ret;
   int i;
   int r;
+  int tunnelid = 0;
+  int origin_x;
+  int origin_y;
+  int width;
+  int height;
 
   DMX_DEBUG(1,
     "SVCPIPE_HAL_Connects : "
@@ -420,6 +425,33 @@ STATUS SVCPIPE_HAL_Connects(const SVCPIPE_Input_t  *in,
         tsp_params.source == TS_DEMOD ? "DEMOD" : "MEMORY",
         tsp_params.drmmode);
 
+    // use tsplayer multi instance mode need to implement AmTsPlayer_setSurface and AmTsPlayer_setSurface
+    ret = AmTsPlayer_setSurface(tsp->handle, (void*)&tunnelid);
+    if (ret != AM_TSPLAYER_OK) {
+      DMX_DEBUG(1, "%s TsPlayer set surface failed:%d\n", __func__, ret);
+      pthread_mutex_unlock(&tsp->lock);
+      return IDW_FAILURE;
+    }
+
+    if (tsp->video_window.origin_x != 0 || tsp->video_window.origin_y != 0 ||
+        tsp->video_window.width != 0 || tsp->video_window.height != 0) {
+        origin_x = tsp->video_window.origin_x;
+        origin_y = tsp->video_window.origin_y;
+        width = tsp->video_window.width;
+        height = tsp->video_window.height;
+        DMX_DEBUG(1, "%s need to resize the video window [%d.%d] [%dx%d]", __func__, origin_x, origin_y, width, height);
+    } else {
+        origin_x = 0;
+        origin_y = 0;
+        width = VEDIO_WINDOW_SIZE_WIDTH;
+        height = VEDIO_WINDOW_SIZE_HEIGTH;
+    }
+
+    ret = AmTsPlayer_setVideoWindow(tsp->handle, origin_x, origin_y, width, height);
+    if (ret != AM_TSPLAYER_OK) {
+      DMX_DEBUG(1, "%s TsPlayer set video window failed:%d\n", __func__, ret);
+    }
+
     ret = AmTsPlayer_registerCb(tsp->handle, hal_av_event_callback, tsp);
     if (ret != AM_TSPLAYER_OK) {
       DMX_DEBUG(1, "%s register tsplayer callback failed:%d\n", __func__, ret);
diff --git a/vendor/include/aml_dvb_hal.h b/vendor/include/aml_dvb_hal.h
index 2690374..eece2fc 100644
--- a/vendor/include/aml_dvb_hal.h
+++ b/vendor/include/aml_dvb_hal.h
@@ -148,8 +148,8 @@ struct HAL_VID_Device_s {
 typedef struct tsp_video_window_s {
   int origin_x;
   int origin_y;
-  unsigned int width;
-  unsigned int height;
+  int width;
+  int height;
 } tsp_video_window_t;
 
 typedef struct __SCAN_DATA {
@@ -444,17 +444,23 @@ static inline int hal_get_default_log_level()
 				} while(0)
 #endif
 
-#ifdef __cplusplus
-}
-#endif
 
 #define HARDWARE_PLATFORM_DEFAULT_INPUT_TS DVB_DEMUX_SOURCE_TS0
 #define TS_INPUT_SOURCE "frontend.ts.source"
 
-typedef struct {
-  int32_t pipe_id;
-  uint32_t mode;
-  uint32_t secure_buf;
-} pipeline_ctx_t;
+    typedef struct {
+      int32_t pipe_id;
+      uint32_t mode;
+      uint32_t secure_buf;
+    } pipeline_ctx_t;
+
+
+#define VEDIO_WINDOW_SIZE_WIDTH (1920)
+#define VEDIO_WINDOW_SIZE_HEIGTH (1080)
+
+
+#ifdef __cplusplus
+}
+#endif
 
 #endif
-- 
2.29.0

