From 03bb8d7869abcc437fdbcf448662840e992d39ec Mon Sep 17 00:00:00 2001
From: Tim Yao <tim.yao@amlogic.com>
Date: Mon, 17 Feb 2020 23:56:30 -0800
Subject: [PATCH 3/5] audio-hal: Add ms12 run time parameter set_param support
 [1/1]

PD#SWPL-17555

[Problem]
Need an API interface to audio HAL to set MS12
runtime parameters.

[Solution]
Audio HAL set_param is extended to support settings
with "-ms12_runtime=<options>" kv_pair.

[Test]
Local

Change-Id: I6ccc237c192d32edc197f8dd1d794f6d8852adc8
---
 audio_hal/aml_audio_stream.c                  |   2 +
 audio_hal/aml_audio_stream.h                  |   1 +
 audio_hal/audio_hw.c                          |  63 ++-
 audio_hal/audio_hw.h                          |   1 +
 audio_hal/audio_hw_ms12.c                     |  12 +-
 audio_hal/audio_hw_utils.c                    |   2 +
 libms12v2/include/DolbyMS12ConfigParams.h     |  72 ++-
 libms12v2/include/aml_audio_ms12.h            |   8 +-
 .../dolby_ms12_config_parameter_struct.h      |   7 +
 libms12v2/include/dolby_ms12_config_params.h  |  61 ++-
 libms12v2/src/DolbyMS12.cpp                   |   4 +-
 libms12v2/src/DolbyMS12ConfigParams.cpp       | 443 ++++++++++++++++--
 libms12v2/src/aml_audio_ms12.c                |  24 +-
 libms12v2/src/dolby_ms12_config_params.cpp    | 195 +++++---
 14 files changed, 759 insertions(+), 136 deletions(-)

diff --git a/audio_hal/aml_audio_stream.c b/audio_hal/aml_audio_stream.c
index 2705157..26a6b43 100644
--- a/audio_hal/aml_audio_stream.c
+++ b/audio_hal/aml_audio_stream.c
@@ -102,6 +102,8 @@ void get_sink_format (struct audio_stream_out *stream)
     if ((source_format != AUDIO_FORMAT_PCM_16_BIT) && \
         (source_format != AUDIO_FORMAT_AC3) && \
         (source_format != AUDIO_FORMAT_E_AC3) && \
+        (source_format != AUDIO_FORMAT_MAT) && \
+        (source_format != AUDIO_FORMAT_AC4) && \
         (source_format != AUDIO_FORMAT_DTS) &&
         (source_format != AUDIO_FORMAT_DTS_HD)) {
         /*unsupport format [dts-hd/true-hd]*/
diff --git a/audio_hal/aml_audio_stream.h b/audio_hal/aml_audio_stream.h
index a47a0b3..0b6b081 100644
--- a/audio_hal/aml_audio_stream.h
+++ b/audio_hal/aml_audio_stream.h
@@ -103,6 +103,7 @@ static inline bool is_digital_raw_format(audio_format_t format)
     case AUDIO_FORMAT_AC3:
     case AUDIO_FORMAT_E_AC3:
     case AUDIO_FORMAT_MAT:
+    case AUDIO_FORMAT_AC4:
     case AUDIO_FORMAT_DTS:
     case AUDIO_FORMAT_DTS_HD:
     case AUDIO_FORMAT_DOLBY_TRUEHD:
diff --git a/audio_hal/audio_hw.c b/audio_hal/audio_hw.c
index 36b1ee1..ad8b9e2 100644
--- a/audio_hal/audio_hw.c
+++ b/audio_hal/audio_hw.c
@@ -1512,6 +1512,19 @@ static int out_set_parameters (struct audio_stream *stream, const char *kvpairs)
         ret = 0;
         goto exit;
     }
+
+    if (eDolbyMS12Lib == adev->dolby_lib_type) {
+        ret = str_parms_get_str(parms, "ms12_runtime", value, sizeof(value));
+        if (ret >= 0) {
+            char *parm = strstr(kvpairs, "=");
+            pthread_mutex_lock(&adev->lock);
+            if (parm)
+                aml_ms12_update_runtime_params(&(adev->ms12), parm+1);
+            pthread_mutex_unlock(&adev->lock);
+            goto exit;
+        }
+    }
+
 exit:
     str_parms_destroy (parms);
 
@@ -1667,13 +1680,16 @@ static int out_set_volume (struct audio_stream_out *stream, float left, float ri
         // MS12 initial DB gain is 0 when setup
         // without "adev->ms12->curDBGain != iMS12DB" conditional filter, audio will have gap when continous changing volume
         if (adev->ms12.curDBGain != iMS12DB) {
+            char param[16];
+            char *argv[3] = {"ms12_runtime", "--sys_prim_mixgain", param};
             // set duration to 10 will not introduce gap
             ret = set_dolby_ms12_primary_input_db_gain(&adev->ms12, iMS12DB , 10);
             if (ret < 0) {
                 ALOGE("%s,set dolby primary gain failed", __FUNCTION__);
             }
             adev->ms12.curDBGain = iMS12DB;
-            aml_ms12_update_runtime_params_lite(&(adev->ms12));
+            sprintf(param, "0,10,%d", iMS12DB);
+            aml_ms12_update_runtime_params_direct(&(adev->ms12), 3, argv);
             ALOGI("%s,out->volume_l = %f,  iMS12DB = %d", __FUNCTION__, out->volume_l, iMS12DB);
         }
 
@@ -1815,11 +1831,12 @@ static int out_pause_new (struct audio_stream_out *stream)
     if (eDolbyMS12Lib == aml_dev->dolby_lib_type) {
         if (aml_dev->continuous_audio_mode == 1) {
             if ((aml_dev->ms12.dolby_ms12_enable == true) && (aml_dev->ms12.is_continuous_paused == false)) {
+                char *argv[3] = {"ms12_runtime", "-pause", "1"};
                 aml_dev->ms12.is_continuous_paused = true;
                 pthread_mutex_lock(&ms12->lock);
                 int ms12_runtime_update_ret = 0;
                 dolby_ms12_set_pause_flag(aml_dev->ms12.is_continuous_paused);
-                ms12_runtime_update_ret = aml_ms12_update_runtime_params(&(aml_dev->ms12));
+                ms12_runtime_update_ret = aml_ms12_update_runtime_params_direct(&(aml_dev->ms12), 3, argv);
                 pthread_mutex_unlock(&ms12->lock);
                 ALOGI("%s ms12 set pause flag runtime return %d\n", __func__, ms12_runtime_update_ret);
             } else {
@@ -1875,11 +1892,12 @@ static int out_resume_new (struct audio_stream_out *stream)
     if (eDolbyMS12Lib == aml_dev->dolby_lib_type) {
         if (aml_dev->continuous_audio_mode == 1) {
             if ((aml_dev->ms12.dolby_ms12_enable == true) && (aml_dev->ms12.is_continuous_paused == true)) {
+                char *argv[3] = {"ms12_runtime", "-pause", "0"};
                 aml_dev->ms12.is_continuous_paused = false;
                 pthread_mutex_lock(&ms12->lock);
                 int ms12_runtime_update_ret = 0;
                 dolby_ms12_set_pause_flag(aml_dev->ms12.is_continuous_paused);
-                ms12_runtime_update_ret = aml_ms12_update_runtime_params(&(aml_dev->ms12));
+                ms12_runtime_update_ret = aml_ms12_update_runtime_params_direct(&(aml_dev->ms12), 3, argv);
                 pthread_mutex_unlock(&ms12->lock);
                 ALOGI("%s ms12 set unpause flag runtime return %d\n", __func__, ms12_runtime_update_ret);
             }
@@ -4507,6 +4525,7 @@ static void adev_close_output_stream(struct audio_hw_device *dev,
     if (continous_mode(adev) && (eDolbyMS12Lib == adev->dolby_lib_type)) {
         if (out->volume_l != 1.0) {
             if (!audio_is_linear_pcm(out->hal_internal_format)) {
+                char *argv[3] = {"ms12_runtime", "--sys_prim_mixgain", "0,10,0"};
                 /*we change the volume in this stream, but it will be closed,
                   we need to restore the ms12 to normal one
                 */
@@ -4514,7 +4533,8 @@ static void adev_close_output_stream(struct audio_hw_device *dev,
                 ALOGI("restore the ms12 volume");
                 set_dolby_ms12_primary_input_db_gain(&(adev->ms12), iMS12DB , 10);
                 adev->ms12.curDBGain = iMS12DB;
-                aml_ms12_update_runtime_params(&(adev->ms12));
+                //restore to full volume
+                aml_ms12_update_runtime_params_direct(&(adev->ms12), 3, argv);
             }
         }
     }
@@ -5199,14 +5219,17 @@ static int adev_set_parameters (struct audio_hw_device *dev, const char *kvpairs
 #ifdef ENABLE_DTV_PATCH
         ret = str_parms_get_int(parms, "associate_audio_mixing_enable", &val);
         if (ret >= 0) {
+            char *argv_1[3] = {"ms12_runtime", "-xa", "1"};
+            char *argv_0[3] = {"ms12_runtime", "-xa", "0"};
             pthread_mutex_lock(&adev->lock);
             pthread_mutex_lock(&ms12->lock);
             dtv_assoc_audio_cache(-1);
             adev->associate_audio_mixing_enable = val;
             ALOGI("associate_audio_mixing_enable set to %d\n", adev->associate_audio_mixing_enable);
             dolby_ms12_set_asscociated_audio_mixing(adev->associate_audio_mixing_enable);
-            int ms12_runtime_update_ret = aml_ms12_update_runtime_params(& (adev->ms12));
-            ALOGI("aml_ms12_update_runtime_params return %d\n", ms12_runtime_update_ret);
+            int ms12_runtime_update_ret = aml_ms12_update_runtime_params_direct(
+                &(adev->ms12), 3, (val) ? argv_1 : argv_0);
+            ALOGI("[%d] aml_ms12_update_runtime_params_direct return %d\n", __LINE__, ms12_runtime_update_ret);
             pthread_mutex_unlock(&adev->lock);
             pthread_mutex_unlock(&ms12->lock);
             goto exit;
@@ -5217,6 +5240,8 @@ static int adev_set_parameters (struct audio_hw_device *dev, const char *kvpairs
         if (ret >= 0) {
             int mix_user_prefer = 0;
             int mixing_level = val;
+            char *argv_1[3] = {"ms12_runtime", "-xu", "1"};
+            char *argv_0[3] = {"ms12_runtime", "-xu", "0"};
 
             pthread_mutex_lock(&adev->lock);
             pthread_mutex_lock(&ms12->lock);
@@ -5229,8 +5254,11 @@ static int adev_set_parameters (struct audio_hw_device *dev, const char *kvpairs
             adev->mixing_level = mix_user_prefer;
             ALOGI("mixing_level set to %d\n", adev->mixing_level);
             dolby_ms12_set_user_control_value_for_mixing_main_and_associated_audio(adev->mixing_level);
-            int ms12_runtime_update_ret = aml_ms12_update_runtime_params(& (adev->ms12));
-            ALOGI("aml_ms12_update_runtime_params return %d\n", ms12_runtime_update_ret);
+            int ms12_runtime_update_ret = aml_ms12_update_runtime_params_direct(
+                &(adev->ms12),
+                3,
+                (val) ? argv_1 : argv_0);
+            ALOGI("[%d]aml_ms12_update_runtime_params_direct return %d\n", __LINE__, ms12_runtime_update_ret);
             pthread_mutex_unlock(&ms12->lock);
             pthread_mutex_unlock(&adev->lock);
             goto exit;
@@ -5299,7 +5327,6 @@ static int adev_set_parameters (struct audio_hw_device *dev, const char *kvpairs
                 } else {
                     // enable/disable atoms lock
                     dolby_ms12_set_atmos_lock_flag(b_atmos_lock);
-                    aml_ms12_update_runtime_params(&(adev->ms12));
                     adev->atoms_lock_flag = b_atmos_lock;
                     ALOGI("%s set adev->atoms_lock_flag = %d, \n", __func__,adev->atoms_lock_flag);
                 }
@@ -5311,6 +5338,13 @@ static int adev_set_parameters (struct audio_hw_device *dev, const char *kvpairs
             goto exit;
         }
 
+        ret = str_parms_get_str(parms, "ms12_runtime", value, sizeof(value));
+        if (ret > 0) {
+            pthread_mutex_lock(&adev->lock);
+            aml_ms12_update_runtime_params(&(adev->ms12), value);
+            pthread_mutex_unlock(&adev->lock);
+            goto exit;
+        }
     }
     ret = str_parms_get_str(parms, "SOURCE_GAIN", value, sizeof(value));
     if (ret >= 0) {
@@ -6294,13 +6328,14 @@ int do_output_standby_l(struct audio_stream *stream)
                     pthread_mutex_lock(&adev->ms12.lock);
                     if (adev->ms12_main1_dolby_dummy == false
                         && !audio_is_linear_pcm(aml_out->hal_internal_format)) {
+                        char *argv[3] = {"ms12_runtime", "-pause", "0"};
                         dolby_ms12_set_main_dummy(0, true);
                         dolby_ms12_flush_main_input_buffer();
                         dolby_ms12_set_pause_flag(false);
                         //int iMS12DB = 0;//restore to full volume
                         //set_dolby_ms12_primary_input_db_gain(&(adev->ms12), iMS12DB , 10);
                         //adev->ms12.curDBGain = iMS12DB;
-                        aml_ms12_update_runtime_params(&(adev->ms12));
+                        aml_ms12_update_runtime_params_direct(&(adev->ms12), 3, argv);
                         adev->ms12.is_continuous_paused = false;
                         adev->ms12_main1_dolby_dummy = true;
                         ALOGI("%s set main dd+ dummy", __func__);
@@ -6312,9 +6347,11 @@ int do_output_standby_l(struct audio_stream *stream)
                         dolby_ms12_flush_main_input_buffer();
                         adev->ms12_ott_enable = true;
 #else
+                        char *argv[3] = {"ms12_runtime", "-pause", "0"};
                         dolby_ms12_flush_main_input_buffer();
                         dolby_ms12_set_pause_flag(false);
-                        aml_ms12_update_runtime_params(&(adev->ms12));
+                        aml_ms12_update_runtime_params_direct(
+                            &(adev->ms12), 3, argv);
                         adev->ms12.is_continuous_paused = false;
                         dolby_ms12_set_main_dummy(1, true);
                         adev->ms12_ott_enable = false;
@@ -8306,10 +8343,12 @@ ssize_t mixer_main_buffer_write (struct audio_stream_out *stream, const void *bu
         }
         if (continous_mode(adev)) {
             if ((adev->ms12.dolby_ms12_enable == true) && (adev->ms12.is_continuous_paused == true)) {
+                char *argv[3] = {"ms12_runtime", "-pause", "0"};
                 pthread_mutex_lock(&ms12->lock);
                 int ms12_runtime_update_ret = 0;
                 dolby_ms12_set_pause_flag(false);
-                ms12_runtime_update_ret = aml_ms12_update_runtime_params(&(adev->ms12));
+                ms12_runtime_update_ret = aml_ms12_update_runtime_params_direct(&(adev->ms12), 3, argv);
+
                 adev->ms12.is_continuous_paused = false;
                 pthread_mutex_unlock(&ms12->lock);
                 ALOGI("%s ms12 set unpause flag runtime return %d\n", __func__, ms12_runtime_update_ret);
diff --git a/audio_hal/audio_hw.h b/audio_hal/audio_hw.h
index 1276fb3..440d62a 100644
--- a/audio_hal/audio_hw.h
+++ b/audio_hal/audio_hw.h
@@ -117,6 +117,7 @@ enum {
     TYPE_TRUE_HD = 7,
     TYPE_DTS_HD_MA = 8,//should not used after we unify DTS-HD&DTS-HD MA
     TYPE_PCM_HIGH_SR = 9,
+    TYPE_AC4 = 10
 };
 
 #define FRAMESIZE_16BIT_STEREO 4
diff --git a/audio_hal/audio_hw_ms12.c b/audio_hal/audio_hw_ms12.c
index 2bb4603..8fb9276 100644
--- a/audio_hal/audio_hw_ms12.c
+++ b/audio_hal/audio_hw_ms12.c
@@ -584,8 +584,6 @@ int get_dolby_ms12_cleanup(struct dolby_ms12_desc *ms12)
 
     if (ms12->dolby_ms12_threadID != 0) {
         ms12->dolby_ms12_thread_exit = true;
-        int ms12_runtime_update_ret = aml_ms12_update_runtime_params(ms12);
-        ALOGI("aml_ms12_update_runtime_params return %d\n", ms12_runtime_update_ret);
         pthread_join(ms12->dolby_ms12_threadID, NULL);
         ms12->dolby_ms12_threadID = 0;
         ALOGI("%s() dolby_ms12_threadID reset to %ld\n", __FUNCTION__, ms12->dolby_ms12_threadID);
@@ -633,7 +631,7 @@ int set_dolby_ms12_primary_input_db_gain(struct dolby_ms12_desc *ms12, int db_ga
     gain.duration = duration;
     gain.shape = 0;
     dolby_ms12_set_system_sound_mixer_gain_values_for_primary_input(&gain);
-    dolby_ms12_set_input_mixer_gain_values_for_main_program_input(&gain);
+    //dolby_ms12_set_input_mixer_gain_values_for_main_program_input(&gain);
     //Fixme when tunnel mode is working, the Alexa start and mute the main input!
     //dolby_ms12_set_input_mixer_gain_values_for_ott_sounds_input(&gain);
     // only update very limited parameter with out lock
@@ -782,8 +780,14 @@ int set_system_app_mixing_status(struct aml_stream_out *aml_out, int stream_stat
     dolby_ms12_set_system_app_audio_mixing(system_app_mixing_status);
 
     if (ms12->dolby_ms12_enable) {
+        char *argv_0[3] = {"ms12_runtime", "-xs", "0"};
+        char *argv_1[3] = {"ms12_runtime", "-xs", "1"};
         pthread_mutex_lock(&ms12->lock);
-        ret = aml_ms12_update_runtime_params(&(adev->ms12));
+        ret = aml_ms12_update_runtime_params_direct(
+            &(adev->ms12),
+            3,
+            (system_app_mixing_status == SYSTEM_APP_SOUND_MIXING_ON) ?
+                argv_1 : argv_0);
         pthread_mutex_unlock(&ms12->lock);
         ALOGI("%s return %d stream-status %d set system-app-audio-mixing %d\n",
               __func__, ret, stream_status, system_app_mixing_status);
diff --git a/audio_hal/audio_hw_utils.c b/audio_hal/audio_hw_utils.c
index 4d87e2d..25d44da 100644
--- a/audio_hal/audio_hw_utils.c
+++ b/audio_hal/audio_hw_utils.c
@@ -188,6 +188,8 @@ int get_codec_type(int format)
     case AUDIO_FORMAT_DOLBY_TRUEHD:
     case AUDIO_FORMAT_MAT:
         return TYPE_TRUE_HD;
+    case AUDIO_FORMAT_AC4:
+        return TYPE_AC4;
     case AUDIO_FORMAT_PCM:
         return TYPE_PCM;
     default:
diff --git a/libms12v2/include/DolbyMS12ConfigParams.h b/libms12v2/include/DolbyMS12ConfigParams.h
index 5f61c95..ae967d1 100644
--- a/libms12v2/include/DolbyMS12ConfigParams.h
+++ b/libms12v2/include/DolbyMS12ConfigParams.h
@@ -56,20 +56,28 @@ public:
     virtual bool SetDolbyMS12ParamsbyOutProfile();
     virtual int SetInputOutputFileName(char **ConfigParams, int *row_index);
     virtual int SetFunctionalSwitches(char **ConfigParams, int *row_index);
+#if 0
     virtual int SetFunctionalSwitchesRuntime(char **ConfigParams, int *row_index);
     virtual int SetFunctionalSwitchesRuntime_lite(char **ConfigParams, int *row_index);
-
     virtual int SetDdplusSwitches(char **ConfigParams, int *row_index);
+#endif
 
     virtual int SetPCMSwitches(char **ConfigParams, int *row_index);
+#if 0
     virtual int SetPCMSwitchesRuntime(char **ConfigParams, int *row_index);
-
+#endif
+    virtual int SetAc4Switches(char **ConfigParams, int *row_index);
     virtual int SetHEAACSwitches(char **ConfigParams, int *row_index);
-    virtual int SetDAPDeviceSwitches(char **ConfigParams, int *row_index);
+    virtual int SetDAPDeviceSwitches(char **ConfigParams, int *row_index, int is_runtime);
     virtual int SetDAPContentSwitches(char **ConfigParams, int *row_index);
     virtual char **GetDolbyMS12ConfigParams(int *argc);
+#if 0
     virtual char **GetDolbyMS12RuntimeConfigParams(int *argc);
+#endif
+    virtual char **UpdateDolbyMS12RuntimeConfigParams(int *argc, char *cmd);
+#if 0
     virtual char **GetDolbyMS12RuntimeConfigParams_lite(int *argc);
+#endif
 
     //init the  mConfigParams Array
     virtual char **PrepareConfigParams(int max_raw_size, int max_column_size);
@@ -126,13 +134,13 @@ public:
     {
         mDRCCut = val;
     }
-    virtual void setDRCboostSystemVal(int val)
+    virtual void setDRCboostStereoVal(int val)
     {
-        mDRCBoostSystem = val;
+        mDRCBoostStereo = val;
     }
-    virtual void setDRCcutSystemVal(int val)
+    virtual void setDRCcutStereoVal(int val)
     {
-        mDRCCutSystem = val;
+        mDRCCutStereo = val;
     }
     virtual void setChannelConfigOfAppSoundsInput(audio_channel_mask_t channel_mask)
     {
@@ -260,10 +268,44 @@ public:
     }
 
     //DDPLUS SWITCHES
+#if 0
     virtual void setDDPAssociatedSubstreamSelection(int val)
     {
         mDdplusAssocSubstream = val;
     }
+#endif
+
+    //AC4 SWITCHES
+    virtual void setAC4Lang(char *str)
+    {
+        memset(mAC4Lang, 0, sizeof(mAC4Lang));
+        strncpy(mAC4Lang, str, 3);
+    }
+    virtual void setAC4Lang2(char *str)
+    {
+        memset(mAC4Lang2, 0, sizeof(mAC4Lang2));
+        strncpy(mAC4Lang2, str, 3);
+    }
+    virtual void setAC4Ac(int val)
+    {
+        mAC4Ac = val;
+    }
+    virtual void setAC4Pat(int val)
+    {
+        mAC4Pat = val;
+    }
+    virtual void setAC4PresGroupIdx(int val)
+    {
+        mAC4PresGroupIdx = val;
+    }
+    virtual void setAC4De(int val)
+    {
+        mAC4De = val;
+    }
+    virtual void setAC4ShortProgId(int val)
+    {
+        mAC4ShortProgId = val;
+    }
 
     //PCM SWITCHES
     virtual void setChnanelConfOfExternalPCMInput(audio_channel_mask_t channel_mask)
@@ -458,6 +500,8 @@ public:
 protected:
 
 private:
+    int ms_get_int_array_from_str(char **p_csv_string, int num_el, int *p_vals);
+    int ms_get_int_from_str(char **p_csv_string, int *p_vals);
     // DolbyMS12ConfigParams(const DolbyMS12ConfigParams&);
     // DolbyMS12ConfigParams& operator = (const DolbyMS12ConfigParams&);
     // static DolbyMS12ConfigParams *gInstance;
@@ -485,8 +529,8 @@ private:
     //bool mLowComplexityMode = false;
     int mDRCBoost;
     int mDRCCut;
-    int mDRCBoostSystem;
-    int mDRCCutSystem;
+    int mDRCBoostStereo;
+    int mDRCCutStereo;
     int mChannelConfAppSoundsIn;
     int mChannelConfSystemIn;
     bool mMainFlags;//has dd/ddp/he-aac audio
@@ -539,13 +583,21 @@ private:
     };//System sound mixer gain values for System Sounds input
 
     //DDPLUS SWITCHES
-    int mDdplusAssocSubstream;//[ddplus] Associated substream selection, [0,3], no default
 
     //PCM SWITCHES
     int mChannelConfigInExtPCMInput;//Channel configuration of external PCM input, default is 7;
     bool mLFEPresentInExtPCMInput = true;//LFE present in external PCM input
     int mCompressorProfile;//[pcm] Compressor profile
 
+    //AC4 SWITCHES
+    char mAC4Lang[4];
+    char mAC4Lang2[4];
+    int mAC4Ac;//[ac4] Preferred associated type of service, 1:Visually Impaired (VI, default), 2: Hearing Impaired (HI), 3: Commentary
+    int mAC4Pat;//[ac4] Prefer Presentation Selection by associated type over language, 0: Prefer selection by language, 1: Prefer selection by associated type (default)
+    int mAC4PresGroupIdx;//[ac4] Presentation group index to be decoded. 0>>>510: Presentation group index, -1: switch back to automatic selection by language and associated type (default)
+    int mAC4De;//[ac4] Dialogue Enhancement gain [0-12], default 0
+    int mAC4ShortProgId;//[ac4] The short program identifier as 16 bit unsigned value or -1 for no program (default)
+
     //HE-AAC SWITCHES
     int mAssocInstanse;//[he-aac] Associated instance restricted to 2 channels
     int mDefDialnormVal;//[he-aac] Default dialnorm value (dB/4),  0 - 127; Default = 108 (-27dB)
diff --git a/libms12v2/include/aml_audio_ms12.h b/libms12v2/include/aml_audio_ms12.h
index 4fdee6c..99a9104 100644
--- a/libms12v2/include/aml_audio_ms12.h
+++ b/libms12v2/include/aml_audio_ms12.h
@@ -120,9 +120,15 @@ int aml_ms12_config(struct dolby_ms12_desc *ms12_desc
  */
 int aml_ms12_cleanup(struct dolby_ms12_desc *ms12_desc);
 
-int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc);
+int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc, char *cmd);
 
+int aml_ms12_update_runtime_params_direct(struct dolby_ms12_desc *ms12_desc
+                    , int argc
+                    , char **argv);
+
+#if 0
 int aml_ms12_update_runtime_params_lite(struct dolby_ms12_desc *ms12_desc);
+#endif
 
 int aml_ms12_lib_preload();
 
diff --git a/libms12v2/include/dolby_ms12_config_parameter_struct.h b/libms12v2/include/dolby_ms12_config_parameter_struct.h
index 2e0fa90..9bf4933 100644
--- a/libms12v2/include/dolby_ms12_config_parameter_struct.h
+++ b/libms12v2/include/dolby_ms12_config_parameter_struct.h
@@ -107,4 +107,11 @@ typedef struct
     int de_ducking;//(0...16, def: 0)
 }DAPDialogueEnhancer;
 
+typedef struct
+{
+    int mode; // (0,1,2, def 1)
+    int boost; // (0..96, def: 96)
+}DAPSurVirtulizer;
+
+
 #endif //end of _DOLBY_MS12_CONFIG_PARAMMETER_STRUCT_H_
diff --git a/libms12v2/include/dolby_ms12_config_params.h b/libms12v2/include/dolby_ms12_config_params.h
index 4752738..1f9f9f2 100644
--- a/libms12v2/include/dolby_ms12_config_params.h
+++ b/libms12v2/include/dolby_ms12_config_params.h
@@ -70,6 +70,7 @@ bool dolby_ms12_config_params_set_surround_sound_by_out_profile(void);
 // int dolby_ms12_config_params_set_input_output_file_name(char **ConfigParams, int *row_index);
 // int dolby_ms12_config_params_set_functional_switches(char **ConfigParams, int *row_index);
 // int dolby_ms12_config_params_set_ddplus_switches(char **ConfigParams, int *row_index);
+// int dolby_ms12_config_params_set_ac4_switches(char **ConfigParams, int *row_index);
 // int dolby_ms12_config_params_set_pcm_switches(char **ConfigParams, int *row_index);
 // int dolby_ms12_config_params_set_heaac_switches(char **ConfigParams, int *row_index);
 // int dolby_ms12_config_params_set_dap_device_switches(char **ConfigParams, int *row_index);
@@ -84,6 +85,7 @@ bool dolby_ms12_config_params_set_surround_sound_by_out_profile(void);
  */
 char **dolby_ms12_config_params_get_config_params(int *argc);
 
+#if 0
 /**
  * @brief Get the dolby_ms12_update_runtime_params() input params
  * @int *argc //dolby_ms12_init *argc
@@ -91,6 +93,17 @@ char **dolby_ms12_config_params_get_config_params(int *argc);
  * @return the char **argv
  */
 char **dolby_ms12_config_params_get_runtime_config_params(int *argc);
+#endif
+
+/**
+ * @brief Update dolby_ms12 runtime params
+ * @int *argc //dolby_ms12_init *argc
+ * @char *cmd //dolby_ms12_init *argv
+ *
+ * @return the char **argv
+ */
+char **dolby_ms12_config_params_update_runtime_config_params(int *argc, char *cmd);
+
 //char **dolby_ms12_config_params_prepare_config_params(int max_raw_size, int max_column_size);
 //void dolby_ms12_config_params_cleanup_config_params(char **ConfigParams, int max_raw_size);
 
@@ -149,13 +162,13 @@ void dolby_ms12_set_drc_cut(int val);
  * @brief set DRC boost value for 2-channel downmix
  * int val//0 - 100; Default = 100
  */
-void dolby_ms12_set_drc_boost_system(int val);
+void dolby_ms12_set_drc_boost_stereo(int val);
 
 /**
  * @brief set DRC cut value for 2-channel downmix
  * int val//0 - 100; Default = 100
  */
-void dolby_ms12_set_drc_cut_system(int val);
+void dolby_ms12_set_drc_cut_stereo(int val);
 
 /**
  * @brief Channel configuration of Application Sounds input
@@ -333,6 +346,50 @@ void dolby_ms12_set_system_sound_mixer_gain_values_for_system_sounds_input(MixGa
  */
 void dolby_ms12_set_ddp_associated_substream_selection(int val);
 
+//AC4 SWITCHES
+/**
+ * @brief [ac4] 1st preferred language code (3 Letter ISO 639)
+ */
+void dolby_ms12_set_ac4_lang(char *str);
+
+/**
+ * @brief [ac4] 2nd preferred language code (3 Letter ISO 639)
+ */
+void dolby_ms12_set_ac4_lang2(char *str);
+
+/**
+ * @brief [ac4] Preferred associated type of service
+ * 1: Visually Impaired (VI) (Default)
+ * 2: Hearing Impaired (HI)
+ * 3: Commentary
+ */
+void dolby_ms12_set_ac4_ac(int val);
+
+/**
+ * @brief [ac4] Preferred presentation selection by associated type over language
+ * 0: Perfer selection by language
+ * 1: Prefer selection by associated type (default)
+ */
+void dolby_ms12_set_ac4_pat(int val);
+
+/**
+ * @brief [ac4] Presentation group index to be decoded. Overrides the presentation selection by preferred language amd associated type.
+ * 0..510: Presentation group index
+ * -1: Switch back to automatic selection by language and associated type (default)
+ */
+void dolby_ms12_set_ac4_presgroupidx(int val);
+
+/**
+ * @brief [ac4] Dialogue enhancement gain that will be applied in the decoder
+ * [0-12] default 0db
+ */
+void dolby_ms12_set_ac4_de(int val);
+
+/**
+ * @brief [ac4] The short program identifier as an 16 bit unsigned value or -1 for no program ID (default)
+ */
+void dolby_ms12_set_ac4_shortprogid(int val);
+
 //PCM SWITCHES
 /**
  * @brief Channel configuration of external PCM input
diff --git a/libms12v2/src/DolbyMS12.cpp b/libms12v2/src/DolbyMS12.cpp
index c38dd20..66c4032 100644
--- a/libms12v2/src/DolbyMS12.cpp
+++ b/libms12v2/src/DolbyMS12.cpp
@@ -133,9 +133,9 @@ int DolbyMS12::GetLibHandle(void)
     }
 
 #ifdef REPLACE_OUTPUT_BUFFER_WITH_CALLBACK
-    FuncDolbyMS12RegisterOutputCallback = (int (*)(output_callback , void *)) dlsym(mDolbyMS12LibHanle, "ms12_output_register_output_callback");
+    FuncDolbyMS12RegisterOutputCallback = (int (*)(output_callback , void *)) dlsym(mDolbyMS12LibHanle, "ms12_register_output_callback");
     if (!FuncDolbyMS12RegisterOutputCallback) {
-        ALOGE("%s, dlsym ms12_output_register_pcm_callback fail\n", __FUNCTION__);
+        ALOGE("%s, dlsym ms12_register_output_callback fail\n", __FUNCTION__);
         goto ERROR;
     }
 #else
diff --git a/libms12v2/src/DolbyMS12ConfigParams.cpp b/libms12v2/src/DolbyMS12ConfigParams.cpp
index 0e169cb..18fddba 100644
--- a/libms12v2/src/DolbyMS12ConfigParams.cpp
+++ b/libms12v2/src/DolbyMS12ConfigParams.cpp
@@ -21,6 +21,7 @@
 #include <cutils/log.h>
 #include <stdio.h>
 #include <string.h>
+#include <sstream>
 #include <stdlib.h>
 #include <stdbool.h>
 #include <unistd.h>
@@ -61,6 +62,8 @@ namespace android
 #define DEFAULT_MAIN_MAT_FILE_NAME "/data/main.mat"
 //@@@MLP input file
 #define DEFAULT_MAIN_MLP_FILE_NAME "/data/main.mlp"
+//@@@AC4 input file
+#define DEFAULT_MAIN_AC4_FILE_NAME "/data/main.ac4"
 
 #define DEFAULT_OUTPUT_PCM_MULTI_FILE_NAME "/data/outputmulti.wav"
 #define DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME "/data/outputdownmix.wav"
@@ -97,8 +100,8 @@ DolbyMS12ConfigParams::DolbyMS12ConfigParams():
     // , mMultiOutputFlag(true)
     , mDRCBoost(100)
     , mDRCCut(100)
-    , mDRCBoostSystem(100)
-    , mDRCCutSystem(100)
+    , mDRCBoostStereo(100)
+    , mDRCCutStereo(100)
     , mChannelConfAppSoundsIn(7)//5.1
     , mChannelConfSystemIn(2)//2.0
     , mMainFlags(true)
@@ -125,7 +128,6 @@ DolbyMS12ConfigParams::DolbyMS12ConfigParams():
     , mUserControlVal(0)
 
     //DDPLUS SWITCHES
-    , mDdplusAssocSubstream(1)//range 1~3, here choose 1
     , mChannelConfigInExtPCMInput(7)
     , mLFEPresentInExtPCMInput(true)
     , mCompressorProfile(0)
@@ -136,6 +138,15 @@ DolbyMS12ConfigParams::DolbyMS12ConfigParams():
     , mDualMonoreproductionMode(0)
     , mAribChannelMappingFlag(0)
 
+    //AC4 SWITCHES
+    , mAC4Lang("")
+    , mAC4Lang2("")
+    , mAC4Ac(1)
+    , mAC4Pat(1)
+    , mAC4PresGroupIdx(-1)
+    , mAC4De(0)
+    , mAC4ShortProgId(-1)
+
     //DAP SWITCHES (device specific)
     , mDAPTuningFile(DEFAULT_DAP_TUNING_FILE_NAME)
     , mDAPGains(0)
@@ -273,6 +284,12 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
                 mMainFlags = true;
                 mAppSoundFlags = false;
                 mSystemSoundFlags = false;
+            } else if (mAudioStreamOutFormat == AUDIO_FORMAT_AC4) {
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_AC4_FILE_NAME);
+                (*row_index)++;
+                mMainFlags = true;
+                mAppSoundFlags = false;
+                mSystemSoundFlags = false;
             } else if ((mAudioStreamOutFormat == AUDIO_FORMAT_AAC) || (mAudioStreamOutFormat == AUDIO_FORMAT_HE_AAC_V1)) {
                 //fixme, which he-aac format is allowed to this flow.
                 sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_HEAAC_V1_FILE_NAME);
@@ -377,6 +394,12 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
             sprintf(ConfigParams[*row_index], "%s", mDolbyMain2FileName);
             (*row_index)++;
             ALOGD("%s() main1 %s main2 %s", __FUNCTION__, mDolbyMain1FileName, mDolbyMain2FileName);
+        } else if (mAudioStreamOutFormat == AUDIO_FORMAT_AC4) {
+            sprintf(ConfigParams[*row_index], "%s", "-im");
+            (*row_index)++;
+            sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_AC4_FILE_NAME);
+            (*row_index)++;
+            ALOGD("%s() main1 %s", __FUNCTION__, mDolbyMain1FileName);
         }
         if (mOTTSoundInputEnable == true) {
             sprintf(ConfigParams[*row_index], "%s", "-iui");
@@ -401,16 +424,36 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
         sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DD_FILE_NAME);
         (*row_index)++;
         if (mDualOutputFlag == true) {
-            sprintf(ConfigParams[*row_index], "%s", "-oms");
-            (*row_index)++;
-            sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
-            (*row_index)++;
+            if (mDAPInitMode != 0) {
+                sprintf(ConfigParams[*row_index], "%s", "-o_dap_speaker");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DAP_FILE_NAME);
+                (*row_index)++;
+            } else {
+                sprintf(ConfigParams[*row_index], "%s", "-oms");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
+                (*row_index)++;
+            }
         }
     } else if (mDolbyMS12OutFormat == AUDIO_FORMAT_E_AC3) {
         sprintf(ConfigParams[*row_index], "%s", "-odp");
         (*row_index)++;
         sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DDP_FILE_NAME);
         (*row_index)++;
+        if (mDualOutputFlag == true) {
+            if (mDAPInitMode != 0) {
+                sprintf(ConfigParams[*row_index], "%s", "-o_dap_speaker");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DAP_FILE_NAME);
+                (*row_index)++;
+            } else {
+                sprintf(ConfigParams[*row_index], "%s", "-oms");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
+                (*row_index)++;
+            }
+        }
     } else if (mDolbyMS12OutFormat == AUDIO_FORMAT_MAT) {
         sprintf(ConfigParams[*row_index], "%s", "-omat");
         (*row_index)++;
@@ -522,17 +565,17 @@ int DolbyMS12ConfigParams::SetFunctionalSwitches(char **ConfigParams, int *row_i
 {
     ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
     if (mStereoOutputFlag == true) {
-        if ((mDRCBoost >= 0) && (mDRCBoost <= 100)) {
+        if ((mDRCBoostStereo >= 0) && (mDRCBoostStereo <= 100)) {
             sprintf(ConfigParams[*row_index], "%s", "-bs");
             (*row_index)++;
-            sprintf(ConfigParams[*row_index], "%d", mDRCBoostSystem);
+            sprintf(ConfigParams[*row_index], "%d", mDRCBoostStereo);
             (*row_index)++;
         }
 
-        if ((mDRCCut >= 0) && (mDRCCut <= 100)) {
+        if ((mDRCCutStereo >= 0) && (mDRCCutStereo <= 100)) {
             sprintf(ConfigParams[*row_index], "%s", "-cs");
             (*row_index)++;
-            sprintf(ConfigParams[*row_index], "%d", mDRCCutSystem);
+            sprintf(ConfigParams[*row_index], "%d", mDRCCutStereo);
             (*row_index)++;
         }
     }
@@ -787,6 +830,7 @@ int DolbyMS12ConfigParams::SetFunctionalSwitches(char **ConfigParams, int *row_i
     return 0;
 }
 
+#if 0
 //functional switches
 int DolbyMS12ConfigParams::SetFunctionalSwitchesRuntime(char **ConfigParams, int *row_index)
 {
@@ -1015,23 +1059,9 @@ int DolbyMS12ConfigParams::SetFunctionalSwitchesRuntime_lite(char **ConfigParams
     ALOGV("-%s() line %d\n", __FUNCTION__, __LINE__);
     return 0;
 }
-
+#endif
 
 //ddplus switches
-int DolbyMS12ConfigParams::SetDdplusSwitches(char **ConfigParams, int *row_index)
-{
-    ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
-    if ((mHasAssociateInput == true) && ((mAudioStreamOutFormat == AUDIO_FORMAT_AC3) || (mAudioStreamOutFormat == AUDIO_FORMAT_E_AC3))) {
-        sprintf(ConfigParams[*row_index], "%s", "-at");
-        (*row_index)++;
-        ALOGD("+%s() mDdplusAssocSubstream %d\n", __FUNCTION__, mDdplusAssocSubstream);
-        sprintf(ConfigParams[*row_index], "%d", mDdplusAssocSubstream);//choose mid-val
-        (*row_index)++;
-    }
-
-    ALOGV("-%s() line %d\n", __FUNCTION__, __LINE__);
-    return 0;
-}
 
 //PCM switches
 int DolbyMS12ConfigParams::SetPCMSwitches(char **ConfigParams, int *row_index)
@@ -1069,6 +1099,7 @@ int DolbyMS12ConfigParams::SetPCMSwitches(char **ConfigParams, int *row_index)
 }
 
 //PCM switches
+#if 0
 int DolbyMS12ConfigParams::SetPCMSwitchesRuntime(char **ConfigParams, int *row_index)
 {
     ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
@@ -1093,6 +1124,68 @@ int DolbyMS12ConfigParams::SetPCMSwitchesRuntime(char **ConfigParams, int *row_i
     ALOGV("-%s() line %d\n", __FUNCTION__, __LINE__);
     return 0;
 }
+#endif
+
+//AC4 switches
+int DolbyMS12ConfigParams::SetAc4Switches(char **ConfigParams, int *row_index)
+{
+    ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
+
+    if (mAudioStreamOutFormat != AUDIO_FORMAT_AC4)
+        return 0;
+
+    if (mAC4Lang[0]) {
+        sprintf(ConfigParams[*row_index], "%s", "-lang");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%s", mAC4Lang);
+        (*row_index)++;
+    }
+
+    if (mAC4Lang2[0]) {
+        sprintf(ConfigParams[*row_index], "%s", "-lang2");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%s", mAC4Lang2);
+        (*row_index)++;
+    }
+
+    if ((mAC4Ac >= 1) && (mAC4Ac <= 3)) {
+        sprintf(ConfigParams[*row_index], "%s", "-at");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mAC4Ac);
+        (*row_index)++;
+    }
+
+    if ((mAC4Pat >= 0) && (mAC4Pat <= 1)) {
+        sprintf(ConfigParams[*row_index], "%s", "-pat");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mAC4Pat);
+        (*row_index)++;
+    }
+
+    if ((mAC4PresGroupIdx >= -1) && (mAC4PresGroupIdx <= 510)) {
+        sprintf(ConfigParams[*row_index], "%s", "-ac4_pres_group_idx");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mAC4PresGroupIdx);
+        (*row_index)++;
+    }
+
+    if ((mAC4De >= 0) && (mAC4De <= 12)) {
+        sprintf(ConfigParams[*row_index], "%s", "-ac4_de");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mAC4De);
+        (*row_index)++;
+    }
+
+    if (mAC4ShortProgId != -1) {
+        sprintf(ConfigParams[*row_index], "%s", "-ac4_short_prog_id");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mAC4ShortProgId);
+        (*row_index)++;
+    }
+
+    ALOGV("-%s() line %d\n", __FUNCTION__, __LINE__);
+    return 0;
+}
 
 //HE-AAC switches, all none-run-time
 int DolbyMS12ConfigParams::SetHEAACSwitches(char **ConfigParams, int *row_index)
@@ -1229,12 +1322,11 @@ int DolbyMS12ConfigParams::SetOTTProcessingGraphSwitchesRuntime(char **ConfigPar
 
 //DAP SWITCHES (device specific)
 //all run-time
-int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_index)
+int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_index, int is_runtime)
 {
-    std::string tmpParam("");
+    char tmpParam[32];
     ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
-
-    if (mDAPTuningFile) {
+    if (mDAPTuningFile && !is_runtime) {
         sprintf(ConfigParams[*row_index], "%s", "-dap_tuning");
         (*row_index)++;
         sprintf(ConfigParams[*row_index], "%s", mDAPTuningFile);
@@ -1267,27 +1359,19 @@ int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_in
         sprintf(ConfigParams[*row_index], "%s", "-dap_graphic_eq");
         (*row_index)++;
         sprintf(ConfigParams[*row_index], "%d,%d", DeviceDAPGraphicEQ.eq_enable, DeviceDAPGraphicEQ.eq_nb_bands);
-        //tmpParam += String8::format("%s", ConfigParams[*row_index]);
-        tmpParam += ConfigParams[*row_index];
         int i = 0;
         for (i = 0; i < DeviceDAPGraphicEQ.eq_nb_bands; i++) {
-            sprintf(ConfigParams[*row_index], ",%d", DeviceDAPGraphicEQ.eq_band_center[i]);
-            //tmpParam += String8::format("%s", ConfigParams[*row_index]);
-            tmpParam += ConfigParams[*row_index];
+            snprintf(tmpParam, sizeof(tmpParam)-1, ",%d", DeviceDAPGraphicEQ.eq_band_center[i]);
+            strcat(ConfigParams[*row_index], tmpParam);
         }
 
         for (i = 0; i < DeviceDAPGraphicEQ.eq_nb_bands; i++) {
-            sprintf(ConfigParams[*row_index], ",%d", DeviceDAPGraphicEQ.eq_band_target[i]);
-            //tmpParam += String8::format("%s", ConfigParams[*row_index]);
-            tmpParam += ConfigParams[*row_index];
+            snprintf(tmpParam, sizeof(tmpParam)-1, ",%d", DeviceDAPGraphicEQ.eq_band_target[i]);
+            strcat(ConfigParams[*row_index], tmpParam);
         }
-        //memcpy(ConfigParams[*row_index], tmpParam.string(), strlen(tmpParam.string()));
-        memcpy(ConfigParams[*row_index], tmpParam.c_str(), tmpParam.size());
         (*row_index)++;
     }
 
-    tmpParam.clear();
-
     if (DeviceDAPBassEnhancer.bass_enable == 1) {
         sprintf(ConfigParams[*row_index], "%s", "-dap_bass_enhancer");
         (*row_index)++;
@@ -1296,7 +1380,6 @@ int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_in
         (*row_index)++;
     }
 
-    tmpParam.clear();
     if (mDAPVirtualBassEnable == 1) {
         sprintf(ConfigParams[*row_index], "%s", "-dap_virtual_bass");
         (*row_index)++;
@@ -1379,12 +1462,12 @@ char **DolbyMS12ConfigParams::GetDolbyMS12ConfigParams(int *argc)
         sprintf(mConfigParams[mParamNum++], "%s", params_bin);
         SetInputOutputFileName(mConfigParams, &mParamNum);
         SetFunctionalSwitches(mConfigParams, &mParamNum);
-        SetDdplusSwitches(mConfigParams, &mParamNum);
+        SetAc4Switches(mConfigParams, &mParamNum);
         SetPCMSwitches(mConfigParams, &mParamNum);
         SetHEAACSwitches(mConfigParams, &mParamNum);
         SetOTTProcessingGraphSwitches(mConfigParams, &mParamNum);
         if (mDAPInitMode) {
-            SetDAPDeviceSwitches(mConfigParams, &mParamNum);
+            SetDAPDeviceSwitches(mConfigParams, &mParamNum, 0);
             SetDAPContentSwitches(mConfigParams, &mParamNum);
         }
         *argc = mParamNum;
@@ -1404,6 +1487,45 @@ char **DolbyMS12ConfigParams::GetDolbyMS12ConfigParams(int *argc)
     return mConfigParams;
 }
 
+int DolbyMS12ConfigParams::ms_get_int_array_from_str(char **p_csv_string, int num_el, int *p_vals)
+{
+    char *endstr;
+    int i;
+
+    for (i = 0; i < num_el; i++) {
+        int val = strtol(*p_csv_string, &endstr, 0);
+        if (*p_csv_string == endstr) {
+            return -1;
+        }
+        p_vals[i] = val;
+        *p_csv_string = endstr;
+        if (**p_csv_string == ',') {
+            (*p_csv_string)++;
+        }
+    }
+
+    return 0;
+}
+
+int DolbyMS12ConfigParams::ms_get_int_from_str(char **p_csv_string, int *p_vals)
+{
+    char *endstr;
+    int val = strtol(*p_csv_string, &endstr, 0);
+
+    if (*p_csv_string == endstr) {
+        return -1;
+    } else {
+        *p_vals = val;
+        *p_csv_string = endstr;
+        if (**p_csv_string == ',') {
+            (*p_csv_string)++;
+        }
+    }
+
+    return 0;
+}
+
+#if 0
 char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams(int *argc)
 {
     ALOGD("+%s()", __FUNCTION__);
@@ -1416,7 +1538,7 @@ char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams(int *argc)
         SetPCMSwitchesRuntime(mConfigParams, &mParamNum);
         SetOTTProcessingGraphSwitchesRuntime(mConfigParams, &mParamNum);
         if (mDAPInitMode) {
-            SetDAPDeviceSwitches(mConfigParams, &mParamNum);
+            SetDAPDeviceSwitches(mConfigParams, &mParamNum, 1);
             SetDAPContentSwitches(mConfigParams, &mParamNum);
         }
         *argc = mParamNum;
@@ -1435,7 +1557,235 @@ char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams(int *argc)
     ALOGD("-%s()", __FUNCTION__);
     return mConfigParams;
 }
+#endif
+
+char **DolbyMS12ConfigParams::UpdateDolbyMS12RuntimeConfigParams(int *argc, char *cmd)
+{
+    ALOGD("+%s()", __FUNCTION__);
+    ALOGD("ms12 runtime cmd: %s", cmd);
+
+    strcpy(mConfigParams[0], "ms12_runtime");
+
+    *argc = 1;
+    mParamNum = 1;
+
+    std::string token;
+    std::istringstream cmd_string(cmd);
+    int index = 1, val;
+    char *opt = NULL;
+
+    while (cmd_string >> token) {
+        strncpy(mConfigParams[mParamNum], token.c_str(), MAX_ARGV_STRING_LEN);
+        mConfigParams[mParamNum][MAX_ARGV_STRING_LEN - 1] = '\0';
+        ALOGI("argv[%d] = %s", mParamNum, mConfigParams[mParamNum]);
+        mParamNum++;
+        (*argc)++;
+    }
+
+    while (index < *argc) {
+        if (!opt) {
+            if ((mConfigParams[index][0] == '-') && (mConfigParams[index][1] < '0' || mConfigParams[index][1] > '9')) {
+                opt = mConfigParams[index] + 1;
+            } else {
+                ALOGE("Invalid option sequence, skipped %s", mConfigParams[index]);
+            }
+            index++;
+            continue;
+        }
+
+        if (strcmp(opt, "u") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 2)) {
+                ALOGI("-u DualMonoReproMode: %d", val);
+                mDualMonoReproMode = val;
+            }
+        } else if (strcmp(opt, "b") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 100)) {
+                ALOGI("-b DRCBoost: %d", val);
+                mDRCBoost = val;
+            }
+        } else if (strcmp(opt, "bs") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 100)) {
+                ALOGI("-bs DRCBoostStereo: %d", val);
+                mDRCBoostStereo = val;
+            }
+        } else if (strcmp(opt, "c") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 100)) {
+                ALOGI("-c DRCCut: %d", val);
+                mDRCCut = val;
+            }
+        } else if (strcmp(opt, "cs") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 100)) {
+                ALOGI("-c DRCCutStereo: %d", val);
+                mDRCCutStereo = val;
+            }
+        } else if (strcmp(opt, "dmx") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 2)) {
+                ALOGI("-c DRCCutStereo: %d", val);
+                mDownmixMode = val;
+            }
+        } else if (strcmp(opt, "drc") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-drc DRCModesOfDownmixedOutput: %d", val);
+                mDRCModesOfDownmixedOutput = val;
+            }
+        } else if (strcmp(opt, "at") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 3)) {
+                ALOGI("-at AC4Ac: %d", val);
+                mAC4Ac = val;
+            }
+        } else if (strcmp(opt, "pat") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-pat AC4Pat: %d", val);
+                mAC4Pat = val;
+            }
+        } else if (strcmp(opt, "lang") == 0) {
+            ALOGI("-lang AC4Lang: %s", mConfigParams[index]);
+            strncpy(mAC4Lang, mConfigParams[index], 3);
+        } else if (strcmp(opt, "lang2") == 0) {
+            ALOGI("-lang2 AC4Lang2: %s", mConfigParams[index]);
+            strncpy(mAC4Lang2, mConfigParams[index], 3);
+        } else if (strcmp(opt, "ac4_de") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-ac4_de AC4Ac: %d", val);
+                mAC4Ac = val;
+            }
+        } else if (strcmp(opt, "ac4_pres_group_idx") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 510)) {
+                ALOGI("-ac4_pres_group_idx AC4PresGroupIdx: %d", val);
+                mAC4PresGroupIdx = val;
+            }
+        } else if (strcmp(opt, "ac4_short_prog_id") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-ac4_pres_group_idx AC4ShortProgId: %d", val);
+                mAC4ShortProgId = val;
+            }
+        } else if (strcmp(opt, "dap_surround_decoder_enable") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-dap_surround_decoder_enable DAPSurDecEnable: %d", val);
+                mDAPSurDecEnable = val;
+            }
+        } else if (strcmp(opt, "dap_drc") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ALOGI("-dap_drc DAPDRCMode: %d", val);
+                mDAPDRCMode = val;
+            }
+        } else if (strcmp(opt, "dap_bass_enhancer") == 0) {
+            int param[4];
+            if (sscanf(mConfigParams[index], "%d,%d,%d,%d",
+                &param[0], &param[1], &param[2], &param[3]) == 4) {
+                if ((param[0] >= 0) && (param[0] <= 1))
+                    DeviceDAPBassEnhancer.bass_enable = param[0];
+                if ((param[1] >= 0) && (param[1] <= 384))
+                    DeviceDAPBassEnhancer.bass_boost = param[1];
+                if ((param[2] >= 20) && (param[2] <= 20000))
+                    DeviceDAPBassEnhancer.bass_cutoff = param[2];
+                if ((param[3] >= 2) && (param[3] <= 64))
+                    DeviceDAPBassEnhancer.bass_width = param[3];
+                ALOGI("-dap_bass_enhancer DeviceDAPBassEnhancer: %d %d %d %d", param[0], param[1], param[2], param[3]);
+            }
+        } else if (strcmp(opt, "dap_dialogue_enhancer") == 0) {
+            int param[2];
+            if (sscanf(mConfigParams[index], "%d,%d",
+                &param[0], &param[1]) == 2) {
+                if ((param[0] >= 0) && (param[0] <= 1))
+                    ContenDAPDialogueEnhancer.de_enable = param[0];
+                if ((param[1] >= 0) && (param[1] <= 16))
+                    ContenDAPDialogueEnhancer.de_amount = param[1];
+                ALOGI("-dap_dialogue_enhancer ContenDAPDialogueEnhancer: %d %d", param[0], param[1]);
+            }
+        } else if (strcmp(opt, "dap_graphic_eq") == 0) {
+            DAPGraphicEQ eq;
+            char *ptr = mConfigParams[index];
+            if (ms_get_int_from_str(&ptr, &eq.eq_enable) < 0)
+                goto eq_error;
+            if (ms_get_int_from_str(&ptr, &eq.eq_nb_bands) < 0)
+                goto eq_error;
+            if (eq.eq_nb_bands > 20)
+                goto eq_error;
+            if (ms_get_int_array_from_str(&ptr, eq.eq_nb_bands,
+                &eq.eq_band_center[0]) < 0)
+                goto eq_error;
+            if (ms_get_int_array_from_str(&ptr, eq.eq_nb_bands,
+                &eq.eq_band_target[0]) < 0)
+                goto eq_error;
+            DeviceDAPGraphicEQ = eq;
+            ALOGI("-dap_graphic_eq DeviceDAPGraphicEQ: %d %d", eq.eq_enable, eq.eq_nb_bands);
+        } else if (strcmp(opt, "dap_ieq") == 0) {
+            DAPIEQ ieq;
+            char *ptr = mConfigParams[index];
+            if (ms_get_int_from_str(&ptr, &ieq.ieq_enable) < 0)
+                goto eq_error;
+            if (ms_get_int_from_str(&ptr, &ieq.ieq_amount) < 0)
+                goto eq_error;
+            if (ms_get_int_from_str(&ptr, &ieq.ieq_nb_bands) < 0)
+                goto eq_error;
+            if (ieq.ieq_nb_bands > 20)
+                goto eq_error;
+            if (ms_get_int_array_from_str(&ptr, ieq.ieq_nb_bands,
+                &ieq.ieq_band_center[0]) < 0)
+                goto eq_error;
+            if (ms_get_int_array_from_str(&ptr, ieq.ieq_nb_bands,
+                &ieq.ieq_band_target[0]) < 0)
+                goto eq_error;
+            ContentDAPIEQ = ieq;
+            ALOGI("-dap_ieq: %d %d %d", ieq.ieq_enable, ieq.ieq_amount, ieq.ieq_nb_bands);
+        } else if (strcmp(opt, "dap_gains") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= -2080) && (val <= 480)) {
+                ALOGI("-dap_gains: %d", val);
+                mDAPGains = val;
+            }
+        } else if (strcmp(opt, "dap_leveler") == 0) {
+            int param[2];
+            if (sscanf(mConfigParams[index], "%d,%d",
+                &param[0], &param[1]) == 2) {
+                if ((param[0] >= 0) && (param[0] <= 2))
+                    ContentDAPLeveler.leveler_enable = param[0];
+                if ((param[1] >= 0) && (param[1] <= 16))
+                    ContentDAPLeveler.leveler_amount = param[1];
+                ALOGI("-dap_leveler: %d %d", param[0], param[1]);
+            }
+        } else if (strcmp(opt, "dap_mi_steering") == 0) {
+            val = atoi(mConfigParams[index]);
+            if ((val >= 0) && (val <= 1)) {
+                ContentDAPMISteering.mi_enable = val;
+                ALOGI("-dap_mi_steering: %d", val);
+            }
+        } else if (strcmp(opt, "dap_surround_virtualizer") == 0) {
+            int param[2];
+            if (sscanf(mConfigParams[index], "%d,%d",
+                &param[0], &param[1]) == 2) {
+                if ((param[0] >= 0) && (param[0] <= 2))
+                    DeviceDAPSurroundVirtualizer.virtualizer_enable = param[0];
+                if ((param[1] >= 0) && (param[1] <= 96))
+                    DeviceDAPSurroundVirtualizer.surround_boost = param[1];
+                ALOGI("-dap_surround_virtualizer: %d %d", param[0], param[1]);
+            }
+        }
+eq_error:
+        index++;
+        opt = NULL;
+    }
+
+    ALOGD("-%s()", __FUNCTION__);
+    return mConfigParams;
+}
 
+#if 0
 char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams_lite(int *argc)
 {
     ALOGD("+%s()", __FUNCTION__);
@@ -1460,6 +1810,7 @@ char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams_lite(int *argc)
     ALOGD("-%s()", __FUNCTION__);
     return mConfigParams;
 }
+#endif
 
 char **DolbyMS12ConfigParams::PrepareConfigParams(int max_raw_size, int max_column_size)
 {
diff --git a/libms12v2/src/aml_audio_ms12.c b/libms12v2/src/aml_audio_ms12.c
index 49a7dc8..326f9d1 100644
--- a/libms12v2/src/aml_audio_ms12.c
+++ b/libms12v2/src/aml_audio_ms12.c
@@ -135,7 +135,7 @@ int aml_ms12_lib_release() {
 int aml_ms12_cleanup(struct dolby_ms12_desc *ms12_desc)
 {
     dolby_ms12_status_self_cleanup();
-    dolby_ms12_config_params_self_cleanup();
+    //dolby_ms12_config_params_self_cleanup();
     dolby_ms12_release(ms12_desc->dolby_ms12_ptr);
     //dolby_ms12_self_cleanup();
 #ifdef REPLACE_OUTPUT_BUFFER_WITH_CALLBACK
@@ -151,10 +151,15 @@ int aml_ms12_cleanup(struct dolby_ms12_desc *ms12_desc)
     return 0;
 }
 
-int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc)
+int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc, char *cmd)
 {
     ALOGI("+%s()\n", __FUNCTION__);
     int ret = -1;
+
+    if (!ms12_desc->dolby_ms12_init_argv) {
+        ms12_desc->dolby_ms12_init_argv = dolby_ms12_config_params_get_config_params(&ms12_desc->dolby_ms12_init_argc);
+    }
+
     if (ms12_desc->dolby_ms12_init_argv) {
         dolby_ms12_config_params_reset_config_params();
         if (get_audio_system_format() == AUDIO_FORMAT_PCM_16_BIT) {
@@ -163,7 +168,7 @@ int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc)
         if ((get_audio_associate_format() == AUDIO_FORMAT_AC3) || (get_audio_associate_format() == AUDIO_FORMAT_E_AC3)) {
             dolby_ms12_config_params_set_associate_flag(true);
         }
-        ms12_desc->dolby_ms12_init_argv = dolby_ms12_config_params_get_runtime_config_params(&ms12_desc->dolby_ms12_init_argc);
+        ms12_desc->dolby_ms12_init_argv = dolby_ms12_config_params_update_runtime_config_params(&ms12_desc->dolby_ms12_init_argc, cmd);
         if (ms12_desc->dolby_ms12_ptr) {
             ret = dolby_ms12_update_runtime_params(ms12_desc->dolby_ms12_ptr, ms12_desc->dolby_ms12_init_argc, ms12_desc->dolby_ms12_init_argv);
         }
@@ -172,6 +177,18 @@ int aml_ms12_update_runtime_params(struct dolby_ms12_desc *ms12_desc)
     return ret;
 }
 
+int aml_ms12_update_runtime_params_direct(struct dolby_ms12_desc *ms12_desc, int argc, char **argv)
+{
+    ALOGI("+%s()\n", __FUNCTION__);
+    int ret = -1;
+    if (ms12_desc->dolby_ms12_ptr) {
+        ret = dolby_ms12_update_runtime_params(ms12_desc->dolby_ms12_ptr, argc, argv);
+    }
+    ALOGI("-%s() ret %d\n", __FUNCTION__, ret);
+    return ret;
+}
+
+#if 0
 int aml_ms12_update_runtime_params_lite(struct dolby_ms12_desc *ms12_desc)
 {
     ALOGI("+%s()\n", __FUNCTION__);
@@ -189,4 +206,5 @@ int aml_ms12_update_runtime_params_lite(struct dolby_ms12_desc *ms12_desc)
     ALOGI("-%s() ret %d\n", __FUNCTION__, ret);
     return ret;
 }
+#endif
 
diff --git a/libms12v2/src/dolby_ms12_config_params.cpp b/libms12v2/src/dolby_ms12_config_params.cpp
index 430d4d4..c785761 100644
--- a/libms12v2/src/dolby_ms12_config_params.cpp
+++ b/libms12v2/src/dolby_ms12_config_params.cpp
@@ -51,6 +51,7 @@ static android::DolbyMS12ConfigParams* getInstance()
     }
 }
 
+#if 0
 extern "C" void dolby_ms12_config_params_self_cleanup(void)
 {
     ALOGV("%s()\n", __FUNCTION__);
@@ -65,6 +66,7 @@ extern "C" void dolby_ms12_config_params_self_cleanup(void)
     }
     ALOGV("-%s() gInstance %p\n", __FUNCTION__, gInstance);
 }
+#endif
 
 extern "C" void dolby_ms12_config_params_set_associate_flag(bool flag)
 {
@@ -160,6 +162,7 @@ extern "C" int dolby_ms12_config_params_set_functional_switches(char **ConfigPar
     }
 }
 
+#if 0
 extern "C" int dolby_ms12_config_params_set_ddplus_switches(char **ConfigParams, int *row_index)
 {
     android::DolbyMS12ConfigParams *config_param = getInstance();
@@ -169,6 +172,17 @@ extern "C" int dolby_ms12_config_params_set_ddplus_switches(char **ConfigParams,
         return -1;
     }
 }
+#endif
+
+extern "C" int dolby_ms12_config_params_set_ac4_switches(char **ConfigParams, int *row_index)
+{
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        return config_param->SetAc4Switches(ConfigParams, row_index);
+    } else {
+        return -1;
+    }
+}
 
 extern "C" int dolby_ms12_config_params_set_pcm_switches(char **ConfigParams, int *row_index)
 {
@@ -194,7 +208,7 @@ extern "C" int dolby_ms12_config_params_set_dap_device_switches(char **ConfigPar
 {
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->SetDAPDeviceSwitches(ConfigParams, row_index);
+        return config_param->SetDAPDeviceSwitches(ConfigParams, row_index, 0);
     } else {
         return -1;
     }
@@ -223,6 +237,7 @@ extern "C" char **dolby_ms12_config_params_get_config_params(int *argc)
     }
 }
 
+#if 0
 extern "C" char **dolby_ms12_config_params_get_runtime_config_params(int *argc)
 {
     ALOGV("%s()\n", __FUNCTION__);
@@ -233,7 +248,20 @@ extern "C" char **dolby_ms12_config_params_get_runtime_config_params(int *argc)
         return NULL;
     }
 }
+#endif
+
+extern "C" char **dolby_ms12_config_params_update_runtime_config_params(int *argc, char *cmd)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        return config_param->UpdateDolbyMS12RuntimeConfigParams(argc, cmd);
+    } else {
+        return NULL;
+    }
+}
 
+#if 0
 extern "C" char **dolby_ms12_config_params_get_runtime_config_params_lite(int *argc)
 {
     ALOGV("%s()\n", __FUNCTION__);
@@ -244,7 +272,7 @@ extern "C" char **dolby_ms12_config_params_get_runtime_config_params_lite(int *a
         return NULL;
     }
 }
-
+#endif
 
 extern "C" char **dolby_ms12_config_params_prepare_config_params(int max_raw_size, int max_column_size)
 {
@@ -338,16 +366,16 @@ extern "C" void dolby_ms12_set_drc_boost_system(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDRCboostSystemVal(val);
+        config_param->setDRCboostStereoVal(val);
     }
 }
 
-extern "C" void dolby_ms12_set_drc_cut_system(int val)
+extern "C" void dolby_ms12_set_drc_cut_stereo(int val)
 {
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDRCcutSystemVal(val);
+        config_param->setDRCcutStereoVal(val);
     }
 }
 
@@ -356,7 +384,7 @@ extern "C" void dolby_ms12_set_channel_config_of_app_sound_input(audio_channel_m
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setChannelConfigOfAppSoundsInput(channel_mask);
+        config_param->setChannelConfigOfAppSoundsInput(channel_mask);
     }
 }
 
@@ -365,7 +393,7 @@ extern "C" void dolby_ms12_set_channel_config_of_system_sound_input(audio_channe
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setChannelConfigOfSystemSoundsInput(channel_mask);
+        config_param->setChannelConfigOfSystemSoundsInput(channel_mask);
     }
 }
 
@@ -374,7 +402,7 @@ extern "C" void dolby_ms12_set_dap2_initialisation_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPV2InitialisationMode(val);
+        config_param->setDAPV2InitialisationMode(val);
     }
 }
 
@@ -383,7 +411,7 @@ extern "C" void dolby_ms12_set_dap2_virtual_bass_enable(bool flag)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPV2VirtualBassEnable(flag);
+        config_param->setDAPV2VirtualBassEnable(flag);
     }
 }
 
@@ -392,7 +420,7 @@ extern "C" void dolby_ms12_set_drc_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDRCMode(val);
+        config_param->setDRCMode(val);
     }
 }
 
@@ -401,7 +429,7 @@ extern "C" void dolby_ms12_set_dap_drc_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPDRCMode(val);
+        config_param->setDAPDRCMode(val);
     }
 }
 
@@ -410,7 +438,7 @@ extern "C" void dolby_ms12_set_downmix_modes(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDownmixModes(val);
+        config_param->setDownmixModes(val);
     }
 }
 
@@ -419,7 +447,7 @@ extern "C" void dolby_ms12_set_evalution_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setEvalutionMode(val);
+        config_param->setEvalutionMode(val);
     }
 }
 
@@ -428,7 +456,7 @@ extern "C" void dolby_ms12_set_lfe_present_in_app_sounds_in(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setLFEpresentInAPPSoundsIn(val);
+        config_param->setLFEpresentInAPPSoundsIn(val);
     }
 }
 
@@ -437,7 +465,7 @@ extern "C" void dolby_ms12_set_lfe_present_in_system_sounds_in(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setLFEpresetInSystemSoundsIn(val);
+        config_param->setLFEpresetInSystemSoundsIn(val);
     }
 }
 
@@ -446,7 +474,7 @@ extern "C" void dolby_ms12_set_donwmix_51_pcm_to_51_on_multi_outputs(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDownmix71PCMto51OnMultiOutputs(val);
+        config_param->setDownmix71PCMto51OnMultiOutputs(val);
     }
 }
 
@@ -455,7 +483,7 @@ extern "C" void dolby_ms12_set_encoder_channel_mode_locking_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setEncoderChannelModeLockingMode(val);
+        config_param->setEncoderChannelModeLockingMode(val);
     }
 }
 
@@ -464,7 +492,7 @@ extern "C" void dolby_ms12_set_risc_precision_flag(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setRISCprecisionFlag(val);
+        config_param->setRISCprecisionFlag(val);
     }
 }
 
@@ -473,7 +501,7 @@ extern "C" void dolby_ms12_set_dual_mono_reproduction_mode(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDualmonoReproductionMode(val);
+        config_param->setDualmonoReproductionMode(val);
     }
 }
 
@@ -482,7 +510,7 @@ extern "C" void dolby_ms12_set_asscociated_audio_mixing(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setAssociatedAudioMixing(val);
+        config_param->setAssociatedAudioMixing(val);
     }
 }
 
@@ -491,7 +519,7 @@ extern "C" void dolby_ms12_set_system_app_audio_mixing(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setSystemAppAudioMixing(val);
+        config_param->setSystemAppAudioMixing(val);
     }
 }
 
@@ -511,7 +539,7 @@ extern "C" void dolby_ms12_set_user_control_value_for_mixing_main_and_associated
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setUserControlValuesForMixingMainAndAssociatedAudio(val);
+        config_param->setUserControlValuesForMixingMainAndAssociatedAudio(val);
     }
 }
 
@@ -520,7 +548,7 @@ extern "C" void dolby_ms12_set_input_mixer_gain_values_for_main_program_input(Mi
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setInputMixerGainValuesForMainProgramInput(mixergain);
+        config_param->setInputMixerGainValuesForMainProgramInput(mixergain);
     }
 }
 
@@ -529,7 +557,7 @@ extern "C" void dolby_ms12_set_input_mixer_gain_values_for_2nd_main_program_inpu
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setInputMixerGainValuesFor2ndMainProgramInput(mixergain);
+        config_param->setInputMixerGainValuesFor2ndMainProgramInput(mixergain);
     }
 }
 
@@ -538,7 +566,7 @@ extern "C" void dolby_ms12_set_system_sound_mixer_gain_values_for_primary_input(
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setSystemSoundMixerGainValuesForPrimaryInput(mixergain);
+        config_param->setSystemSoundMixerGainValuesForPrimaryInput(mixergain);
     }
 }
 
@@ -547,7 +575,7 @@ extern "C" void dolby_ms12_set_system_sound_mixer_gain_values_for_app_sounds_inp
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setSystemSoundMixerGainValuesForAppSoundsInput(mixergain);
+        config_param->setSystemSoundMixerGainValuesForAppSoundsInput(mixergain);
     }
 }
 
@@ -556,46 +584,101 @@ extern "C" void dolby_ms12_set_system_sound_mixer_gain_values_for_system_sounds_
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setSystemSoundMixerGainValuesForSystemSoundsInput(mixergain);
+        config_param->setSystemSoundMixerGainValuesForSystemSoundsInput(mixergain);
     }
 }
 
 //DDPLUS SWITCHES
-extern "C" void dolby_ms12_set_ddp_associated_substream_selection(int val)
+
+//PCM SWITCHES
+extern "C" void dolby_ms12_set_channel_config_of_external_pcm_input(audio_channel_mask_t channel_mask)
 {
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDDPAssociatedSubstreamSelection(val);
+        config_param->setChnanelConfOfExternalPCMInput(channel_mask);
     }
 }
 
+extern "C" void dolby_ms12_set_lfe_present_in_external_pcm_input(int val)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setLFEpresentInExternalPCMInput(val);
+    }
+}
 
-//PCM SWITCHES
-extern "C" void dolby_ms12_set_channel_config_of_external_pcm_input(audio_channel_mask_t channel_mask)
+extern "C" void dolby_ms12_set_pcm_compressor_profile(int val)
 {
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setChnanelConfOfExternalPCMInput(channel_mask);
+        config_param->setPCMCompressorProfile(val);
     }
 }
 
-extern "C" void dolby_ms12_set_lfe_present_in_external_pcm_input(int val)
+//AC4 SWITCHES
+extern "C" void dolby_ms12_set_ac4_lang(char *str)
 {
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setLFEpresentInExternalPCMInput(val);
+        config_param->setAC4Lang(str);
     }
 }
 
-extern "C" void dolby_ms12_set_pcm_compressor_profile(int val)
+extern "C" void dolby_ms12_set_ac4_lang2(char *str)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setAC4Lang2(str);
+    }
+}
+
+extern "C" void dolby_ms12_set_ac4_ac(int val)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setAC4Ac(val);
+    }
+}
+
+extern "C" void dolby_ms12_set_ac4_pat(int val)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setAC4Pat(val);
+    }
+}
+
+extern "C" void dolby_ms12_set_ac4_presgroupidx(int val)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setAC4PresGroupIdx(val);
+    }
+}
+
+extern "C" void dolby_ms12_set_ac4_de(int val)
+{
+    ALOGV("%s()\n", __FUNCTION__);
+    android::DolbyMS12ConfigParams *config_param = getInstance();
+    if (config_param) {
+        config_param->setAC4De(val);
+    }
+}
+
+extern "C" void dolby_ms12_set_ac4_shortprogid(int val)
 {
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setPCMCompressorProfile(val);
+        config_param->setAC4ShortProgId(val);
     }
 }
 
@@ -605,7 +688,7 @@ extern "C" void dolby_ms12_set_heaac_associated_instance_restricted_to_2channels
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setHEAACAsocciatedInstanceRestrictedTo2Channels(val);
+        config_param->setHEAACAsocciatedInstanceRestrictedTo2Channels(val);
     }
 }
 
@@ -614,7 +697,7 @@ extern "C" void dolby_ms12_set_heaac_default_dialnorm_value(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setHEAACDefaultDialnormValue(val);
+        config_param->setHEAACDefaultDialnormValue(val);
     }
 }
 
@@ -642,7 +725,7 @@ extern "C" void dolby_ms12_set_dap_gains(int val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPGains(val);
+        config_param->setDAPGains(val);
     }
 }
 
@@ -651,7 +734,7 @@ extern "C" void dolby_ms12_set_dap_surround_decoder_enable(bool val)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPSurroundDecoderEnable(val);
+        config_param->setDAPSurroundDecoderEnable(val);
     }
 }
 
@@ -661,7 +744,7 @@ extern "C" void dolby_ms12_set_dap_surround_virtuallizer(DAPSurroundVirtualizer
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPSurroundVirtualizer(dapVirtualizerParamters);
+        config_param->setDAPSurroundVirtualizer(dapVirtualizerParamters);
     }
 }
 
@@ -671,7 +754,7 @@ extern "C" void dolby_ms12_set_dap_graphic_eq(DAPGraphicEQ *dapGraphicEQParamter
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPGraphicEQ(dapGraphicEQParamters);
+        config_param->setDAPGraphicEQ(dapGraphicEQParamters);
     }
 }
 
@@ -680,7 +763,7 @@ extern "C" void dolby_ms12_set_dap_bass_enhancer(DAPBassEnhancer *dapBassEnhance
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPBassEnhancer(dapBassEnhancerParameters);
+        config_param->setDAPBassEnhancer(dapBassEnhancerParameters);
     }
 }
 
@@ -689,7 +772,7 @@ extern "C" void dolby_ms12_set_dap_virtual_bass(DAPVirtualBass *dapVirtualBassPa
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPVirtualBass(dapVirtualBassParamters);
+        config_param->setDAPVirtualBass(dapVirtualBassParamters);
     }
 }
 
@@ -700,7 +783,7 @@ extern "C" void dolby_ms12_set_dap_mi_streering(DAPMISteering *dapMiSteeringPara
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPMIStreering(dapMiSteeringParamters);
+        config_param->setDAPMIStreering(dapMiSteeringParamters);
     }
 }
 
@@ -709,7 +792,7 @@ extern "C" void dolby_ms12_set_dap_leveler(DAPLeveler *dapLevelerParameters)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPLeveler(dapLevelerParameters);
+        config_param->setDAPLeveler(dapLevelerParameters);
     }
 }
 
@@ -718,7 +801,7 @@ extern "C" void dolby_ms12_set_dap_ieq(DAPIEQ *dapIEQParameters)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPIEQ(dapIEQParameters);
+        config_param->setDAPIEQ(dapIEQParameters);
     }
 }
 
@@ -727,7 +810,7 @@ extern "C" void dolby_ms12_set_dap_dialogue_enhancer(DAPDialogueEnhancer *dapDia
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDAPDialogueEnhancer(dapDialogueEnhancerParamters);
+        config_param->setDAPDialogueEnhancer(dapDialogueEnhancerParamters);
     }
 }
 
@@ -736,7 +819,7 @@ extern "C" void dolby_ms12_set_dual_output_flag(bool need_dual_output)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDualOutputFlag(need_dual_output);
+        config_param->setDualOutputFlag(need_dual_output);
     }
 }
 
@@ -745,7 +828,7 @@ extern "C" void set_dolby_ms12_continuous_mode(bool flag)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setActiveOTTSignalFlag(flag);
+        config_param->setActiveOTTSignalFlag(flag);
     }
 }
 
@@ -765,7 +848,7 @@ extern "C" void dolby_ms12_set_input_mixer_gain_values_for_ott_sounds_input(MixG
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setInputMixerGainValuesForOTTSoundsInput(mixergain);
+        config_param->setInputMixerGainValuesForOTTSoundsInput(mixergain);
     }
 }
 
@@ -774,7 +857,7 @@ extern "C" void dolby_ms12_set_atmos_lock_flag(bool flag)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setAtmosLockFlag(flag);
+        config_param->setAtmosLockFlag(flag);
     }
 }
 
@@ -795,7 +878,7 @@ extern "C" void dolby_ms12_set_pause_flag(bool flag)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setPauseFlag(flag);
+        config_param->setPauseFlag(flag);
     }
 }
 
@@ -804,7 +887,7 @@ extern "C" void dolby_ms12_set_dolby_main1_as_dummy_file(bool is_dummy)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDolbyMain1FileNameAsDummy(is_dummy);
+        config_param->setDolbyMain1FileNameAsDummy(is_dummy);
     }
 }
 
@@ -813,7 +896,7 @@ extern "C" void dolby_ms12_set_dolby_main2_as_dummy_file(bool is_dummy)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setDolbyMain2NameAsDummy(is_dummy);
+        config_param->setDolbyMain2NameAsDummy(is_dummy);
     }
 }
 
@@ -834,7 +917,7 @@ extern "C" void dolby_ms12_set_ott_sound_input_enable(bool flag)
     ALOGV("%s()\n", __FUNCTION__);
     android::DolbyMS12ConfigParams *config_param = getInstance();
     if (config_param) {
-        return config_param->setOTTSoundInputEnable(flag);
+        config_param->setOTTSoundInputEnable(flag);
     }
 }
 
-- 
2.24.1

