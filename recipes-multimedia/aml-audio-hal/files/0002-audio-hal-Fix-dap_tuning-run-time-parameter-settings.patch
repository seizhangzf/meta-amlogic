From 57f5fc00c555fd34e55b157f376e8e3034caf198 Mon Sep 17 00:00:00 2001
From: Tim Yao <tim.yao@amlogic.com>
Date: Mon, 17 Feb 2020 21:50:14 -0800
Subject: [PATCH 2/5] audio-hal: Fix dap_tuning run time parameter settings
 [1/1]

PD#SWPL-17555

[Problem]
The MS12 tuning file is not a runtime setting and there are
errors for the dap_tuning option for run time parameter settings
for HDMI input.

[Solution]
Change run time settings and remove dap_tuning file from run_time
settings.

[Test]
Local

Change-Id: I5deb9c36c87d6d65bfc8a1367ca9dd6b607bc8c7
---
 libms12/include/DolbyMS12ConfigParams.h |  2 +-
 libms12/src/DolbyMS12ConfigParams.cpp   | 63 ++++++++++++++++++++++---
 2 files changed, 57 insertions(+), 8 deletions(-)

diff --git a/libms12/include/DolbyMS12ConfigParams.h b/libms12/include/DolbyMS12ConfigParams.h
index 736957b..d600afb 100644
--- a/libms12/include/DolbyMS12ConfigParams.h
+++ b/libms12/include/DolbyMS12ConfigParams.h
@@ -64,7 +64,7 @@ public:
     virtual int SetPCMSwitchesRuntime(char **ConfigParams, int *row_index);
 
     virtual int SetHEAACSwitches(char **ConfigParams, int *row_index);
-    virtual int SetDAPDeviceSwitches(char **ConfigParams, int *row_index);
+    virtual int SetDAPDeviceSwitches(char **ConfigParams, int *row_index, int is_runtime);
     virtual int SetDAPContentSwitches(char **ConfigParams, int *row_index);
     virtual char **GetDolbyMS12ConfigParams(int *argc);
     virtual char **GetDolbyMS12RuntimeConfigParams(int *argc);
diff --git a/libms12/src/DolbyMS12ConfigParams.cpp b/libms12/src/DolbyMS12ConfigParams.cpp
index 46b9f54..b809228 100644
--- a/libms12/src/DolbyMS12ConfigParams.cpp
+++ b/libms12/src/DolbyMS12ConfigParams.cpp
@@ -55,6 +55,9 @@ namespace android
 #define DEFAULT_MAIN_DDP_FILE_NAME "/data/main.ac3"
 #define DEFAULT_ASSOCIATE_DDP_FILE_NAME "/data/associate.ac3"
 
+//@@@MAT input file
+#define DEFAULT_MAIN_MAT_FILE_NAME "/data/main.mat"
+
 #define DEFAULT_OUTPUT_PCM_MULTI_FILE_NAME "/data/outputmulti.wav"
 #define DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME "/data/outputdownmix.wav"
 #define DEFAULT_OUTPUT_DD_FILE_NAME "/data/output.ac3"
@@ -249,6 +252,12 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
                 mMainFlags = true;
                 mAppSoundFlags = false;
                 mSystemSoundFlags = false;
+            } else if (mAudioStreamOutFormat == AUDIO_FORMAT_MAT) {
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_MAT_FILE_NAME);
+                (*row_index)++;
+                mMainFlags = true;
+                mAppSoundFlags = false;
+                mSystemSoundFlags = false;
             } else if ((mAudioStreamOutFormat == AUDIO_FORMAT_AAC) || (mAudioStreamOutFormat == AUDIO_FORMAT_HE_AAC_V1)) {
                 //fixme, which he-aac format is allowed to this flow.
                 sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_HEAAC_V1_FILE_NAME);
@@ -283,6 +292,14 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
                 sprintf(ConfigParams[*row_index], "%s", DEFAULT_ASSOCIATE_DDP_FILE_NAME);
                 (*row_index)++;
 
+                mMainFlags = true;
+                mAppSoundFlags = false;
+                mSystemSoundFlags = false;
+            } else if (mAudioStreamOutFormat == AUDIO_FORMAT_MAT) {
+                sprintf(ConfigParams[*row_index], "%s", "-im");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_MAIN_MAT_FILE_NAME);
+                (*row_index)++;
                 mMainFlags = true;
                 mAppSoundFlags = false;
                 mSystemSoundFlags = false;
@@ -355,16 +372,41 @@ int DolbyMS12ConfigParams::SetInputOutputFileName(char **ConfigParams, int *row_
         sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DD_FILE_NAME);
         (*row_index)++;
         if (mDualOutputFlag == true) {
-            sprintf(ConfigParams[*row_index], "%s", "-oms");
-            (*row_index)++;
-            sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
-            (*row_index)++;
+            if (mDAPInitMode != 0) {
+                sprintf(ConfigParams[*row_index], "%s", "-o_dap_speaker");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DAP_FILE_NAME);
+                (*row_index)++;
+            } else {
+                sprintf(ConfigParams[*row_index], "%s", "-oms");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
+                (*row_index)++;
+            }
         }
     } else if (mDolbyMS12OutFormat == AUDIO_FORMAT_E_AC3) {
         sprintf(ConfigParams[*row_index], "%s", "-odp");
         (*row_index)++;
         sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DDP_FILE_NAME);
         (*row_index)++;
+        if (mDualOutputFlag == true) {
+            if (mDAPInitMode != 0) {
+                sprintf(ConfigParams[*row_index], "%s", "-o_dap_speaker");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_DAP_FILE_NAME);
+                (*row_index)++;
+            } else {
+                sprintf(ConfigParams[*row_index], "%s", "-oms");
+                (*row_index)++;
+                sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_PCM_DOWNMIX_FILE_NAME);
+                (*row_index)++;
+            }
+        }
+    } else if (mDolbyMS12OutFormat == AUDIO_FORMAT_MAT) {
+        sprintf(ConfigParams[*row_index], "%s", "-omat");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%s", DEFAULT_OUTPUT_MAT_FILE_NAME);
+        (*row_index)++;
     } else if ((mDolbyMS12OutFormat == AUDIO_FORMAT_PCM_16_BIT) && (mStereoOutputFlag == false) && (mDAPInitMode != 0)) { //pcm multi
         sprintf(ConfigParams[*row_index], "%s", "-om");
         (*row_index)++;
@@ -1138,10 +1180,17 @@ int DolbyMS12ConfigParams::SetOTTProcessingGraphSwitchesRuntime(char **ConfigPar
 
 //DAP SWITCHES (device specific)
 //all run-time
-int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_index)
+int DolbyMS12ConfigParams::SetDAPDeviceSwitches(char **ConfigParams, int *row_index, int is_runtime)
 {
     String8 tmpParam("");
     ALOGV("+%s() line %d\n", __FUNCTION__, __LINE__);
+    if (mDAPTuningFile && !is_runtime) {
+        sprintf(ConfigParams[*row_index], "%s", "-dap_tuning");
+        (*row_index)++;
+        sprintf(ConfigParams[*row_index], "%d", mDAPTuningFile);
+        (*row_index)++;
+    }
+
     if ((mDAPCalibrationBoost >= 0) && (mDAPCalibrationBoost <= 192)) {
         sprintf(ConfigParams[*row_index], "%s", "-dap_calibration_boost");
         (*row_index)++;
@@ -1339,7 +1388,7 @@ char **DolbyMS12ConfigParams::GetDolbyMS12ConfigParams(int *argc)
         SetHEAACSwitches(mConfigParams, &mParamNum);
         SetOTTProcessingGraphSwitches(mConfigParams, &mParamNum);
         if (mDAPInitMode) {
-            SetDAPDeviceSwitches(mConfigParams, &mParamNum);
+            SetDAPDeviceSwitches(mConfigParams, &mParamNum, 0);
             SetDAPContentSwitches(mConfigParams, &mParamNum);
         }
         *argc = mParamNum;
@@ -1371,7 +1420,7 @@ char **DolbyMS12ConfigParams::GetDolbyMS12RuntimeConfigParams(int *argc)
         SetPCMSwitchesRuntime(mConfigParams, &mParamNum);
         SetOTTProcessingGraphSwitchesRuntime(mConfigParams, &mParamNum);
         if (mDAPInitMode) {
-            SetDAPDeviceSwitches(mConfigParams, &mParamNum);
+            SetDAPDeviceSwitches(mConfigParams, &mParamNum, 1);
             SetDAPContentSwitches(mConfigParams, &mParamNum);
         }
         *argc = mParamNum;
-- 
2.24.1

