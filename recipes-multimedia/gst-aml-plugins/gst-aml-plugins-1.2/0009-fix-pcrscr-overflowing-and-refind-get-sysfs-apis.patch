Index: gst-aml-plugins-1.2/clock/gstamlclock.c
===================================================================
--- gst-aml-plugins-1.2.orig/clock/gstamlclock.c	2019-03-25 15:15:10.734839154 +0800
+++ gst-aml-plugins-1.2/clock/gstamlclock.c	2019-03-25 15:22:53.962847844 +0800
@@ -177,11 +177,11 @@
     switch (aclock->source) {
     case GST_AML_CLOCK_AUDIO:
 //        result = GST_ELEMENT_CLASS (parent_class)->get_internal_time(clock);
-        result = get_sysfs_int("/sys/class/tsync/pts_pcrscr");
+        result = gst_aml_get_sysfs_int32("/sys/class/tsync/pts_pcrscr", 16);
         break;
     case GST_AML_CLOCK_VIDEO:
 //        result = GST_ELEMENT_CLASS (parent_class)->get_internal_time(clock);
-        result = get_sysfs_int("/sys/class/tsync/pts_pcrscr");
+        result = gst_aml_get_sysfs_int32("/sys/class/tsync/pts_pcrscr", 16);
         break;
     case GST_AML_CLOCK_PCRSCR:
 //        result = GST_ELEMENT_CLASS (parent_class)->get_internal_time(clock);
@@ -280,12 +280,12 @@
     unsigned long pcrscr, pts = 0;
     GstClockTime pcrscr_gst_clk;
 
-    int slowsync_enable = get_sysfs_int("/sys/class/tsync/slowsync_enable");
+    int slowsync_enable = gst_aml_get_sysfs_int32("/sys/class/tsync/slowsync_enable", 16);
     unsigned long tsync_video_started = 0;
     // If slowsync_enable is 1, we have to wait until video is started;
     // otherwise, we might get unstable pts.
     if (slowsync_enable) {
-        tsync_video_started = get_sysfs_int("/sys/class/tsync/tsync_video_started");
+        tsync_video_started = gst_aml_get_sysfs_int32("/sys/class/tsync/tsync_video_started", 16);
         if (!tsync_video_started) {
             GST_DEBUG_OBJECT(aclock, "slowsync_enable is 1 but tsync_video_started is 0, pcrscr is not stable");
             goto exit;
@@ -293,7 +293,7 @@
     }
 
     pts = aclock->last_pts;
-    pcrscr = get_sysfs_int("/sys/class/tsync/pts_pcrscr");
+    pcrscr = gst_aml_get_sysfs_uint32("/sys/class/tsync/pts_pcrscr", 16);
 
     pcrscr_gst_clk = (GstClockTime)pcrscr * 100000LL / 9LL;
     GST_OBJECT_LOCK(aclock);
Index: gst-aml-plugins-1.2/common/amlsysctl/gstamlsysctl.c
===================================================================
--- gst-aml-plugins-1.2.orig/common/amlsysctl/gstamlsysctl.c	2019-03-25 15:15:09.030839122 +0800
+++ gst-aml-plugins-1.2/common/amlsysctl/gstamlsysctl.c	2019-03-25 15:21:46.458846578 +0800
@@ -51,15 +51,29 @@
     }
     return -1;
 }
-int get_sysfs_int(const char *path)
+int32_t gst_aml_get_sysfs_int32(const char *path, const int32_t base)
 {
-    int fd;
-    int val = 0;
+    int32_t fd;
+    int32_t val = 0;
     char  bcmd[16];
     fd = open(path, O_RDONLY);
     if (fd >= 0) {
         read(fd, bcmd, sizeof(bcmd));
-        val = strtol(bcmd, NULL, 16);
+        val = strtol(bcmd, NULL, base);
+        close(fd);
+    }
+    return val;
+}
+
+uint32_t gst_aml_get_sysfs_uint32(const char *path, const int32_t base)
+{
+    int32_t fd;
+    uint32_t val = 0;
+    char bcmd[16];
+    fd = open(path, O_RDONLY);
+    if (fd >= 0) {
+        read(fd, bcmd, sizeof(bcmd));
+        val = strtoul(bcmd, NULL, base);
         close(fd);
     }
     return val;
@@ -73,7 +87,7 @@
 
 int get_black_policy()
 {
-    return get_sysfs_int("/sys/class/video/blackout_policy") & 1;
+    return gst_aml_get_sysfs_int32("/sys/class/video/blackout_policy", 16) & 1;
 }
 
 int set_trick_duration(int durcnt)
@@ -83,7 +97,7 @@
 
 int get_trick_duration()
 {
-    return get_sysfs_int("/sys/class/video/trickmode_duration");
+    return gst_aml_get_sysfs_int32("/sys/class/video/trickmode_duration", 16);
 }
 
 int set_tsync_enable(int enable)
Index: gst-aml-plugins-1.2/common/amlsysctl/gstamlsysctl.h
===================================================================
--- gst-aml-plugins-1.2.orig/common/amlsysctl/gstamlsysctl.h	2019-03-25 15:15:09.030839122 +0800
+++ gst-aml-plugins-1.2/common/amlsysctl/gstamlsysctl.h	2019-03-25 15:22:03.786846903 +0800
@@ -1,6 +1,7 @@
 #ifndef _GST_AML_VIDEOCTL_H_
 #define  _GST_AML_VIDEOCTL_H_
 #include <gst/gst.h>
+#include <stdint.h>
 
 G_BEGIN_DECLS
 typedef enum{
@@ -16,7 +17,8 @@
 int set_sysfs_str(const char *path, const char *val);
 int get_sysfs_str(const char *path, char *valstr, int size);
 int set_sysfs_int(const char *path, int val);
-int get_sysfs_int(const char *path);
+int32_t gst_aml_get_sysfs_int32(const char *path, const int32_t base);
+uint32_t gst_aml_get_sysfs_uint32(const char *path, const int32_t base);
 int set_black_policy(int blackout);
 int set_ppscaler_enable(char *enable);
 int get_black_policy();
