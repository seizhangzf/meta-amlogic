From 0f597abfc7ab3e3519692e5541640f76aa8b6314 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 18 Apr 2014 00:40:55 +0000
Subject: [PATCH 1/8] Add QT 5.1.1

master branch upstream has dropped QT 5.1 so lets readd those
recipes to live along QT 5.2

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 recipes-qt/qt5/qt5-5.1.1.inc                       |  19 ++
 recipes-qt/qt5/qtbase-5.1.1.inc                    | 249 +++++++++++++++++
 .../0001-Add-linux-oe-g-platform.patch             | 304 +++++++++++++++++++++
 .../qt5/qtbase-5.1.1/0001-Always-build-uic.patch   |  40 +++
 ...o-allow-to-set-qt.conf-from-the-outside-u.patch |  36 +++
 .../0003-Add-external-hostbindir-option.patch      | 219 +++++++++++++++
 ...p-Prefix-default-LIBDIRS-and-INCDIRS-with.patch |  27 ++
 ..._functions-temporary-remove-isEmpty-check.patch |  51 ++++
 ...5-qmake-is-already-built-in-qtbase-native.patch |  30 ++
 .../0005-qt_module-Fix-pkgconfig-replacement.patch |  89 ++++++
 ...-building-a-separate-qmake-for-the-target.patch |  29 ++
 ...p-Prefix-default-LIBDIRS-and-INCDIRS-with.patch |  29 ++
 .../0008-qt_module-Fix-pkgconfig-replacement.patch |  70 +++++
 .../0009-qt_module-Fix-paths-in-.prl-files.patch   |  62 +++++
 .../qt5/qtbase-5.1.1/0010-Always-build-uic.patch   |  28 ++
 ...0010-wayland-scanner-disable-silent-rules.patch |  82 ++++++
 ...-building-a-separate-qmake-for-the-target.patch |  26 ++
 ...on-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch |  44 +++
 ....prf-Allow-to-add-extra-arguments-to-make.patch |  37 +++
 .../qtbase-5.1.1/0013-Disable-mkv8snapshot.patch   |  47 ++++
 ...gl-error-for-platforms-only-supporting-on.patch |  59 ++++
 ...tslib-device-to-be-read-from-env-variable.patch |  35 +++
 .../0015-qtbase-allow-build-of-examples.patch      |  48 ++++
 .../0018-QOpenGLPaintDevice-sub-area-support.patch | 154 +++++++++++
 .../0020-Use-BGRA-extension-in-bindTexture.patch   |  34 +++
 ...ure-make-pulseaudio-a-configurable-option.patch |  36 +++
 ...configure-make-alsa-a-configurable-option.patch |  35 +++
 ...igure-make-freetype-a-configurable-option.patch |  35 +++
 ...E_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch |  84 ++++++
 recipes-qt/qt5/qtbase-native-5.1.1.inc             | 110 ++++++++
 recipes-qt/qt5/qtbase-native_5.1.1.bb              |  11 +
 recipes-qt/qt5/qtbase_5.1.1.bb                     |   5 +
 .../0001-qmltestexample-fix-link.patch             |  46 ++++
 ...g-calculation-of-viewPort-for-transitions.patch |  41 +++
 recipes-qt/qt5/qtdeclarative_5.1.1.bb              |  16 ++
 recipes-qt/qt5/qtgraphicaleffects_5.1.1.bb         |   5 +
 recipes-qt/qt5/qtimageformats_5.1.1.bb             |   5 +
 ...-the-mkv8snapshot-tool-to-the-native-side.patch |  32 +++
 ...pro-respect-external-host-bindir-when-set.patch |  31 +++
 recipes-qt/qt5/qtjsbackend-native.inc              |  24 ++
 recipes-qt/qt5/qtjsbackend-native_5.1.1.bb         |   5 +
 recipes-qt/qt5/qtjsbackend.inc                     |  14 +
 recipes-qt/qt5/qtjsbackend_5.1.1.bb                |   5 +
 recipes-qt/qt5/qtlocation_5.1.1.bb                 |  10 +
 recipes-qt/qt5/qtmultimedia_5.1.1.bb               |   5 +
 recipes-qt/qt5/qtquick1_5.1.1.bb                   |   5 +
 recipes-qt/qt5/qtscript_5.1.1.bb                   |   5 +
 recipes-qt/qt5/qtsensors_5.1.1.bb                  |   5 +
 recipes-qt/qt5/qtsvg_5.1.1.bb                      |   6 +
 recipes-qt/qt5/qtwebkit-5.1.1.inc                  |  45 +++
 recipes-qt/qt5/qtwebkit-5.1.1/fix-rpath.patch      |  13 +
 recipes-qt/qt5/qtwebkit-examples_5.1.1.bb          |   5 +
 recipes-qt/qt5/qtwebkit_5.1.1.bb                   |   5 +
 recipes-qt/qt5/qtxmlpatterns_5.1.1.bb              |   5 +
 54 files changed, 2497 insertions(+)
 create mode 100644 recipes-qt/qt5/qt5-5.1.1.inc
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1.inc
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0001-Add-linux-oe-g-platform.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0001-Always-build-uic.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0003-Add-external-hostbindir-option.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0004-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0004-qt_functions-temporary-remove-isEmpty-check.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0005-qmake-is-already-built-in-qtbase-native.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0005-qt_module-Fix-pkgconfig-replacement.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0006-Allow-building-a-separate-qmake-for-the-target.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0008-qt_module-Fix-pkgconfig-replacement.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0009-qt_module-Fix-paths-in-.prl-files.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0010-Always-build-uic.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0010-wayland-scanner-disable-silent-rules.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0011-Allow-building-a-separate-qmake-for-the-target.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0013-Disable-mkv8snapshot.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0014-eglfs-fix-egl-error-for-platforms-only-supporting-on.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0014-enables-tslib-device-to-be-read-from-env-variable.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0015-qtbase-allow-build-of-examples.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0018-QOpenGLPaintDevice-sub-area-support.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0020-Use-BGRA-extension-in-bindTexture.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0021-configure-make-pulseaudio-a-configurable-option.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0022-configure-make-alsa-a-configurable-option.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0023-configure-make-freetype-a-configurable-option.patch
 create mode 100644 recipes-qt/qt5/qtbase-5.1.1/0024-Use-OE_QMAKE_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch
 create mode 100644 recipes-qt/qt5/qtbase-native-5.1.1.inc
 create mode 100644 recipes-qt/qt5/qtbase-native_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtbase_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtdeclarative-5.1.1/0001-qmltestexample-fix-link.patch
 create mode 100644 recipes-qt/qt5/qtdeclarative-5.1.1/0003-Fix-wrong-calculation-of-viewPort-for-transitions.patch
 create mode 100644 recipes-qt/qt5/qtdeclarative_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtgraphicaleffects_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtimageformats_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtjsbackend-5.1.1/0001-Install-the-mkv8snapshot-tool-to-the-native-side.patch
 create mode 100644 recipes-qt/qt5/qtjsbackend-5.1.1/0002-v8.pro-respect-external-host-bindir-when-set.patch
 create mode 100644 recipes-qt/qt5/qtjsbackend-native.inc
 create mode 100644 recipes-qt/qt5/qtjsbackend-native_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtjsbackend.inc
 create mode 100644 recipes-qt/qt5/qtjsbackend_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtlocation_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtmultimedia_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtquick1_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtscript_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtsensors_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtsvg_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtwebkit-5.1.1.inc
 create mode 100644 recipes-qt/qt5/qtwebkit-5.1.1/fix-rpath.patch
 create mode 100644 recipes-qt/qt5/qtwebkit-examples_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtwebkit_5.1.1.bb
 create mode 100644 recipes-qt/qt5/qtxmlpatterns_5.1.1.bb

diff --git a/recipes-qt/qt5/qt5-5.1.1.inc b/recipes-qt/qt5/qt5-5.1.1.inc
new file mode 100644
index 0000000..0de6539
--- /dev/null
+++ b/recipes-qt/qt5/qt5-5.1.1.inc
@@ -0,0 +1,19 @@
+# Copyright (C) 2012 O.S. Systems Software LTDA.
+# Copyright (C) 2013 Martin Jansa <martin.jansa@gmail.com>
+
+QT_VERSION ?= "${PV}"
+
+# it's different for RC versions
+QT_VERSION_DIR ?= "5.1"
+
+SRC_URI += " \
+    http://download.qt-project.org/official_releases/qt/${QT_VERSION_DIR}/${QT_VERSION}/submodules/${QT_MODULE}-opensource-src-${QT_VERSION}.tar.xz \
+"
+
+S = "${WORKDIR}/${QT_MODULE}-opensource-src-${QT_VERSION}"
+
+LICENSE = "GFDL-1.3 & LGPL-2.1 | GPL-3.0"
+LIC_FILES_CHKSUM = "file://LICENSE.LGPL;md5=4193e7f1d47a858f6b7c0f1ee66161de \
+                    file://LICENSE.GPL;md5=d32239bcb673463ab874e80d47fae504 \
+                    file://LGPL_EXCEPTION.txt;md5=0145c4d1b6f96a661c2c139dfb268fb6 \
+                    file://LICENSE.FDL;md5=6d9f2a9af4c8b8c3c769f6cc1b6aaf7e"
diff --git a/recipes-qt/qt5/qtbase-5.1.1.inc b/recipes-qt/qt5/qtbase-5.1.1.inc
new file mode 100644
index 0000000..1125be1
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1.inc
@@ -0,0 +1,249 @@
+require qt5.inc
+
+SRC_URI += " \
+    file://0001-Add-linux-oe-g-platform.patch \
+    file://0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch \
+    file://0003-Add-external-hostbindir-option.patch \
+    file://0004-qt_functions-temporary-remove-isEmpty-check.patch \
+    file://0005-qmake-is-already-built-in-qtbase-native.patch \
+    file://0006-Allow-building-a-separate-qmake-for-the-target.patch \
+    file://0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch \
+    file://0008-qt_module-Fix-pkgconfig-replacement.patch \
+    file://0009-qt_module-Fix-paths-in-.prl-files.patch \
+    file://0010-wayland-scanner-disable-silent-rules.patch \
+    file://0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch \
+    file://0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch \
+    file://0013-Disable-mkv8snapshot.patch \
+    file://0014-enables-tslib-device-to-be-read-from-env-variable.patch \
+    file://0015-qtbase-allow-build-of-examples.patch \
+    file://0018-QOpenGLPaintDevice-sub-area-support.patch \
+    file://0020-Use-BGRA-extension-in-bindTexture.patch \
+    file://0021-configure-make-pulseaudio-a-configurable-option.patch \
+    file://0022-configure-make-alsa-a-configurable-option.patch \
+    file://0023-configure-make-freetype-a-configurable-option.patch \
+    file://0024-Use-OE_QMAKE_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch \
+"
+
+DEPENDS += "qtbase-native"
+
+# for syncqt
+RDEPENDS_${PN}-tools += "perl"
+
+# separate some parts of PACKAGECONFIG which are often changed
+# be aware that you need to add icu to build qtwebkit, default
+# PACKAGECONFIG is kept rather minimal for people who don't need
+# stuff like webkit (and it's easier to add options than remove)
+
+# gl or gles needs to be enabled in order to build qtdeclarative
+# http://qt.gitorious.org/qt/qtdeclarative/commit/e988998a08b1420ed10bd02d9d4b3b8ed2289df9
+PACKAGECONFIG_GL ?= "${@base_contains('DISTRO_FEATURES', 'opengl', 'gl', '', d)}"
+PACKAGECONFIG_FB ?= "${@base_contains('DISTRO_FEATURES', 'directfb', 'directfb', '', d)}"
+PACKAGECONFIG_X11 ?= "${@base_contains('DISTRO_FEATURES', 'x11', 'xcb xvideo xsync xshape xrender xrandr xfixes xinput2 xinput xinerama xcursor gtkstyle', '', d)}"
+PACKAGECONFIG_FONTS ?= ""
+PACKAGECONFIG_SYSTEM ?= "jpeg libpng zlib"
+PACKAGECONFIG_MULTIMEDIA ?= "${@base_contains('DISTRO_FEATURES', 'pulseaudio', 'pulseaudio', '', d)}"
+PACKAGECONFIG_DISTRO ?= ""
+# This is in qt5.inc, because qtwebkit-examples are using it to enable ca-certificates dependency
+# PACKAGECONFIG_OPENSSL ?= "openssl"
+
+PACKAGECONFIG ??= " \
+    release \
+    dbus \
+    udev \
+    evdev \
+    widgets \
+    ${PACKAGECONFIG_OPENSSL} \
+    ${PACKAGECONFIG_GL} \
+    ${PACKAGECONFIG_FB} \
+    ${PACKAGECONFIG_X11} \
+    ${PACKAGECONFIG_FONTS} \
+    ${PACKAGECONFIG_SYSTEM} \
+    ${PACKAGECONFIG_MULTIMEDIA} \
+    ${PACKAGECONFIG_DISTRO} \
+"
+
+PACKAGECONFIG[release] = "-release,-debug"
+PACKAGECONFIG[sm] = "-sm,-no-sm"
+PACKAGECONFIG[tests] = ",-nomake tests"
+PACKAGECONFIG[examples] = ",-nomake examples"
+PACKAGECONFIG[accessibility] = "-accessibility,-no-accessibility"
+PACKAGECONFIG[glib] = "-glib,-no-glib,glib-2.0"
+# use either system freetype or bundled freetype, if you disable freetype completely
+# fontdatabases/basic/qbasicfontdatabase.cpp will fail to build and system freetype
+# works only together with fontconfig
+PACKAGECONFIG[freetype] = "-system-freetype,-freetype,freetype"
+PACKAGECONFIG[jpeg] = "-system-libjpeg,-no-libjpeg,jpeg"
+PACKAGECONFIG[libpng] = "-system-libpng,-no-libpng,libpng"
+PACKAGECONFIG[zlib] = "-system-zlib,-qt-zlib,zlib"
+PACKAGECONFIG[pcre] = "-system-pcre,-qt-pcre,pcre"
+# gl or gles2 is needed in order to build qtdeclarative (qtdeclarative.do_configure fails to find quick module without)
+PACKAGECONFIG[gl] = "-opengl desktop -no-eglfs,,virtual/libgl"
+PACKAGECONFIG[gles2] = "-opengl es2 -eglfs,,virtual/libgles2 virtual/egl"
+PACKAGECONFIG[tslib] = "-tslib,-no-tslib,tslib"
+PACKAGECONFIG[dbus] = "-dbus,-no-dbus,dbus"
+PACKAGECONFIG[xcb] = "-xcb,-no-xcb,xcb-util-wm xcb-util-image xcb-util-keysyms"
+PACKAGECONFIG[sql-ibase] = "-sql-ibase,-no-sql-ibase"
+PACKAGECONFIG[sql-mysql] = "-sql-mysql,-no-sql-mysql,mysql"
+PACKAGECONFIG[sql-psql] = "-sql-psql,-no-sql-psql,postgresql"
+PACKAGECONFIG[sql-odbc] = "-sql-odbc,-no-sql-odbc"
+PACKAGECONFIG[sql-oci] = "-sql-oci,-no-sql-oci"
+PACKAGECONFIG[sql-tds] = "-sql-tds,-no-sql-tds"
+PACKAGECONFIG[sql-db2] = "-sql-db2,-no-sql-db2"
+PACKAGECONFIG[sql-sqlite2] = "-sql-sqlite2,-no-sql-sqlite2,sqlite"
+PACKAGECONFIG[sql-sqlite] = "-sql-sqlite,-no-sql-sqlite,sqlite3"
+PACKAGECONFIG[xcursor] = "-xcursor,-no-xcursor,libxcursor"
+PACKAGECONFIG[xinerama] = "-xinerama,-no-xinerama,libxinerama"
+PACKAGECONFIG[xinput] = "-xinput,-no-xinput"
+PACKAGECONFIG[xinput2] = "-xinput2,-no-xinput2"
+PACKAGECONFIG[xfixes] = "-xfixes,-no-xfixes,libxfixes"
+PACKAGECONFIG[xrandr] = "-xrandr,-no-xrandr,libxrandr"
+PACKAGECONFIG[xrender] = "-xrender,-no-xrender,libxrender"
+PACKAGECONFIG[xshape] = "-xshape,-no-xshape"
+PACKAGECONFIG[xsync] = "-xsync,-no-xsync"
+PACKAGECONFIG[xvideo] = "-xvideo,-no-xvideo"
+PACKAGECONFIG[openvg] = "-openvg,-no-openvg"
+PACKAGECONFIG[iconv] = "-iconv,-no-iconv,virtual/libiconv"
+PACKAGECONFIG[xkb] = "-xkb,-no-xkb,libxkbcommon"
+PACKAGECONFIG[evdev] = "-evdev,-no-evdev"
+# depends on glib
+PACKAGECONFIG[gstreamer] = "-gstreamer,-no-gstreamer,gstreamer gst-plugins-base"
+PACKAGECONFIG[fontconfig] = "-fontconfig,-no-fontconfig,fontconfig"
+PACKAGECONFIG[gtkstyle] = "-gtkstyle,-no-gtkstyle,gtk+"
+PACKAGECONFIG[directfb] = "-directfb,-no-directfb,directfb"
+PACKAGECONFIG[linuxfb] = "-linuxfb,-no-linuxfb"
+PACKAGECONFIG[mitshm] = "-mitshm,-no-mitshm,mitshm"
+PACKAGECONFIG[kms] = "-kms,-no-kms,kms"
+# needed for qtdeclarative (qtdeclarative.do_configure fails to find quick module without)
+PACKAGECONFIG[icu] = "-icu,-no-icu,icu"
+PACKAGECONFIG[udev] = "-libudev,-no-libudev,udev"
+# use -openssl-linked here to ensure that RDEPENDS for libcrypto and libssl are detected
+PACKAGECONFIG[openssl] = "-openssl-linked,-no-openssl,openssl"
+PACKAGECONFIG[alsa] = "-alsa,-no-alsa,alsa-lib"
+PACKAGECONFIG[pulseaudio] = "-pulseaudio,-no-pulseaudio,pulseaudio"
+PACKAGECONFIG[nis] = "-nis,-no-nis"
+PACKAGECONFIG[widgets] = "-widgets,-no-widgets"
+
+QT_CONFIG_FLAGS += " \
+    -reduce-relocations \
+    -shared \
+    -silent \
+    -no-pch \
+    -no-rpath \
+    -pkg-config \
+    ${EXTRA_OECONF} \
+"
+
+do_generate_qt_config_file_append() {
+    cat >> ${QT_CONF_PATH} <<EOF
+
+[EffectivePaths]
+Prefix=..
+EOF
+}
+
+# qtbase is exception, we need to use mkspecs from ${S}
+QMAKE_MKSPEC_PATH = "${B}"
+
+# another exception is that we need to run bin/qmake, because EffectivePaths are relative to qmake location
+OE_QMAKE_QMAKE_ORIG = "${STAGING_BINDIR_NATIVE}/${QT_DIR_NAME}/qmake"
+OE_QMAKE_QMAKE = "bin/qmake"
+
+# qtbase is exception, configure script is using our get(X)QEvalMakeConf and setBootstrapEvalVariable functions to read it from shell
+export OE_QMAKE_COMPILER
+export OE_QMAKE_CC
+export OE_QMAKE_CFLAGS
+export OE_QMAKE_CXX
+export OE_QMAKE_CXXFLAGS
+export OE_QMAKE_LINK
+export OE_QMAKE_LDFLAGS
+export OE_QMAKE_AR
+export OE_QMAKE_STRIP
+
+do_configure() {
+    # we need symlink in path relative to source, because
+    # EffectivePaths:Prefix is relative to qmake location
+    if [ ! -e ${B}/bin/qmake ]; then
+        mkdir ${B}/bin
+        ln -sf ${OE_QMAKE_QMAKE_ORIG} ${B}/bin/qmake
+    fi
+
+    ${S}/configure -v \
+        -dont-process \
+        -opensource -confirm-license \
+        -sysroot ${STAGING_DIR_TARGET} \
+        -no-gcc-sysroot \
+        -prefix ${OE_QMAKE_PATH_PREFIX} \
+        -bindir ${OE_QMAKE_PATH_BINS} \
+        -libdir ${OE_QMAKE_PATH_LIBS} \
+        -datadir ${OE_QMAKE_PATH_DATA} \
+        -sysconfdir ${OE_QMAKE_PATH_SETTINGS} \
+        -docdir ${OE_QMAKE_PATH_DOCS} \
+        -headerdir ${OE_QMAKE_PATH_HEADERS} \
+        -archdatadir ${OE_QMAKE_PATH_ARCHDATA} \
+        -libexecdir ${OE_QMAKE_PATH_LIBEXECS} \
+        -plugindir ${OE_QMAKE_PATH_PLUGINS} \
+        -importdir ${OE_QMAKE_PATH_IMPORTS} \
+        -qmldir ${OE_QMAKE_PATH_QML} \
+        -translationdir ${OE_QMAKE_PATH_TRANSLATIONS} \
+        -testsdir ${OE_QMAKE_PATH_TESTS} \
+        -examplesdir ${OE_QMAKE_PATH_EXAMPLES} \
+        -hostbindir ${OE_QMAKE_PATH_HOST_BINS} \
+        -hostdatadir ${OE_QMAKE_PATH_HOST_DATA} \
+        -external-hostbindir ${OE_QMAKE_PATH_EXTERNAL_HOST_BINS} \
+        -platform ${OE_QMAKESPEC} \
+        -xplatform linux-oe-g++ \
+        ${QT_CONFIG_FLAGS}
+
+    qmake5_base_do_configure
+}
+
+do_compile_append() {
+    # Build qmake for the target arch
+    # Disable for now, because doesn't work well with separate ${B}
+    # cp -ra ${S}/qmake ${B}
+    # cd ${B}/qmake
+    # ${OE_QMAKE_QMAKE}
+    # Fix to use headers in ${B}
+    # sed '/INCPATH/s#${S}#${B}#g' -i Makefile
+    # oe_runmake CC="${CC}" CXX="${CXX}"
+    # cd ${B}
+}
+
+do_install_append() {
+    ### Fix up the binaries to the right location
+    ### TODO: FIX
+    # qemu built on host breaks do_package, remove it here (will be replaces with right qemu when do_compile is fixed
+    # ERROR: objcopy failed with exit code 1 (cmd was 'arm-oe-linux-gnueabi-objcopy' --only-keep-debug '/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.1-r0.0/package/usr/bin/qmake' '/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.1-r0.0/package/usr/bin/.debug/qmake')
+    rm -f ${D}/${bindir}/${QT_DIR_NAME}/qmake
+    # install fonts manually if they are missing
+    if [ ! -d ${D}/${OE_QMAKE_PATH_LIBS}/fonts ]; then
+        cp -a ${S}/lib/fonts ${D}/${OE_QMAKE_PATH_LIBS}
+    fi
+}
+
+PACKAGES =. " \
+    ${PN}-fonts \
+    ${PN}-fonts-ttf-vera \
+    ${PN}-fonts-ttf-dejavu \
+    ${PN}-fonts-pfa \
+    ${PN}-fonts-pfb \
+    ${PN}-fonts-qpf \
+"
+
+RRECOMMENDS_${PN}-fonts = " \
+    ${PN}-fonts-ttf-vera \
+    ${PN}-fonts-ttf-dejavu \
+    ${PN}-fonts-pfa \
+    ${PN}-fonts-pfb \
+    ${PN}-fonts-qpf \
+"
+
+ALLOW_EMPTY_${PN}-fonts = "1"
+
+FILES_${PN}-fonts-ttf-vera       = "${OE_QMAKE_PATH_LIBS}/fonts/Vera*.ttf"
+FILES_${PN}-fonts-ttf-dejavu     = "${OE_QMAKE_PATH_LIBS}/fonts/DejaVu*.ttf"
+FILES_${PN}-fonts-pfa            = "${OE_QMAKE_PATH_LIBS}/fonts/*.pfa"
+FILES_${PN}-fonts-pfb            = "${OE_QMAKE_PATH_LIBS}/fonts/*.pfb"
+FILES_${PN}-fonts-qpf            = "${OE_QMAKE_PATH_LIBS}/fonts/*.qpf*"
+FILES_${PN}-fonts                = "${OE_QMAKE_PATH_LIBS}/fonts/README \
+                                    ${OE_QMAKE_PATH_LIBS}/fonts/fontdir"
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0001-Add-linux-oe-g-platform.patch b/recipes-qt/qt5/qtbase-5.1.1/0001-Add-linux-oe-g-platform.patch
new file mode 100644
index 0000000..87c2612
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0001-Add-linux-oe-g-platform.patch
@@ -0,0 +1,304 @@
+From b91e232e603df102a1d305aceb0dbedc6ce3e89c Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Mon, 15 Apr 2013 04:29:32 +0200
+Subject: [PATCH 01/22] Add linux-oe-g++ platform
+
+* This qmake.conf unlike other platforms reads most variables from
+  shell environment, because it's easier for qt recipes to export
+  *FLAGS or CC specific for given recipe
+
+* configure: add getQEvalMakeConf and getXQEvalMakeConf
+  Allow expansion of $(...) references from qmake.conf to generate
+  qmake environment from shell environment as exported by qmake5_base
+
+* OE_QMAKE_CXX in order to allow compiler version check to succeed
+  which allows WebKit to be enabled.
+
+* Other variables in order to let config.tests to use our -platform
+  settings
+
+* Add setBootstrapEvalVariable to bootstrap qmake with our environment
+  too, this allows us to use -platform linux-oe-g++ also for native
+  recipe
+
+* disable gdb_dwarf_index
+  * qmake is trying to call native gdb and we don't depend on gdb-native
+    (or even provide gdb-native)
+  * fixes errors like this:
+    /bin/sh: gdb: command not found
+    /bin/sh: line 0: test: -gt: unary operator expected
+    which are not fatal, but still misleading in do_configure output
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure                            |  54 ++++++++++++++++---
+ mkspecs/linux-oe-g++/qmake.conf      |  40 ++++++++++++++
+ mkspecs/linux-oe-g++/qplatformdefs.h | 100 +++++++++++++++++++++++++++++++++++
+ 3 files changed, 187 insertions(+), 7 deletions(-)
+ create mode 100644 mkspecs/linux-oe-g++/qmake.conf
+ create mode 100644 mkspecs/linux-oe-g++/qplatformdefs.h
+
+diff --git a/configure b/configure
+index 140c7b4..397d53f 100755
+--- a/configure
++++ b/configure
+@@ -291,6 +291,16 @@ getQMakeConf()
+     getSingleQMakeVariable "$1" "$specvals"
+ }
+ 
++# OE qmake.conf is reading some variables from shell env
++# read them from qmake.conf, replace qmake () syntax with shell and eval
++getQEvalMakeConf()
++{
++    VAL=`getQMakeConf "$1" | sed -n 's/$[(]\([0-9a-zA-Z_]*\)[)]/$\1/pg'`
++    EVAL=`eval "echo ${VAL}"`
++#    echo "Running getQEvalMakeConf: var='$1', val='`getQMakeConf \"$1\"`, val-sed='$VAL', eval='$EVAL'" >&2
++    eval "echo ${VAL}"
++}
++
+ getXQMakeConf()
+ {
+     if [ -z "$xspecvals" ]; then
+@@ -300,6 +310,16 @@ getXQMakeConf()
+     getSingleQMakeVariable "$1" "$xspecvals"
+ }
+ 
++# OE qmake.conf is reading some variables from shell env
++# read them from qmake.conf, replace qmake () syntax with shell and eval
++getXQEvalMakeConf()
++{
++    VAL=`getXQMakeConf "$1" | sed -n 's/$[(]\([0-9a-zA-Z_]*\)[)]/$\1/pg'`
++    EVAL=`eval "echo ${VAL}"`
++#    echo "Running getXQEvalMakeConf: var='$1', val='`getXQMakeConf \"$1\"`, val-sed='$VAL', eval='$EVAL'" >&2
++    eval "echo ${VAL}"
++}
++
+ compilerSupportsFlag()
+ {
+     cat >conftest.cpp <<EOF
+@@ -816,6 +836,18 @@ fi
+ # initalize variables
+ #-------------------------------------------------------------------------------
+ 
++# Export all OE variables for qmake.conf from shell env to QMakeVars
++OE_VARIABLES="AR CC CFLAGS COMPILER CXX CXXFLAGS LDFLAGS LINK QT_CONFIG STRIP"
++for varname in $OE_VARIABLES; do
++    qmakevarname="${varname}"
++    cmd=`echo \
++'if [ -n "\$OE_QMAKE_'${varname}'" ]; then
++    QMakeVar set OE_QMAKE_'${qmakevarname}' "\$OE_QMAKE_'${varname}'"
++#    echo "Exporting OE_QMAKE_'${qmakevarname}' value=\"\$OE_QMAKE_'${varname}'\"" >&2
++fi'`
++    eval "$cmd"
++done
++
+ SYSTEM_VARIABLES="RANLIB STRIP OBJDUMP LD CC CXX CFLAGS CXXFLAGS LDFLAGS"
+ for varname in $SYSTEM_VARIABLES; do
+     qmakevarname="${varname}"
+@@ -2894,7 +2926,7 @@ if [ "$BUILD_ON_MAC" = "yes" ] && [ "$CFG_QGTKSTYLE" = "auto" ]; then
+     CFG_QGTKSTYLE=no
+ fi
+ 
+-QMAKE_CONF_COMPILER=`getXQMakeConf QMAKE_CXX`
++QMAKE_CONF_COMPILER=`getXQEvalMakeConf QMAKE_CXX`
+ 
+ TEST_COMPILER=$QMAKE_CONF_COMPILER
+ 
+@@ -2929,7 +2961,7 @@ if [ "$XPLATFORM_SYMBIAN_SBSV2" = "no" ]; then
+         exit 1
+     fi
+ fi
+-TEST_COMPILER_CXXFLAGS=`getXQMakeConf QMAKE_CXXFLAGS`
++TEST_COMPILER_CXXFLAGS=`getXQEvalMakeConf QMAKE_CXXFLAGS`
+ 
+ GCC_MACHINE_DUMP=
+ case "$TEST_COMPILER" in *g++) GCC_MACHINE_DUMP=$($TEST_COMPILER -dumpmachine);; esac
+@@ -3959,6 +3991,14 @@ setBootstrapVariable()
+     getQMakeConf "$1" | echo ${2-$1} = `if [ -n "$3" ]; then sed "$3"; else cat; fi` >> "$mkfile"
+ }
+ 
++# OE qmake.conf is reading some variables from shell env
++# read them from qmake.conf, replace qmake () syntax with shell and eval
++setBootstrapEvalVariable()
++{
++    getQEvalMakeConf "$1" | echo ${2-$1} = `if [ -n "$3" ]; then sed "$3"; else cat; fi` >> "$mkfile"
++}
++
++
+ # build qmake
+ if true; then ###[ '!' -f "$outpath/bin/qmake" ];
+     echo "Creating qmake..."
+@@ -3997,11 +4037,11 @@ if true; then ###[ '!' -f "$outpath/bin/qmake" ];
+         fi
+ 
+         [ "$CFG_SILENT" = "yes" ] && CC_TRANSFORM='s,^,\@,' || CC_TRANSFORM=
+-        setBootstrapVariable QMAKE_CC CC "$CC_TRANSFORM"
+-        setBootstrapVariable QMAKE_CXX CXX "$CC_TRANSFORM"
+-        setBootstrapVariable QMAKE_CFLAGS
+-        setBootstrapVariable QMAKE_CXXFLAGS
+-        setBootstrapVariable QMAKE_LFLAGS
++        setBootstrapEvalVariable QMAKE_CC CC "$CC_TRANSFORM"
++        setBootstrapEvalVariable QMAKE_CXX CXX "$CC_TRANSFORM"
++        setBootstrapEvalVariable QMAKE_CFLAGS
++        setBootstrapEvalVariable QMAKE_CXXFLAGS
++        setBootstrapEvalVariable QMAKE_LFLAGS
+ 
+         if [ "$CFG_RELEASE_QMAKE" = "yes" ]; then
+             setBootstrapVariable QMAKE_CFLAGS_RELEASE
+diff --git a/mkspecs/linux-oe-g++/qmake.conf b/mkspecs/linux-oe-g++/qmake.conf
+new file mode 100644
+index 0000000..ca26b10
+--- /dev/null
++++ b/mkspecs/linux-oe-g++/qmake.conf
+@@ -0,0 +1,40 @@
++#
++# qmake configuration for linux-g++ with modifications for building with OpenEmbedded
++#
++
++MAKEFILE_GENERATOR	= UNIX
++CONFIG += incremental
++QMAKE_INCREMENTAL_STYLE = sublib
++
++include(../common/linux.conf)
++
++# QMAKE_<TOOL> (moc, uic, rcc) are gone, overwrite only ar and strip
++QMAKE_AR              = $(OE_QMAKE_AR) cqs
++QMAKE_STRIP           = $(OE_QMAKE_STRIP)
++QMAKE_WAYLAND_SCANNER = $(OE_QMAKE_WAYLAND_SCANNER)
++
++include(../common/gcc-base-unix.conf)
++
++# *FLAGS from gcc-base.conf
++QMAKE_CFLAGS                += $(OE_QMAKE_CFLAGS)
++QMAKE_CXXFLAGS              += $(OE_QMAKE_CXXFLAGS)
++QMAKE_LFLAGS                += $(OE_QMAKE_LDFLAGS)
++
++include(../common/g++-unix.conf)
++
++# tc settings from g++-base.conf
++QMAKE_COMPILER = $(OE_QMAKE_COMPILER)
++QMAKE_CC       = $(OE_QMAKE_CC)
++QMAKE_CXX      = $(OE_QMAKE_CXX)
++
++QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $(OE_QMAKE_CFLAGS)
++
++QMAKE_LINK         = $(OE_QMAKE_LINK)
++QMAKE_LINK_SHLIB   = $(OE_QMAKE_LINK)
++QMAKE_LINK_C       = $(OE_QMAKE_LINK)
++QMAKE_LINK_C_SHLIB = $(OE_QMAKE_LINK)
++
++# for the SDK
++isEmpty(QMAKE_QT_CONFIG):QMAKE_QT_CONFIG = $(OE_QMAKE_QT_CONFIG)
++
++load(qt_config)
+diff --git a/mkspecs/linux-oe-g++/qplatformdefs.h b/mkspecs/linux-oe-g++/qplatformdefs.h
+new file mode 100644
+index 0000000..dd12003
+--- /dev/null
++++ b/mkspecs/linux-oe-g++/qplatformdefs.h
+@@ -0,0 +1,100 @@
++/****************************************************************************
++**
++** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
++** Contact: http://www.qt-project.org/legal
++**
++** This file is part of the qmake spec of the Qt Toolkit.
++**
++** $QT_BEGIN_LICENSE:LGPL$
++** Commercial License Usage
++** Licensees holding valid commercial Qt licenses may use this file in
++** accordance with the commercial license agreement provided with the
++** Software or, alternatively, in accordance with the terms contained in
++** a written agreement between you and Digia.  For licensing terms and
++** conditions see http://qt.digia.com/licensing.  For further information
++** use the contact form at http://qt.digia.com/contact-us.
++**
++** GNU Lesser General Public License Usage
++** Alternatively, this file may be used under the terms of the GNU Lesser
++** General Public License version 2.1 as published by the Free Software
++** Foundation and appearing in the file LICENSE.LGPL included in the
++** packaging of this file.  Please review the following information to
++** ensure the GNU Lesser General Public License version 2.1 requirements
++** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
++**
++** In addition, as a special exception, Digia gives you certain additional
++** rights.  These rights are described in the Digia Qt LGPL Exception
++** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
++**
++** GNU General Public License Usage
++** Alternatively, this file may be used under the terms of the GNU
++** General Public License version 3.0 as published by the Free Software
++** Foundation and appearing in the file LICENSE.GPL included in the
++** packaging of this file.  Please review the following information to
++** ensure the GNU General Public License version 3.0 requirements will be
++** met: http://www.gnu.org/copyleft/gpl.html.
++**
++**
++** $QT_END_LICENSE$
++**
++****************************************************************************/
++
++#ifndef QPLATFORMDEFS_H
++#define QPLATFORMDEFS_H
++
++// Get Qt defines/settings
++
++#include "qglobal.h"
++
++// Set any POSIX/XOPEN defines at the top of this file to turn on specific APIs
++
++// 1) need to reset default environment if _BSD_SOURCE is defined
++// 2) need to specify POSIX thread interfaces explicitly in glibc 2.0
++// 3) it seems older glibc need this to include the X/Open stuff
++#ifndef _GNU_SOURCE
++#  define _GNU_SOURCE
++#endif
++
++#include <unistd.h>
++
++
++// We are hot - unistd.h should have turned on the specific APIs we requested
++
++#include <features.h>
++#include <pthread.h>
++#include <dirent.h>
++#include <fcntl.h>
++#include <grp.h>
++#include <pwd.h>
++#include <signal.h>
++
++#include <sys/types.h>
++#include <sys/ioctl.h>
++#include <sys/ipc.h>
++#include <sys/time.h>
++#include <sys/shm.h>
++#include <sys/socket.h>
++#include <sys/stat.h>
++#include <sys/wait.h>
++#include <netinet/in.h>
++#ifndef QT_NO_IPV6IFNAME
++#include <net/if.h>
++#endif
++
++#define QT_USE_XOPEN_LFS_EXTENSIONS
++#include "../common/posix/qplatformdefs.h"
++
++#undef QT_SOCKLEN_T
++
++#if defined(__GLIBC__) && (__GLIBC__ >= 2)
++#define QT_SOCKLEN_T            socklen_t
++#else
++#define QT_SOCKLEN_T            int
++#endif
++
++#if defined(_XOPEN_SOURCE) && (_XOPEN_SOURCE >= 500)
++#define QT_SNPRINTF		::snprintf
++#define QT_VSNPRINTF		::vsnprintf
++#endif
++
++#endif // QPLATFORMDEFS_H
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0001-Always-build-uic.patch b/recipes-qt/qt5/qtbase-5.1.1/0001-Always-build-uic.patch
new file mode 100644
index 0000000..96c85f0
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0001-Always-build-uic.patch
@@ -0,0 +1,40 @@
+From f794542b10ccbf9c4cecaf23cf24658d64594cf3 Mon Sep 17 00:00:00 2001
+From: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Date: Tue, 27 Nov 2012 12:46:44 -0800
+Subject: [PATCH 22/22] Always build uic
+
+Even if we are not building gui or widgets. This tool is needed later
+as a native tool when compiling the target.
+
+Change-Id: I257668ac28c22b192e7ec7736e6c23fa3be6bab6
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/src.pro | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/src/src.pro b/src/src.pro
+index b4c9602..f30ec1f 100644
+--- a/src/src.pro
++++ b/src/src.pro
+@@ -122,7 +122,7 @@ contains(QT_CONFIG, concurrent):SUBDIRS += src_concurrent
+     contains(QT_CONFIG, opengl(es1|es2)?):SUBDIRS += src_openglextensions
+     src_plugins.depends += src_gui src_platformsupport
+     !contains(QT_CONFIG, no-widgets) {
+-        SUBDIRS += src_tools_uic src_widgets
++        SUBDIRS += src_widgets
+         src_plugins.depends += src_widgets
+         contains(QT_CONFIG, opengl(es1|es2)?) {
+             SUBDIRS += src_opengl
+@@ -134,7 +134,7 @@ contains(QT_CONFIG, concurrent):SUBDIRS += src_concurrent
+         }
+     }
+ }
+-SUBDIRS += src_plugins src_tools_qdoc
++SUBDIRS += src_plugins src_tools_qdoc src_tools_uic
+ 
+ nacl: SUBDIRS -= src_network src_testlib
+ 
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch b/recipes-qt/qt5/qtbase-5.1.1/0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch
new file mode 100644
index 0000000..fab5880
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch
@@ -0,0 +1,36 @@
+From a899fba459928c7e5196f15dcea4d561807dc825 Mon Sep 17 00:00:00 2001
+From: Holger Freyther <zecke@selfish.org>
+Date: Wed, 26 Sep 2012 17:22:30 +0200
+Subject: [PATCH 02/22] qlibraryinfo: allow to set qt.conf from the outside
+ using the environment
+
+Allow to set a qt.conf from the outside using the environment. This allows
+to inject new prefixes and other paths into qmake. This is needed when using
+the same qmake binary to build qt/x11 and qt/embedded
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/corelib/global/qlibraryinfo.cpp | 5 ++++-
+ 1 file changed, 4 insertions(+), 1 deletion(-)
+
+diff --git a/src/corelib/global/qlibraryinfo.cpp b/src/corelib/global/qlibraryinfo.cpp
+index 53a3ebb..8ca2102 100644
+--- a/src/corelib/global/qlibraryinfo.cpp
++++ b/src/corelib/global/qlibraryinfo.cpp
+@@ -138,7 +138,10 @@ QLibrarySettings::QLibrarySettings()
+ 
+ QSettings *QLibraryInfoPrivate::findConfiguration()
+ {
+-    QString qtconfig = QStringLiteral(":/qt/etc/qt.conf");
++    QByteArray config = getenv("QT_CONF_PATH");
++    QString qtconfig = QFile::decodeName(config);
++    if(!QFile::exists(qtconfig))
++        qtconfig = QStringLiteral(":/qt/etc/qt.conf");
+ #ifdef QT_BOOTSTRAPPED
+     if(!QFile::exists(qtconfig))
+         qtconfig = qt_libraryInfoFile();
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0003-Add-external-hostbindir-option.patch b/recipes-qt/qt5/qtbase-5.1.1/0003-Add-external-hostbindir-option.patch
new file mode 100644
index 0000000..b4bf10f
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0003-Add-external-hostbindir-option.patch
@@ -0,0 +1,219 @@
+From 062621e0310eddb448ebcc27fc4c1507c2d6e30d Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 6 Apr 2013 13:15:07 +0200
+Subject: [PATCH 03/22] Add -external-hostbindir option
+
+* when cross-compiling it's sometimes useful to use existing tools from machine
+  (or in OpenEmbedded built with separate native recipe) when building for target
+
+* this way we can skip bootstraping tools we already have
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure                           | 16 +++++++++++++++-
+ mkspecs/features/qt_functions.prf   |  5 ++++-
+ mkspecs/features/qt_tool.prf        |  2 +-
+ qmake/property.cpp                  |  1 +
+ qtbase.pro                          | 12 +++++++++---
+ src/corelib/global/qlibraryinfo.cpp |  3 ++-
+ src/corelib/global/qlibraryinfo.h   |  1 +
+ tools/configure/configureapp.cpp    |  8 ++++++++
+ 8 files changed, 41 insertions(+), 7 deletions(-)
+
+diff --git a/configure b/configure
+index 397d53f..80bdd7a 100755
+--- a/configure
++++ b/configure
+@@ -1046,6 +1046,7 @@ QT_HOST_PREFIX=
+ QT_HOST_BINS=
+ QT_HOST_LIBS=
+ QT_HOST_DATA=
++QT_EXTERNAL_HOST_BINS=
+ 
+ #flags for SQL drivers
+ QT_CFLAGS_PSQL=
+@@ -1191,7 +1192,8 @@ while [ "$#" -gt 0 ]; do
+     -android-ndk-platform| \
+     -android-ndk-host| \
+     -android-arch| \
+-    -android-toolchain-version)
++    -android-toolchain-version| \
++    -external-hostbindir)
+         VAR=`echo $1 | sed "s,^-\(.*\),\1,"`
+         shift
+         VAL="$1"
+@@ -1379,6 +1381,9 @@ while [ "$#" -gt 0 ]; do
+     hostlibdir)
+         QT_HOST_LIBS="$VAL"
+         ;;
++    external-hostbindir)
++        QT_EXTERNAL_HOST_BINS="$VAL"
++        ;;
+     pkg-config)
+         if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
+             CFG_PKGCONFIG="$VAL"
+@@ -3240,6 +3245,11 @@ if [ "$CFG_COMPILE_EXAMPLES" = "yes" ]; then
+     QMAKE_CONFIG="$QMAKE_CONFIG compile_examples"
+ fi
+ 
++# default is empty, don't call makeabs if it is empty
++if [ ! -z "$QT_EXTERNAL_HOST_BINS" ]; then
++    QT_EXTERNAL_HOST_BINS=`"$relpath/config.tests/unix/makeabs" "$QT_EXTERNAL_HOST_BINS"`
++fi
++
+ #-------------------------------------------------------------------------------
+ # help - interactive parts of the script _after_ this section please
+ #-------------------------------------------------------------------------------
+@@ -3408,6 +3418,9 @@ Installation options:
+     -hostdatadir <dir> . Data used by qmake will be installed to <dir>
+                          (default HOSTPREFIX)
+ 
++    -external-hostbindir <dir> Use external host executables instead of building them
++                         (not used by defaut)
++
+ Configure options:
+ 
+  The defaults (*) are usually acceptable. A plus (+) denotes a default value
+@@ -3923,6 +3936,7 @@ static const char qt_configure_prefix_path_strs[][256 + 12] = {
+     "qt_hbinpath=$QT_HOST_BINS",
+     "qt_hlibpath=$QT_HOST_LIBS",
+     "qt_hdatpath=$QT_HOST_DATA",
++    "qt_ebinpath=$QT_EXTERNAL_HOST_BINS",
+     "qt_targspec=$shortxspec",
+     "qt_hostspec=$shortspec",
+ #endif
+diff --git a/mkspecs/features/qt_functions.prf b/mkspecs/features/qt_functions.prf
+index 2f2c94c..4e12d3d 100644
+--- a/mkspecs/features/qt_functions.prf
++++ b/mkspecs/features/qt_functions.prf
+@@ -194,7 +194,10 @@ defineTest(qtAddRpathLink) {
+ defineTest(qtPrepareTool) {
+     $$1 = $$eval(QT_TOOL.$${2}.binary)
+     isEmpty($$1) {
+-        $$1 = $$[QT_HOST_BINS]/$$2
++        $$1 = $$[QT_EXTERNAL_HOST_BINS]/$$2
++        isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
++            $$1 = $$[QT_HOST_BINS]/$$2
++        }
+         exists($$eval($$1).pl) {
+             $$1 = perl -w $$eval($$1).pl
+         } else: contains(QMAKE_HOST.os, Windows) {
+diff --git a/mkspecs/features/qt_tool.prf b/mkspecs/features/qt_tool.prf
+index 9a6b963..83ef3a0 100644
+--- a/mkspecs/features/qt_tool.prf
++++ b/mkspecs/features/qt_tool.prf
+@@ -16,7 +16,7 @@ CONFIG += console
+ # If we are doing a prefix build, create a "module" pri which enables
+ # qtPrepareTool() to work with the non-installed build.
+ # Non-bootstrapped tools always need this because of the environment setup.
+-!build_pass:if(!host_build|!force_bootstrap|force_independent) {
++!build_pass:if(!host_build|!force_bootstrap|force_independent):isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
+     isEmpty(MODULE):MODULE = $$TARGET
+ 
+     !host_build|!force_bootstrap: MODULE_DEPENDS = $$replace(QT, -private$, )
+diff --git a/qmake/property.cpp b/qmake/property.cpp
+index 4685440..93eb1d4 100644
+--- a/qmake/property.cpp
++++ b/qmake/property.cpp
+@@ -75,6 +75,7 @@ static const struct {
+     { "QT_HOST_DATA", QLibraryInfo::HostDataPath, true },
+     { "QT_HOST_BINS", QLibraryInfo::HostBinariesPath, true },
+     { "QT_HOST_LIBS", QLibraryInfo::HostLibrariesPath, true },
++    { "QT_EXTERNAL_HOST_BINS", QLibraryInfo::ExternalHostBinariesPath, true },
+     { "QMAKE_SPEC", QLibraryInfo::HostSpecPath, true },
+     { "QMAKE_XSPEC", QLibraryInfo::TargetSpecPath, true },
+ };
+diff --git a/qtbase.pro b/qtbase.pro
+index d6726b5..28ca7d5 100644
+--- a/qtbase.pro
++++ b/qtbase.pro
+@@ -70,16 +70,22 @@ CONFIG -= qt
+ 
+ #qmake
+ qmake.path = $$[QT_HOST_BINS]
++qmake.files = $$OUT_PWD/bin/qmake
++!isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
++   qmake.files = $$[QT_EXTERNAL_HOST_BINS]/bin/qmake
++}
+ equals(QMAKE_HOST.os, Windows) {
+-   qmake.files = $$OUT_PWD/bin/qmake.exe
+-} else {
+-   qmake.files = $$OUT_PWD/bin/qmake
++   qmake.files = $${qmake.files}.exe
+ }
+ INSTALLS += qmake
+ 
+ #syncqt
+ syncqt.path = $$[QT_HOST_BINS]
+ syncqt.files = $$PWD/bin/syncqt.pl
++syncqt.files = $$PWD/bin/syncqt.pl
++!isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
++   syncqt.files = $$[QT_EXTERNAL_HOST_BINS]/bin/syncqt.pl
++}
+ INSTALLS += syncqt
+ 
+ # If we are doing a prefix build, create a "module" pri which enables
+diff --git a/src/corelib/global/qlibraryinfo.cpp b/src/corelib/global/qlibraryinfo.cpp
+index 8ca2102..9f5d444 100644
+--- a/src/corelib/global/qlibraryinfo.cpp
++++ b/src/corelib/global/qlibraryinfo.cpp
+@@ -270,7 +270,7 @@ QLibraryInfo::isDebugBuild()
+  */
+ 
+ static const struct {
+-    char key[19], value[13];
++    char key[21], value[13];
+ } qtConfEntries[] = {
+     { "Prefix", "." },
+     { "Documentation", "doc" }, // should be ${Data}/doc
+@@ -296,6 +296,7 @@ static const struct {
+     { "HostBinaries", "bin" },
+     { "HostLibraries", "lib" },
+     { "HostData", "." },
++    { "ExternalHostBinaries", "" },
+     { "TargetSpec", "" },
+     { "HostSpec", "" },
+ #endif
+diff --git a/src/corelib/global/qlibraryinfo.h b/src/corelib/global/qlibraryinfo.h
+index b275e01..0e6baed 100644
+--- a/src/corelib/global/qlibraryinfo.h
++++ b/src/corelib/global/qlibraryinfo.h
+@@ -84,6 +84,7 @@ public:
+         HostBinariesPath,
+         HostLibrariesPath,
+         HostDataPath,
++        ExternalHostBinariesPath,
+         TargetSpecPath,
+         HostSpecPath,
+         LastHostPath = HostSpecPath,
+diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
+index a6376bb..aed85ce 100644
+--- a/tools/configure/configureapp.cpp
++++ b/tools/configure/configureapp.cpp
+@@ -1162,6 +1162,13 @@ void Configure::parseCmdLine()
+             dictionary[ "QT_HOST_DATA" ] = configCmdLine.at(i);
+         }
+ 
++        else if (configCmdLine.at(i) == "-external-hostbindir") {
++            ++i;
++            if (i == argCount)
++                break;
++            dictionary[ "QT_EXTERNAL_HOST_BINS" ] = configCmdLine.at(i);
++        }
++
+         else if (configCmdLine.at(i) == "-make-tool") {
+             ++i;
+             if (i == argCount)
+@@ -3708,6 +3715,7 @@ void Configure::generateQConfigCpp()
+                   << "    \"qt_hbinpath=" << formatPath(dictionary["QT_HOST_BINS"]) << "\"," << endl
+                   << "    \"qt_hlibpath=" << formatPath(dictionary["QT_HOST_LIBS"]) << "\"," << endl
+                   << "    \"qt_hdatpath=" << formatPath(dictionary["QT_HOST_DATA"]) << "\"," << endl
++                  << "    \"qt_ebinpath=" << formatPath(dictionary["QT_EXTERNAL_HOST_BINS"]) << "\"," << endl
+                   << "    \"qt_targspec=" << targSpec << "\"," << endl
+                   << "    \"qt_hostspec=" << hostSpec << "\"," << endl
+                   << "#endif" << endl
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0004-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch b/recipes-qt/qt5/qtbase-5.1.1/0004-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
new file mode 100644
index 0000000..24838c5
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0004-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
@@ -0,0 +1,27 @@
+From 698f073fb8cc6dc1ced277b6ae2056cb9d02f2d5 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 27 Apr 2013 22:33:33 +0200
+Subject: [PATCH 04/14] configureapp: Prefix default LIBDIRS and INCDIRS with
+ SYSROOT
+
+Upstream-Status: Pending
+---
+ tools/configure/configureapp.cpp | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+Index: qtbase-opensource-src-5.1.1/tools/configure/configureapp.cpp
+===================================================================
+--- qtbase-opensource-src-5.1.1.orig/tools/configure/configureapp.cpp	2014-04-18 00:43:41.000000000 +0000
++++ qtbase-opensource-src-5.1.1/tools/configure/configureapp.cpp	2014-04-18 00:50:33.013242392 +0000
+@@ -3111,8 +3111,9 @@
+         configStream << "QT_HOST_CPU_FEATURES = " << dictionary["QT_HOST_CPU_FEATURES"] << endl;
+         if (dictionary.contains("XQMAKESPEC") && !dictionary["XQMAKESPEC"].startsWith("wince")) {
+             // FIXME: add detection
+-            configStream << "QMAKE_DEFAULT_LIBDIRS = /lib /usr/lib" << endl;
+-            configStream << "QMAKE_DEFAULT_INCDIRS = /usr/include /usr/local/include" << endl;
++            configStream << "QMAKE_DEFAULT_LIBDIRS = $$[QT_SYSROOT]/lib $$[QT_SYSROOT]/usr/lib" << endl;
++            configStream << "QMAKE_DEFAULT_INCDIRS = $$[QT_SYSROOT]/usr/include $$[QT_SYSROOT]/usr/local/include" << endl;
++
+         }
+         if (dictionary["QT_EDITION"].contains("OPENSOURCE"))
+             configStream << "QT_EDITION = " << QLatin1String("OpenSource") << endl;
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0004-qt_functions-temporary-remove-isEmpty-check.patch b/recipes-qt/qt5/qtbase-5.1.1/0004-qt_functions-temporary-remove-isEmpty-check.patch
new file mode 100644
index 0000000..955d791
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0004-qt_functions-temporary-remove-isEmpty-check.patch
@@ -0,0 +1,51 @@
+From 21c573762a168f874f32c8bf49f75442e608e08a Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Wed, 17 Apr 2013 18:06:25 +0200
+Subject: [PATCH 04/22] qt_functions: temporary remove isEmpty check
+
+* now we assume that every build will provide QT_EXTERNAL_HOST_BINS value
+* isEmpty works correctly only with qmake variables (e.g. $$FOO -
+  isEmpty(FOO)), but doesn't work with system properties like $$[FOO].
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ mkspecs/features/qt_functions.prf | 6 +++++-
+ mkspecs/features/qt_tool.prf      | 3 +--
+ 2 files changed, 6 insertions(+), 3 deletions(-)
+
+diff --git a/mkspecs/features/qt_functions.prf b/mkspecs/features/qt_functions.prf
+index 4e12d3d..e20ad9d 100644
+--- a/mkspecs/features/qt_functions.prf
++++ b/mkspecs/features/qt_functions.prf
+@@ -195,7 +195,11 @@ defineTest(qtPrepareTool) {
+     $$1 = $$eval(QT_TOOL.$${2}.binary)
+     isEmpty($$1) {
+         $$1 = $$[QT_EXTERNAL_HOST_BINS]/$$2
+-        isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
++        # for some reason isEmpty does not work here, FIXME before submitting upstream
++        # DEBUG 1: mkspecs/features/qt_functions.prf:198: calling built-in isEmpty(/OE/oe-core/tmp-eglibc/sysroots/x86_64-linux/usr/bin/qt5)
++        # DEBUG 1: mkspecs/features/qt_functions.prf:198: test function returned true
++        # DEBUG 1: mkspecs/features/qt_functions.prf:198: taking 'then' branch
++        !exists($$[QT_EXTERNAL_HOST_BINS]/$$2) {
+             $$1 = $$[QT_HOST_BINS]/$$2
+         }
+         exists($$eval($$1).pl) {
+diff --git a/mkspecs/features/qt_tool.prf b/mkspecs/features/qt_tool.prf
+index 83ef3a0..21c9eb7 100644
+--- a/mkspecs/features/qt_tool.prf
++++ b/mkspecs/features/qt_tool.prf
+@@ -15,8 +15,7 @@ CONFIG += console
+ 
+ # If we are doing a prefix build, create a "module" pri which enables
+ # qtPrepareTool() to work with the non-installed build.
+-# Non-bootstrapped tools always need this because of the environment setup.
+-!build_pass:if(!host_build|!force_bootstrap|force_independent):isEmpty($$[QT_EXTERNAL_HOST_BINS]) {
++!build_pass:if(!host_build|!force_bootstrap|force_independent):!exists($$[QT_EXTERNAL_HOST_BINS]) {
+     isEmpty(MODULE):MODULE = $$TARGET
+ 
+     !host_build|!force_bootstrap: MODULE_DEPENDS = $$replace(QT, -private$, )
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0005-qmake-is-already-built-in-qtbase-native.patch b/recipes-qt/qt5/qtbase-5.1.1/0005-qmake-is-already-built-in-qtbase-native.patch
new file mode 100644
index 0000000..1f5b62d
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0005-qmake-is-already-built-in-qtbase-native.patch
@@ -0,0 +1,30 @@
+From 777d4bfc7a94256ec46f61bd80bc6058cdf55ebb Mon Sep 17 00:00:00 2001
+From: Michael Krelin <hacker@klever.net>
+Date: Mon, 29 Oct 2012 20:07:49 -0700
+Subject: [PATCH 05/22] qmake is already built in qtbase-native
+
+Ported from OE by: Yu Ke <ke.yu@intel.com>
+Upstream-Status: Inappropriate [configuration]
+
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@gmail.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/configure b/configure
+index 39a5deb..40f2b02 100755
+--- a/configure
++++ b/configure
+@@ -4014,7 +4014,7 @@ setBootstrapEvalVariable()
+ 
+ 
+ # build qmake
+-if true; then ###[ '!' -f "$outpath/bin/qmake" ];
++if false; then ###[ '!' -f "$outpath/bin/qmake" ];
+     echo "Creating qmake..."
+ 
+     mkdir -p "$outpath/qmake" || exit
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0005-qt_module-Fix-pkgconfig-replacement.patch b/recipes-qt/qt5/qtbase-5.1.1/0005-qt_module-Fix-pkgconfig-replacement.patch
new file mode 100644
index 0000000..0750b86
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0005-qt_module-Fix-pkgconfig-replacement.patch
@@ -0,0 +1,89 @@
+From 7999eeb3f2ab1150aa301ec26ae9bf0788d09c9e Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 27 Apr 2013 23:15:37 +0200
+Subject: [PATCH 05/14] qt_module: Fix pkgconfig replacement
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+* in situation like this:
+  QT_SYSROOT:/OE/oe-core/tmp-eglibc/sysroots/qemuarm
+  QT_INSTALL_LIBS:/OE/oe-core/tmp-eglibc/sysroots/qemuarm/usr/lib
+  QT_INSTALL_LIBS/raw:/usr/lib
+  QT_INSTALL_LIBS/get:/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/lib
+
+  I don't want the replacement like this:
+  sed
+    -e "s,/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/include,/usr/include/qt5,g"
+    -e "s,/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/lib,/usr/lib,g"
+    "../../lib/pkgconfig/Qt5Core.pc"
+    >"/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/image/OE/oe-core/tmp-eglibc/sysroots/qemuarm/usr/lib/pkgconfig/Qt5Core.pc"
+  because that way I'll end with -L/usr/lib in .pc file which is
+  cross-compile unfriendly, keeping ${libdir}/${includedir} works better
+  in my case
+
+* qt_module: Fix paths in .prl files
+* qmake does not prefix them with QT_SYSROOT when using them
+  so e.g. when building qtdeclarative we get -L/usr/lib to LINKAGE
+  variable, which is unsafe for cross-compilation
+* writting QT_SYSROOT in .prl files is dangerous for sstate when
+  builds are in different directories, so we need
+  SSTATE_SCAN_FILES += "*.pri *.prl"
+  to make them relocateble
+
+* fix paths in packageconfig files
+  This reverts parts of:
+
+  enable path replacement in installed prl files on all platforms
+
+  Task-number: QTBUG-33794
+  Change-Id: Id0d38715673b8a1c0c034e9c15783eb255c4315b
+  Reviewed-by: Joerg Bornemann <joerg.bornemann@digia.com>
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+Signed-off-by: Andreas Müller <schnitzeltony@googlemail.com>
+---
+ mkspecs/features/qt_module.prf | 20 +++++++++++++-------
+ 1 file changed, 13 insertions(+), 7 deletions(-)
+
+Index: qtbase-opensource-src-5.1.1/mkspecs/features/qt_module.prf
+===================================================================
+--- qtbase-opensource-src-5.1.1.orig/mkspecs/features/qt_module.prf	2014-04-18 00:43:38.000000000 +0000
++++ qtbase-opensource-src-5.1.1/mkspecs/features/qt_module.prf	2014-04-18 01:03:34.037245002 +0000
+@@ -140,18 +140,30 @@
+       rplbase = $$dirname(_QMAKE_SUPER_CACHE_)/[^/][^/]*
+    else: \
+       rplbase = $$MODULE_BASE_OUTDIR
+-   include_replace.match = $$rplbase/include
+-   include_replace.replace = $$[QT_INSTALL_HEADERS/raw]
++   pkgconfig_include_replace.match = $$rplbase/include
++   pkgconfig_include_replace.replace = "\$$\\{includedir}"
++   pkgconfig_include_replace.CONFIG = path
++   pkgconfig_lib_replace.match = $$rplbase/lib
++   pkgconfig_lib_replace.replace = "\$$\\{libdir}"
++   pkgconfig_lib_replace.CONFIG = path
+    lib_replace.match = $$rplbase/lib
+-   lib_replace.replace = $$QMAKE_PKGCONFIG_LIBDIR
+-   QMAKE_PKGCONFIG_INSTALL_REPLACE += include_replace lib_replace
+-   QMAKE_PRL_INSTALL_REPLACE += include_replace lib_replace
++   host_build: \
++       lib_replace.replace = $$[QT_HOST_LIBS]
++   else: \
++       lib_replace.replace = $$[QT_INSTALL_LIBS/raw]
++   lib_replace.CONFIG = path
++
++   lafile_replace.match = "-L$$[QT_INSTALL_LIBS/raw]"
++   lafile_replace.replace = ""
++   lafile_replace.CONFIG = path
++   QMAKE_PRL_INSTALL_REPLACE += lib_replace lafile_replace
++   QMAKE_PKGCONFIG_INSTALL_REPLACE += pkgconfig_include_replace pkgconfig_lib_replace
+ }
+ 
+ unix {
+    CONFIG += create_libtool explicitlib
+    QMAKE_LIBTOOL_LIBDIR = $$QMAKE_PKGCONFIG_LIBDIR
+-   QMAKE_LIBTOOL_INSTALL_REPLACE += include_replace lib_replace
++   QMAKE_LIBTOOL_INSTALL_REPLACE += lib_replace lafile_replace
+ }
+ 
+ unix|win32-g++* {
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0006-Allow-building-a-separate-qmake-for-the-target.patch b/recipes-qt/qt5/qtbase-5.1.1/0006-Allow-building-a-separate-qmake-for-the-target.patch
new file mode 100644
index 0000000..56b0fdd
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0006-Allow-building-a-separate-qmake-for-the-target.patch
@@ -0,0 +1,29 @@
+From c36477f621c7d682ee7140156127ad32e91a40ad Mon Sep 17 00:00:00 2001
+From: Paul Eggleton <paul.eggleton@linux.intel.com>
+Date: Mon, 29 Oct 2012 20:26:36 -0700
+Subject: [PATCH 06/22] Allow building a separate qmake for the target
+
+Upstream-Status: Inappropriate [config]
+
+Signed-off-by: Paul Eggleton <paul.eggleton@linux.intel.com>
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@gmail.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ qmake/qmake.pro | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/qmake/qmake.pro b/qmake/qmake.pro
+index a81d0cd..ed7aebf 100644
+--- a/qmake/qmake.pro
++++ b/qmake/qmake.pro
+@@ -8,6 +8,7 @@ CONFIG -= qt shared app_bundle uic
+ DEFINES += QT_BUILD_QMAKE QT_BOOTSTRAPPED \
+     PROEVALUATOR_FULL PROEVALUATOR_DEBUG
+ DESTDIR = ../bin/
++TARGET = qmake
+ 
+ OBJECTS_DIR = .
+ MOC_DIR = .
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch b/recipes-qt/qt5/qtbase-5.1.1/0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
new file mode 100644
index 0000000..00affb1
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch
@@ -0,0 +1,29 @@
+From c2cc1f9251953f680191c5cf53b019d5d480c79e Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 27 Apr 2013 22:33:33 +0200
+Subject: [PATCH 07/22] configureapp: Prefix default LIBDIRS and INCDIRS with
+ SYSROOT
+
+Upstream-Status: Pending
+---
+ tools/configure/configureapp.cpp | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
+index aed85ce..0575520 100644
+--- a/tools/configure/configureapp.cpp
++++ b/tools/configure/configureapp.cpp
+@@ -3111,8 +3111,8 @@ void Configure::generateQConfigPri()
+         configStream << "QT_HOST_CPU_FEATURES = " << dictionary["QT_HOST_CPU_FEATURES"] << endl;
+         if (dictionary.contains("XQMAKESPEC") && !dictionary["XQMAKESPEC"].startsWith("wince")) {
+             // FIXME: add detection
+-            configStream << "QMAKE_DEFAULT_LIBDIRS = /lib /usr/lib" << endl;
+-            configStream << "QMAKE_DEFAULT_INCDIRS = /usr/include /usr/local/include" << endl;
++            configStream << "QMAKE_DEFAULT_LIBDIRS = $$[QT_SYSROOT]/lib $$[QT_SYSROOT]/usr/lib" << endl;
++            configStream << "QMAKE_DEFAULT_INCDIRS = $$[QT_SYSROOT]/usr/include $$[QT_SYSROOT]/usr/local/include" << endl;
+         }
+         if (dictionary["QT_EDITION"].contains("OPENSOURCE"))
+             configStream << "QT_EDITION = " << QLatin1String("OpenSource") << endl;
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0008-qt_module-Fix-pkgconfig-replacement.patch b/recipes-qt/qt5/qtbase-5.1.1/0008-qt_module-Fix-pkgconfig-replacement.patch
new file mode 100644
index 0000000..dfc018f
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0008-qt_module-Fix-pkgconfig-replacement.patch
@@ -0,0 +1,70 @@
+From 0089c1ecba912aed6a8cd6126297300e0f7ffcb9 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 27 Apr 2013 23:15:37 +0200
+Subject: [PATCH 08/22] qt_module: Fix pkgconfig replacement
+
+* in situation like this:
+  QT_SYSROOT:/OE/oe-core/tmp-eglibc/sysroots/qemuarm
+  QT_INSTALL_LIBS:/OE/oe-core/tmp-eglibc/sysroots/qemuarm/usr/lib
+  QT_INSTALL_LIBS/raw:/usr/lib
+  QT_INSTALL_LIBS/get:/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/lib
+
+  I don't want the replacement like this:
+  sed
+    -e "s,/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/include,/usr/include/qt5,g"
+    -e "s,/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/build/lib,/usr/lib,g"
+    "../../lib/pkgconfig/Qt5Core.pc"
+    >"/OE/oe-core/tmp-eglibc/work/armv5te-oe-linux-gnueabi/qtbase/5.0.0-r0.0/image/OE/oe-core/tmp-eglibc/sysroots/qemuarm/usr/lib/pkgconfig/Qt5Core.pc"
+  because that way I'll end with -L/usr/lib in .pc file which is
+  cross-compile unfriendly, keeping ${libdir}/${includedir} works better
+  in my case
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ mkspecs/features/qt_module.prf | 20 ++++++++++++++++----
+ 1 file changed, 16 insertions(+), 4 deletions(-)
+
+diff --git a/mkspecs/features/qt_module.prf b/mkspecs/features/qt_module.prf
+index 390fb49..e85c2a8 100644
+--- a/mkspecs/features/qt_module.prf
++++ b/mkspecs/features/qt_module.prf
+@@ -140,18 +140,30 @@ unix|win32-g++* {
+       rplbase = $$dirname(_QMAKE_SUPER_CACHE_)/[^/][^/]*
+    else: \
+       rplbase = $$MODULE_BASE_OUTDIR
++   pkgconfig_include_replace.match = $$rplbase/include
++   pkgconfig_include_replace.replace = "\$$\\{includedir}"
++   pkgconfig_lib_replace.match = $$rplbase/lib
++   pkgconfig_lib_replace.replace = "\$$\\{libdir}"
+    include_replace.match = $$rplbase/include
+    include_replace.replace = $$[QT_INSTALL_HEADERS/raw]
+    lib_replace.match = $$rplbase/lib
+-   lib_replace.replace = $$QMAKE_PKGCONFIG_LIBDIR
+-   QMAKE_PKGCONFIG_INSTALL_REPLACE += include_replace lib_replace
++   lib_replace.replace = $$[QT_INSTALL_LIBS/raw]
++   lafile_replace.match = $$rplbase
++   lafile_replace.replace = "=$$[QT_INSTALL_PREFIX/raw]"
++
++   !isEmpty(SYSROOT): \
++      rplbase = $$[SYSROOT] \
++      lafile_replace.match = $$rplbase \
++      lafile_replace.replace = "=" \
++
++   QMAKE_PKGCONFIG_INSTALL_REPLACE += pkgconfig_include_replace pkgconfig_lib_replace
+    QMAKE_PRL_INSTALL_REPLACE += include_replace lib_replace
+ }
+ 
+ unix {
+    CONFIG += create_libtool explicitlib
+-   QMAKE_LIBTOOL_LIBDIR = $$QMAKE_PKGCONFIG_LIBDIR
+-   QMAKE_LIBTOOL_INSTALL_REPLACE += include_replace lib_replace
++   QMAKE_LIBTOOL_LIBDIR = $$[QT_INSTALL_LIBS/raw]
++   QMAKE_LIBTOOL_INSTALL_REPLACE += include_replace lib_replace lafile_replace
+ }
+ 
+ unix|win32-g++* {
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0009-qt_module-Fix-paths-in-.prl-files.patch b/recipes-qt/qt5/qtbase-5.1.1/0009-qt_module-Fix-paths-in-.prl-files.patch
new file mode 100644
index 0000000..5c8f818
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0009-qt_module-Fix-paths-in-.prl-files.patch
@@ -0,0 +1,62 @@
+From d4f6f5afa36d87d991051f0079f129d2682455d9 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sun, 28 Apr 2013 12:56:55 +0200
+Subject: [PATCH 09/22] qt_module: Fix paths in .prl files
+
+* qmake does not prefix them with QT_SYSROOT when using them
+  so e.g. when building qtdeclarative we get -L/usr/lib to LINKAGE
+  variable, which is unsafe for cross-compilation
+* writting QT_SYSROOT in .prl files is dangerous for sstate when
+  builds are in different directories, so we need
+  SSTATE_SCAN_FILES += "*.pri *.prl"
+  to make them relocateble
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ mkspecs/features/qt_module.prf | 28 +++++++++++++++++-----------
+ 1 file changed, 17 insertions(+), 11 deletions(-)
+
+diff --git a/mkspecs/features/qt_module.prf b/mkspecs/features/qt_module.prf
+index e85c2a8..7fcfcfe 100644
+--- a/mkspecs/features/qt_module.prf
++++ b/mkspecs/features/qt_module.prf
+@@ -144,17 +144,23 @@ unix|win32-g++* {
+    pkgconfig_include_replace.replace = "\$$\\{includedir}"
+    pkgconfig_lib_replace.match = $$rplbase/lib
+    pkgconfig_lib_replace.replace = "\$$\\{libdir}"
+-   include_replace.match = $$rplbase/include
+-   include_replace.replace = $$[QT_INSTALL_HEADERS/raw]
+-   lib_replace.match = $$rplbase/lib
+-   lib_replace.replace = $$[QT_INSTALL_LIBS/raw]
+-   lafile_replace.match = $$rplbase
+-   lafile_replace.replace = "=$$[QT_INSTALL_PREFIX/raw]"
+-
+-   !isEmpty(SYSROOT): \
+-      rplbase = $$[SYSROOT] \
+-      lafile_replace.match = $$rplbase \
+-      lafile_replace.replace = "=" \
++   !exists($$[QT_SYSROOT]) {
++      include_replace.match = $$rplbase/include
++      include_replace.replace = $$[QT_INSTALL_HEADERS/raw]
++      lib_replace.match = $$rplbase/lib
++      lib_replace.replace = $$[QT_INSTALL_LIBS/raw]
++      lafile_replace.match = $$rplbase
++      lafile_replace.replace = "$$[QT_INSTALL_PREFIX/raw]"
++   } else {
++      # include_replace and lib_replace are duplicate, but we don't want to
++      # make QMAKE_PKGCONFIG_INSTALL_REPLACE, QMAKE_PRL_INSTALL_REPLACE conditional
++      include_replace.match = $$rplbase
++      include_replace.replace = $$[QT_SYSROOT]$$[QT_INSTALL_PREFIX/raw]
++      lib_replace.match = $$rplbase
++      lib_replace.replace = $$[QT_SYSROOT]$$[QT_INSTALL_PREFIX/raw]
++      lafile_replace.match = $$rplbase
++      lafile_replace.replace = "=$$[QT_INSTALL_PREFIX/raw]"
++   }
+ 
+    QMAKE_PKGCONFIG_INSTALL_REPLACE += pkgconfig_include_replace pkgconfig_lib_replace
+    QMAKE_PRL_INSTALL_REPLACE += include_replace lib_replace
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0010-Always-build-uic.patch b/recipes-qt/qt5/qtbase-5.1.1/0010-Always-build-uic.patch
new file mode 100644
index 0000000..c064d30
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0010-Always-build-uic.patch
@@ -0,0 +1,28 @@
+From 8a10c6d053fe438aec007e4a73b60ac59716ccd4 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 16 Nov 2013 00:32:30 +0100
+Subject: [PATCH 10/12] Always build uic
+
+Even if we are not building gui or widgets. This tool is needed later
+as a native tool when compiling the target.
+
+Change-Id: I257668ac28c22b192e7ec7736e6c23fa3be6bab6
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/src.pro | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+Index: qtbase-opensource-src-5.1.1/src/src.pro
+===================================================================
+--- qtbase-opensource-src-5.1.1.orig/src/src.pro	2014-04-18 00:43:36.000000000 +0000
++++ qtbase-opensource-src-5.1.1/src/src.pro	2014-04-18 01:04:40.065245001 +0000
+@@ -134,7 +134,7 @@
+         }
+     }
+ }
+-SUBDIRS += src_plugins src_tools_qdoc
++SUBDIRS += src_plugins src_tools_qdoc src_tools_uic
+ 
+ nacl: SUBDIRS -= src_network src_testlib
+ 
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0010-wayland-scanner-disable-silent-rules.patch b/recipes-qt/qt5/qtbase-5.1.1/0010-wayland-scanner-disable-silent-rules.patch
new file mode 100644
index 0000000..a91c9ed
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0010-wayland-scanner-disable-silent-rules.patch
@@ -0,0 +1,82 @@
+From 9a2219a25247b76de6524d358211b55467305d11 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sun, 5 May 2013 11:18:34 +0200
+Subject: [PATCH 10/22] wayland-scanner: disable silent rules
+
+* for some reason "$$qtwayland-server-header.commands" on second line gets expanded as -server-header.commands
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ mkspecs/features/wayland-scanner.prf | 14 +++++++-------
+ 1 file changed, 7 insertions(+), 7 deletions(-)
+
+diff --git a/mkspecs/features/wayland-scanner.prf b/mkspecs/features/wayland-scanner.prf
+index b2eca41..46da374 100644
+--- a/mkspecs/features/wayland-scanner.prf
++++ b/mkspecs/features/wayland-scanner.prf
+@@ -10,7 +10,7 @@ wayland_server_header.input = WAYLANDSERVERSOURCES
+ wayland_server_header.variable_out = HEADERS
+ wayland_server_header.output = wayland-${QMAKE_FILE_BASE}-server-protocol$${first(QMAKE_EXT_H)}
+ wayland_server_header.commands = $$QMAKE_WAYLAND_SCANNER server-header < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:wayland_server_header.commands = @echo Wayland server header ${QMAKE_FILE_IN} && $$wayland_server_header.commands
++#silent:wayland_server_header.commands = @echo Wayland server header ${QMAKE_FILE_IN} && $$wayland_server_header.commands
+ QMAKE_EXTRA_COMPILERS += wayland_server_header
+ 
+ wayland_client_header.name = wayland ${QMAKE_FILE_BASE}
+@@ -18,7 +18,7 @@ wayland_client_header.input = WAYLANDCLIENTSOURCES
+ wayland_client_header.variable_out = HEADERS
+ wayland_client_header.output = wayland-${QMAKE_FILE_BASE}-client-protocol$${first(QMAKE_EXT_H)}
+ wayland_client_header.commands = $$QMAKE_WAYLAND_SCANNER client-header < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:wayland_client_header.commands = @echo Wayland client header ${QMAKE_FILE_IN} && $$wayland_client_header.commands
++#silent:wayland_client_header.commands = @echo Wayland client header ${QMAKE_FILE_IN} && $$wayland_client_header.commands
+ QMAKE_EXTRA_COMPILERS += wayland_client_header
+ 
+ wayland_code.name = wayland ${QMAKE_FILE_BASE}
+@@ -26,7 +26,7 @@ wayland_code.input = WAYLANDCLIENTSOURCES WAYLANDSERVERSOURCES
+ wayland_code.variable_out = SOURCES
+ wayland_code.output = wayland-${QMAKE_FILE_BASE}-protocol.c
+ wayland_code.commands = $$QMAKE_WAYLAND_SCANNER code < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:wayland_code.commands = @echo Wayland code header ${QMAKE_FILE_IN} && $$wayland_code.commands
++#silent:wayland_code.commands = @echo Wayland code header ${QMAKE_FILE_IN} && $$wayland_code.commands
+ QMAKE_EXTRA_COMPILERS += wayland_code
+ 
+ qtPrepareTool(QMAKE_QTWAYLANDSCANNER, qtwaylandscanner)
+@@ -37,7 +37,7 @@ qtwayland_client_header.variable_out = HEADERS
+ qtwayland_client_header.depends = wayland-${QMAKE_FILE_BASE}-client-protocol$${first(QMAKE_EXT_H)}
+ qtwayland_client_header.output = qwayland-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
+ qtwayland_client_header.commands = $$QMAKE_QTWAYLANDSCANNER client-header ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:qtwayland_client_header.commands = @echo QtWayland client header ${QMAKE_FILE_IN} && $$qtwayland_client_header.commands
++#silent:qtwayland_client_header.commands = @echo QtWayland client header ${QMAKE_FILE_IN} && $$qtwayland_client_header.commands
+ QMAKE_EXTRA_COMPILERS += qtwayland_client_header
+ 
+ qtwayland_client_code.name = qtwayland ${QMAKE_FILE_BASE}
+@@ -46,7 +46,7 @@ qtwayland_client_code.variable_out = SOURCES
+ qtwayland_client_code.depends = qwayland-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
+ qtwayland_client_code.output = qwayland-${QMAKE_FILE_BASE}.cpp
+ qtwayland_client_code.commands = $$QMAKE_QTWAYLANDSCANNER client-code ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:qtwayland_client_code.commands = @echo QtWayland client code ${QMAKE_FILE_IN} && $$qtwayland_client_code.commands
++#silent:qtwayland_client_code.commands = @echo QtWayland client code ${QMAKE_FILE_IN} && $$qtwayland_client_code.commands
+ QMAKE_EXTRA_COMPILERS += qtwayland_client_code
+ 
+ qtwayland_server_header.name = qtwayland ${QMAKE_FILE_BASE}
+@@ -55,7 +55,7 @@ qtwayland_server_header.variable_out = HEADERS
+ qtwayland_server_header.depends = wayland-${QMAKE_FILE_BASE}-server-protocol$${first(QMAKE_EXT_H)}
+ qtwayland_server_header.output = qwayland-server-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
+ qtwayland_server_header.commands = $$QMAKE_QTWAYLANDSCANNER server-header ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:qtwayland_server_header.commands = @echo QtWayland server header ${QMAKE_FILE_IN} && $$qtwayland_server_header.commands
++#silent:qtwayland_server_header.commands = @echo QtWayland server header ${QMAKE_FILE_IN} && $$qtwayland_server_header.commands
+ QMAKE_EXTRA_COMPILERS += qtwayland_server_header
+ 
+ qtwayland_server_code.name = qtwayland ${QMAKE_FILE_BASE}
+@@ -64,5 +64,5 @@ qtwayland_server_code.variable_out = SOURCES
+ qtwayland_server_code.depends = qwayland-server-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
+ qtwayland_server_code.output = qwayland-server-${QMAKE_FILE_BASE}.cpp
+ qtwayland_server_code.commands = $$QMAKE_QTWAYLANDSCANNER server-code ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
+-silent:qtwayland_server_code.commands = @echo QtWayland server code ${QMAKE_FILE_IN} && $$qtwayland_server_code.commands
++#silent:qtwayland_server_code.commands = @echo QtWayland server code ${QMAKE_FILE_IN} && $$qtwayland_server_code.commands
+ QMAKE_EXTRA_COMPILERS += qtwayland_server_code
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0011-Allow-building-a-separate-qmake-for-the-target.patch b/recipes-qt/qt5/qtbase-5.1.1/0011-Allow-building-a-separate-qmake-for-the-target.patch
new file mode 100644
index 0000000..b841c7d
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0011-Allow-building-a-separate-qmake-for-the-target.patch
@@ -0,0 +1,26 @@
+From dd14f3eda61669c66c95dbcbca3afbd61f9aa746 Mon Sep 17 00:00:00 2001
+From: Paul Eggleton <paul.eggleton@linux.intel.com>
+Date: Mon, 29 Oct 2012 20:26:36 -0700
+Subject: [PATCH 11/14] Allow building a separate qmake for the target
+
+Upstream-Status: Inappropriate [config]
+
+Signed-off-by: Paul Eggleton <paul.eggleton@linux.intel.com>
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@gmail.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ qmake/qmake.pro | 2 ++
+ 1 file changed, 2 insertions(+)
+
+Index: qtbase-opensource-src-5.1.1/qmake/qmake.pro
+===================================================================
+--- qtbase-opensource-src-5.1.1.orig/qmake/qmake.pro	2014-04-18 00:52:32.000000000 +0000
++++ qtbase-opensource-src-5.1.1/qmake/qmake.pro	2014-04-18 01:08:02.253245140 +0000
+@@ -8,6 +8,7 @@
+ DEFINES += QT_BUILD_QMAKE QT_BOOTSTRAPPED \
+     PROEVALUATOR_FULL PROEVALUATOR_DEBUG
+ DESTDIR = ../bin/
++TARGET = qmake
+ 
+ OBJECTS_DIR = .
+ MOC_DIR = .
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch b/recipes-qt/qt5/qtbase-5.1.1/0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch
new file mode 100644
index 0000000..bea83a8
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch
@@ -0,0 +1,44 @@
+From 05fc8b21f40d2e6bc35fa717ea340ef26f922d32 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Wed, 8 May 2013 23:54:35 +0200
+Subject: [PATCH 11/22] configure: don't export SYSTEM_VARIABLES to .qmake.vars
+
+* linux-oe-g++ should handle this correctly and exporting LD as QMAKE_LINK is
+  causing issues as we need g++ to be used as linker
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 15 +--------------
+ 1 file changed, 1 insertion(+), 14 deletions(-)
+
+diff --git a/configure b/configure
+index 40f2b02..11c11c4 100755
+--- a/configure
++++ b/configure
+@@ -849,20 +849,7 @@ fi'`
+ done
+ 
+ SYSTEM_VARIABLES="RANLIB STRIP OBJDUMP LD CC CXX CFLAGS CXXFLAGS LDFLAGS"
+-for varname in $SYSTEM_VARIABLES; do
+-    qmakevarname="${varname}"
+-    # use LDFLAGS for autoconf compat, but qmake uses QMAKE_LFLAGS
+-    if [ "${varname}" = "LDFLAGS" ]; then
+-        qmakevarname="LFLAGS"
+-    elif [ "${varname}" = "LD" ]; then
+-        qmakevarname="LINK"
+-    fi
+-    cmd=`echo \
+-'if [ -n "\$'${varname}'" ]; then
+-    QMakeVar set QMAKE_'${qmakevarname}' "\$'${varname}'"
+-fi'`
+-    eval "$cmd"
+-done
++
+ # Use CC/CXX to run config.tests
+ mkdir -p "$outpath/config.tests"
+ rm -f "$outpath/config.tests/.qmake.cache"
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch b/recipes-qt/qt5/qtbase-5.1.1/0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch
new file mode 100644
index 0000000..b6c3ae3
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch
@@ -0,0 +1,37 @@
+From b4f8c636cb265951979868a65006ce49f442e5e7 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Thu, 9 May 2013 10:06:50 +0200
+Subject: [PATCH 12/22] configure.prf: Allow to add extra arguments to make
+
+* sometimes we would like to add -e or define some variable and respect it from both
+  Makefiles used in configure tests and also Makefiles to build the application
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ mkspecs/features/configure.prf | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/mkspecs/features/configure.prf b/mkspecs/features/configure.prf
+index b4569df..d189e50 100644
+--- a/mkspecs/features/configure.prf
++++ b/mkspecs/features/configure.prf
+@@ -57,12 +57,12 @@ defineTest(qtCompileTest) {
+     qmake_configs = "\"CONFIG -= qt debug_and_release app_bundle lib_bundle\""
+ 
+     # Clean up after previous run
+-    exists($$test_out_dir/Makefile):qtRunLoggedCommand("$$test_cmd_base $$QMAKE_MAKE distclean")
++    exists($$test_out_dir/Makefile):qtRunLoggedCommand("$$test_cmd_base $$QMAKE_MAKE $$(QMAKE_MAKE_ARGS) distclean")
+ 
+     mkpath($$test_out_dir)|error("Aborting.")
+ 
+     qtRunLoggedCommand("$$test_cmd_base $$system_quote($$system_path($$QMAKE_QMAKE)) $$qmake_configs $$shell_quote($$test_dir)") {
+-        qtRunLoggedCommand("$$test_cmd_base $$QMAKE_MAKE") {
++        qtRunLoggedCommand("$$test_cmd_base $$QMAKE_MAKE $$(QMAKE_MAKE_ARGS)") {
+             log("yes$$escape_expand(\\n)")
+             msg = "test $$1 succeeded"
+             write_file($$QMAKE_CONFIG_LOG, msg, append)
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0013-Disable-mkv8snapshot.patch b/recipes-qt/qt5/qtbase-5.1.1/0013-Disable-mkv8snapshot.patch
new file mode 100644
index 0000000..2c4fa20
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0013-Disable-mkv8snapshot.patch
@@ -0,0 +1,47 @@
+From 70669010c6f8a541db6f87f96aee3ff50ec8483f Mon Sep 17 00:00:00 2001
+From: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Date: Tue, 8 Jan 2013 15:58:29 -0800
+Subject: [PATCH 13/22] Disable mkv8snapshot
+
+It seems to generate code that throws SIGILL, so disabling it
+
+Program received signal SIGILL, Illegal instruction.
+0x26312c60 in ?? ()
+(gdb) bt
+    function=..., receiver=..., argc=1978934572, args=0x7efff254,
+    has_pending_exception=0x7efff277, qml=...)
+    at ../3rdparty/v8/src/execution.cc:125
+    argc=1, argv=0x7efff254, pending_exception=0x7efff277,
+    convert_receiver=false, qml=...) at ../3rdparty/v8/src/execution.cc:194
+    receiver=<optimized out>, argc=<optimized out>, argv=<optimized out>,
+    pending_exception=0x7efff277, convert_receiver=false)
+    at ../3rdparty/v8/src/execution.cc:161
+    data=<optimized out>, exc=0x7efff277)
+    at ../3rdparty/v8/src/execution.cc:734
+    at ../3rdparty/v8/src/api.cc:4742
+    at qml/v8/qv8contextwrapper.cpp:155
+    ownership=<optimized out>) at qml/v8/qv8engine.cpp:155
+    parent=<optimized out>) at qml/v8/qjsengine.cpp:192
+
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/configure b/configure
+index 11c11c4..521e374 100755
+--- a/configure
++++ b/configure
+@@ -910,7 +910,7 @@ CFG_SKIP_MODULES=""
+ CFG_COMPILE_EXAMPLES=yes
+ CFG_RELEASE_QMAKE=no
+ CFG_AUDIO_BACKEND=auto
+-CFG_V8SNAPSHOT=auto
++CFG_V8SNAPSHOT=no
+ CFG_QML_DEBUG=yes
+ CFG_JAVASCRIPTCORE_JIT=auto
+ CFG_PKGCONFIG=auto
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0014-eglfs-fix-egl-error-for-platforms-only-supporting-on.patch b/recipes-qt/qt5/qtbase-5.1.1/0014-eglfs-fix-egl-error-for-platforms-only-supporting-on.patch
new file mode 100644
index 0000000..accfbb3
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0014-eglfs-fix-egl-error-for-platforms-only-supporting-on.patch
@@ -0,0 +1,59 @@
+From c8995c6eb6cf4bfa8daf1e3e96bd4885a096f405 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@googlemail.com>
+Date: Wed, 5 Feb 2014 18:35:08 +0100
+Subject: [PATCH 14/14] eglfs: fix egl error for platforms only supporting one
+ window/surface
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+running qmlscene -platform eglfs <filename>.qml
+
+caused
+
+EGL Error : Could not create the egl surface: error = 0x3003
+
+Rebased version of [1-2]
+
+Upstream-Status: unknown
+
+[1] http://repository.timesys.com/buildsources/q/qt-everywhere-opensource/qt-everywhere-opensource-5.1.1/qt-everywhere-opensource-5.1.1-qeglfswindow.cpp.patch
+[2] https://github.com/prabindh/qt-configs/blob/master/qt5_1.0_Feb13/qeglfswindow.cpp.patch
+
+Signed-off-by: Andreas Müller <schnitzeltony@googlemail.com>
+---
+ src/plugins/platforms/eglfs/qeglfswindow.cpp | 15 +++++++++++++++
+ 1 file changed, 15 insertions(+)
+
+Index: qtbase-opensource-src-5.1.1/src/plugins/platforms/eglfs/qeglfswindow.cpp
+===================================================================
+--- qtbase-opensource-src-5.1.1.orig/src/plugins/platforms/eglfs/qeglfswindow.cpp	2014-04-18 00:52:31.000000000 +0000
++++ qtbase-opensource-src-5.1.1/src/plugins/platforms/eglfs/qeglfswindow.cpp	2014-04-18 01:16:55.369244034 +0000
+@@ -70,7 +70,15 @@
+ {
+     if (m_window)
+         return;
+-
++    static EGLSurface __singleWindowSurface;
++    if(hooks && !hooks->hasCapability(QPlatformIntegration::Capability::MultipleWindows) && (__singleWindowSurface))
++    {
++        m_surface = __singleWindowSurface;
++#ifdef QEGL_EXTRA_DEBUG
++    qWarning("Surface recreate request, re-using %x\n", m_surface);
++#endif
++	return;
++    }
+     setWindowState(Qt::WindowFullScreen);
+ 
+     if (window()->type() == Qt::Desktop) {
+@@ -109,6 +117,10 @@
+         eglTerminate(display);
+         qFatal("EGL Error : Could not create the egl surface: error = 0x%x\n", error);
+     }
++    if(hooks && !hooks->hasCapability(QPlatformIntegration::Capability::MultipleWindows))
++    {
++        __singleWindowSurface = m_surface;
++    }
+ }
+ 
+ void QEglFSWindow::destroy()
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0014-enables-tslib-device-to-be-read-from-env-variable.patch b/recipes-qt/qt5/qtbase-5.1.1/0014-enables-tslib-device-to-be-read-from-env-variable.patch
new file mode 100644
index 0000000..56b4a66
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0014-enables-tslib-device-to-be-read-from-env-variable.patch
@@ -0,0 +1,35 @@
+From 3642ea2f7eff14c0835385f28a13514b806eba32 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Eric=20B=C3=A9nard?= <eric@eukrea.com>
+Date: Mon, 27 May 2013 18:32:37 +0200
+Subject: [PATCH 14/22] enables tslib device to be read from env variable
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+from :
+https://github.com/prabindh/qt-configs/blob/master/qt5_1.0_Feb13/tslib.patch
+
+Signed-off-by: Eric Bénard <eric@eukrea.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/plugins/generic/tslib/qtslib.cpp | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/src/plugins/generic/tslib/qtslib.cpp b/src/plugins/generic/tslib/qtslib.cpp
+index 6986fd5..2ed4a69 100644
+--- a/src/plugins/generic/tslib/qtslib.cpp
++++ b/src/plugins/generic/tslib/qtslib.cpp
+@@ -64,7 +64,9 @@ QTsLibMouseHandler::QTsLibMouseHandler(const QString &key,
+     qDebug() << "QTsLibMouseHandler" << key << specification;
+     setObjectName(QLatin1String("TSLib Mouse Handler"));
+ 
+-    QByteArray device = "/dev/input/event1";
++    QByteArray device = qgetenv("TSLIB_TSDEVICE");
++    if(device.isEmpty())
++       device = "/dev/input/event1";
+     if (specification.startsWith("/dev/"))
+         device = specification.toLocal8Bit();
+ 
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0015-qtbase-allow-build-of-examples.patch b/recipes-qt/qt5/qtbase-5.1.1/0015-qtbase-allow-build-of-examples.patch
new file mode 100644
index 0000000..59c9466
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0015-qtbase-allow-build-of-examples.patch
@@ -0,0 +1,48 @@
+From 52172f09d646949c32f7b70188f1ffc779adbdef Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Eric=20B=C3=A9nard?= <eric@eukrea.com>
+Date: Sat, 25 May 2013 17:34:32 +0200
+Subject: [PATCH 15/22] qtbase: allow build of examples
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+this revert the following commit :
+
+commit 2b397f985e4ef6ae5c0571a928bb1320fb048c61
+Author: Oswald Buddenhagen <oswald.buddenhagen@digia.com>
+Date:   Fri Dec 21 19:36:12 2012 +0100
+
+    do not actually build examples in production builds
+
+    -developer-build enables an actual build of examples, based on the
+    assumption that developers want to test it (it can be still disabled
+    with -nomake examples). regular users otoh want only the examples
+    sources installed.
+
+    Change-Id: Ifc6a108099929175a3960480802b271a758fdd38
+    Reviewed-by: Joerg Bornemann <joerg.bornemann@digia.com>
+
+Signed-off-by: Eric Bénard <eric@eukrea.com>
+---
+ mkspecs/features/qt_example_installs.prf | 7 -------
+ 1 file changed, 7 deletions(-)
+
+diff --git a/mkspecs/features/qt_example_installs.prf b/mkspecs/features/qt_example_installs.prf
+index 2db752c..ca1b0c7 100644
+--- a/mkspecs/features/qt_example_installs.prf
++++ b/mkspecs/features/qt_example_installs.prf
+@@ -92,11 +92,4 @@ probase = $$relative_path($$_PRO_FILE_PWD_, $$dirname(_QMAKE_CONF_)/examples)
+         allfiles -= doc
+         !isEmpty(allfiles): warning("remaining files in $$_PRO_FILE_PWD_: $$allfiles")
+     }
+-
+-    !equals(TEMPLATE, subdirs):!compile_examples {
+-        TEMPLATE = aux
+-        CONFIG -= have_target qt staticlib dll
+-        SOURCES =
+-        INSTALLS -= target
+-    }
+ }
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0018-QOpenGLPaintDevice-sub-area-support.patch b/recipes-qt/qt5/qtbase-5.1.1/0018-QOpenGLPaintDevice-sub-area-support.patch
new file mode 100644
index 0000000..add3e25
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0018-QOpenGLPaintDevice-sub-area-support.patch
@@ -0,0 +1,154 @@
+From cc2bdb0bbbbeb4eb630d82b7274d13922eb06da2 Mon Sep 17 00:00:00 2001
+From: Jani Hautakangas <jani.hautakangas@ixonos.com>
+Date: Thu, 16 May 2013 09:52:07 +0300
+Subject: [PATCH 16/22] QOpenGLPaintDevice sub-area support
+
+Allows creating QOpenGLPaintDevice targetting sub-area
+of binded framebuffer.
+
+Upstream-Status: Pending
+
+Change-Id: Ida2f079aa1ac0b87d36b54129e226399dbcdda80
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/gui/opengl/qopenglpaintdevice.cpp       | 12 ++++++++++++
+ src/gui/opengl/qopenglpaintdevice.h         |  2 ++
+ src/gui/opengl/qopenglpaintengine.cpp       | 10 +++++++---
+ src/gui/opengl/qopenglpaintengine_p.h       |  1 +
+ src/gui/opengl/qopengltextureglyphcache.cpp |  2 +-
+ 5 files changed, 23 insertions(+), 4 deletions(-)
+
+diff --git a/src/gui/opengl/qopenglpaintdevice.cpp b/src/gui/opengl/qopenglpaintdevice.cpp
+index f0e7e49..fe9a30c 100644
+--- a/src/gui/opengl/qopenglpaintdevice.cpp
++++ b/src/gui/opengl/qopenglpaintdevice.cpp
+@@ -111,6 +111,7 @@ class QOpenGLPaintDevicePrivate
+ public:
+     QOpenGLPaintDevicePrivate(const QSize &size);
+ 
++    QPoint offset;
+     QSize size;
+     QOpenGLContext *ctx;
+ 
+@@ -159,6 +160,12 @@ QOpenGLPaintDevice::QOpenGLPaintDevice(int width, int height)
+ {
+ }
+ 
++QOpenGLPaintDevice::QOpenGLPaintDevice(int x, int y, int width, int height)
++    : d_ptr(new QOpenGLPaintDevicePrivate(QSize(width, height)))
++{
++    d_ptr->offset = QPoint(x,y);
++}
++
+ /*!
+     Destroys the QOpenGLPaintDevice.
+ */
+@@ -228,6 +235,11 @@ QOpenGLContext *QOpenGLPaintDevice::context() const
+     return d_ptr->ctx;
+ }
+ 
++QPoint QOpenGLPaintDevice::offset() const
++{
++    return d_ptr->offset;
++}
++
+ /*!
+     Returns the pixel size of the paint device.
+ 
+diff --git a/src/gui/opengl/qopenglpaintdevice.h b/src/gui/opengl/qopenglpaintdevice.h
+index c05571c..01eb1bc 100644
+--- a/src/gui/opengl/qopenglpaintdevice.h
++++ b/src/gui/opengl/qopenglpaintdevice.h
+@@ -62,12 +62,14 @@ public:
+     QOpenGLPaintDevice();
+     explicit QOpenGLPaintDevice(const QSize &size);
+     QOpenGLPaintDevice(int width, int height);
++    QOpenGLPaintDevice(int x, int y, int width, int height);
+     virtual ~QOpenGLPaintDevice();
+ 
+     int devType() const { return QInternal::OpenGL; }
+     QPaintEngine *paintEngine() const;
+ 
+     QOpenGLContext *context() const;
++    QPoint offset() const;
+     QSize size() const;
+     void setSize(const QSize &size);
+     void setDevicePixelRatio(qreal devicePixelRatio);
+diff --git a/src/gui/opengl/qopenglpaintengine.cpp b/src/gui/opengl/qopenglpaintengine.cpp
+index 78f5080..20db620 100644
+--- a/src/gui/opengl/qopenglpaintengine.cpp
++++ b/src/gui/opengl/qopenglpaintengine.cpp
+@@ -2004,7 +2004,10 @@ bool QOpenGL2PaintEngineEx::begin(QPaintDevice *pdev)
+     for (int i = 0; i < QT_GL_VERTEX_ARRAY_TRACKED_COUNT; ++i)
+         d->vertexAttributeArraysEnabledState[i] = false;
+ 
++    const QPoint offset = d->device->offset();
+     const QSize sz = d->device->size();
++    d->x = offset.x();
++    d->y = offset.y();
+     d->width = sz.width();
+     d->height = sz.height();
+     d->mode = BrushDrawingMode;
+@@ -2092,7 +2095,7 @@ void QOpenGL2PaintEngineEx::ensureActive()
+         d->device->ensureActiveTarget();
+ 
+         d->transferMode(BrushDrawingMode);
+-        glViewport(0, 0, d->width, d->height);
++        glViewport(d->x, d->y, d->width, d->height);
+         d->needsSync = false;
+         d->lastMaskTextureUsed = 0;
+         d->shaderManager->setDirty();
+@@ -2135,6 +2138,7 @@ void QOpenGL2PaintEngineExPrivate::updateClipScissorTest()
+     if (bounds == QRect(0, 0, width, height)) {
+         glDisable(GL_SCISSOR_TEST);
+     } else {
++        bounds = QRect(bounds.x(), bounds.y(), bounds.width(), bounds.height());
+         glEnable(GL_SCISSOR_TEST);
+         setScissor(bounds);
+     }
+@@ -2143,14 +2147,14 @@ void QOpenGL2PaintEngineExPrivate::updateClipScissorTest()
+ 
+ void QOpenGL2PaintEngineExPrivate::setScissor(const QRect &rect)
+ {
+-    const int left = rect.left();
++    const int left = rect.left() + x;
+     const int width = rect.width();
+     int bottom = height - (rect.top() + rect.height());
+     if (device->paintFlipped()) {
+         bottom = rect.top();
+     }
++    bottom += y;
+     const int height = rect.height();
+-
+     glScissor(left, bottom, width, height);
+ }
+ 
+diff --git a/src/gui/opengl/qopenglpaintengine_p.h b/src/gui/opengl/qopenglpaintengine_p.h
+index d51f0e5..0d4b38d 100644
+--- a/src/gui/opengl/qopenglpaintengine_p.h
++++ b/src/gui/opengl/qopenglpaintengine_p.h
+@@ -264,6 +264,7 @@ public:
+     QOpenGL2PaintEngineEx* q;
+     QOpenGLEngineShaderManager* shaderManager;
+     QOpenGLPaintDevice* device;
++    int x, y;
+     int width, height;
+     QOpenGLContext *ctx;
+     EngineMode mode;
+diff --git a/src/gui/opengl/qopengltextureglyphcache.cpp b/src/gui/opengl/qopengltextureglyphcache.cpp
+index 7d49c03..d9eb3fe 100644
+--- a/src/gui/opengl/qopengltextureglyphcache.cpp
++++ b/src/gui/opengl/qopengltextureglyphcache.cpp
+@@ -271,7 +271,7 @@ void QOpenGLTextureGlyphCache::resizeTextureData(int width, int height)
+     funcs.glBindFramebuffer(GL_FRAMEBUFFER, (GLuint)oldFbo);
+ 
+     if (pex != 0) {
+-        glViewport(0, 0, pex->width, pex->height);
++        glViewport(pex->x, pex->y, pex->width, pex->height);
+         pex->updateClipScissorTest();
+     } else {
+         m_blitProgram->disableAttributeArray(int(QT_VERTEX_COORDS_ATTR));
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0020-Use-BGRA-extension-in-bindTexture.patch b/recipes-qt/qt5/qtbase-5.1.1/0020-Use-BGRA-extension-in-bindTexture.patch
new file mode 100644
index 0000000..e17e5ac
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0020-Use-BGRA-extension-in-bindTexture.patch
@@ -0,0 +1,34 @@
+From 5aaec8299901e0093cec2b704a724bc3254b8b8d Mon Sep 17 00:00:00 2001
+From: Jani Hautakangas <jani.hautakangas@ixonos.com>
+Date: Mon, 27 May 2013 15:25:25 -0700
+Subject: [PATCH 17/22] Use BGRA extension in bindTexture
+
+Upstream-Status: Pending
+
+Change-Id: I18aecc87c5c7d4483cabe5555da33ca6bb8580f1
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/gui/opengl/qopengltexturecache.cpp | 6 +-----
+ 1 file changed, 1 insertion(+), 5 deletions(-)
+
+diff --git a/src/gui/opengl/qopengltexturecache.cpp b/src/gui/opengl/qopengltexturecache.cpp
+index 94b8288..5c8aa3c 100644
+--- a/src/gui/opengl/qopengltexturecache.cpp
++++ b/src/gui/opengl/qopengltexturecache.cpp
+@@ -181,11 +181,7 @@ GLuint QOpenGLTextureCache::bindTexture(QOpenGLContext *context, qint64 key, con
+ 
+     QImage tx = image.convertToFormat(QImage::Format_ARGB32_Premultiplied);
+ 
+-    // Performance could be improved by skipping qgl_byteSwapImage().
+-    if (m_useByteSwapImage)
+-        qgl_byteSwapImage(tx);
+-
+-    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, tx.width(), tx.height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, const_cast<const QImage &>(tx).bits());
++    glTexImage2D(GL_TEXTURE_2D, 0, GL_BGRA_EXT, tx.width(), tx.height(), 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, const_cast<const QImage &>(tx).bits());
+ 
+     int cost = tx.width() * tx.height() * 4 / 1024;
+     m_cache.insert(key, new QOpenGLCachedTexture(id, context), cost);
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0021-configure-make-pulseaudio-a-configurable-option.patch b/recipes-qt/qt5/qtbase-5.1.1/0021-configure-make-pulseaudio-a-configurable-option.patch
new file mode 100644
index 0000000..eaa3ae6
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0021-configure-make-pulseaudio-a-configurable-option.patch
@@ -0,0 +1,36 @@
+From 0bc48cdb5e3556a96320ea963d2e031b0810d0d4 Mon Sep 17 00:00:00 2001
+From: Paul Eggleton <paul.eggleton@linux.intel.com>
+Date: Tue, 28 Feb 2012 15:10:24 +0000
+Subject: [PATCH 18/22] configure: make pulseaudio a configurable option
+
+Allows disabling pulseaudio support at configure time.
+
+Upstream-Status: Pending
+
+Signed-off-by: Paul Eggleton <paul.eggleton@linux.intel.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 7 +++++++
+ 1 file changed, 7 insertions(+)
+
+diff --git a/configure b/configure
+index 521e374..896e012 100755
+--- a/configure
++++ b/configure
+@@ -2039,6 +2039,13 @@ while [ "$#" -gt 0 ]; do
+             UNKNOWN_OPT=yes
+         fi
+         ;;
++    pulseaudio)
++        if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
++            CFG_PULSEAUDIO="$VAL"
++        else
++            UNKNOWN_OPT=yes
++        fi
++        ;;
+     gtkstyle)
+         if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
+             CFG_QGTKSTYLE="$VAL"
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0022-configure-make-alsa-a-configurable-option.patch b/recipes-qt/qt5/qtbase-5.1.1/0022-configure-make-alsa-a-configurable-option.patch
new file mode 100644
index 0000000..c01f635
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0022-configure-make-alsa-a-configurable-option.patch
@@ -0,0 +1,35 @@
+From e6430c64e4dcc48ae59e48fa303bbea33b253011 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Fri, 19 Jul 2013 23:21:28 +0200
+Subject: [PATCH 19/22] configure: make alsa a configurable option
+
+Allows disabling alsa support at configure time.
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 7 +++++++
+ 1 file changed, 7 insertions(+)
+
+diff --git a/configure b/configure
+index 896e012..3470b32 100755
+--- a/configure
++++ b/configure
+@@ -2046,6 +2046,13 @@ while [ "$#" -gt 0 ]; do
+             UNKNOWN_OPT=yes
+         fi
+         ;;
++    alsa)
++        if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
++            CFG_ALSA="$VAL"
++        else
++            UNKNOWN_OPT=yes
++        fi
++        ;;
+     gtkstyle)
+         if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
+             CFG_QGTKSTYLE="$VAL"
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0023-configure-make-freetype-a-configurable-option.patch b/recipes-qt/qt5/qtbase-5.1.1/0023-configure-make-freetype-a-configurable-option.patch
new file mode 100644
index 0000000..9cec921
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0023-configure-make-freetype-a-configurable-option.patch
@@ -0,0 +1,35 @@
+From 98201094967e2e4224c394d0c92c0be7d39582a6 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sat, 20 Jul 2013 10:56:37 +0200
+Subject: [PATCH 20/22] configure: make freetype a configurable option
+
+Allows disabling freetype support at configure time.
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ configure | 7 +++++++
+ 1 file changed, 7 insertions(+)
+
+diff --git a/configure b/configure
+index 3470b32..b0ec977 100755
+--- a/configure
++++ b/configure
+@@ -2053,6 +2053,13 @@ while [ "$#" -gt 0 ]; do
+             UNKNOWN_OPT=yes
+         fi
+         ;;
++    freetype)
++        if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ] || [ "$VAL" = "system" ]; then
++            CFG_LIBFREETYPE="$VAL"
++        else
++            UNKNOWN_OPT=yes
++        fi
++        ;;
+     gtkstyle)
+         if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
+             CFG_QGTKSTYLE="$VAL"
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-5.1.1/0024-Use-OE_QMAKE_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch b/recipes-qt/qt5/qtbase-5.1.1/0024-Use-OE_QMAKE_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch
new file mode 100644
index 0000000..70c0c0e
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-5.1.1/0024-Use-OE_QMAKE_PATH_EXTERNAL_HOST_BINS-to-determine-pa.patch
@@ -0,0 +1,84 @@
+From b4d383bf47374c7132ecbcaec2c6aea31f858f54 Mon Sep 17 00:00:00 2001
+From: Simon Busch <morphis@gravedo.de>
+Date: Mon, 22 Jul 2013 21:09:41 +0000
+Subject: [PATCH 21/22] Use OE_QMAKE_PATH_EXTERNAL_HOST_BINS to determine path
+ to host binaries
+
+Upstream-Status: Inappropiate (configuration)
+
+Signed-off-by: Simon Busch <morphis@gravedo.de>
+---
+ src/corelib/Qt5CoreConfigExtras.cmake.in    | 6 +++---
+ src/dbus/Qt5DBusConfigExtras.cmake.in       | 4 ++--
+ src/widgets/Qt5WidgetsConfigExtras.cmake.in | 2 +-
+ 3 files changed, 6 insertions(+), 6 deletions(-)
+
+diff --git a/src/corelib/Qt5CoreConfigExtras.cmake.in b/src/corelib/Qt5CoreConfigExtras.cmake.in
+index e01b448..5382730 100644
+--- a/src/corelib/Qt5CoreConfigExtras.cmake.in
++++ b/src/corelib/Qt5CoreConfigExtras.cmake.in
+@@ -5,7 +5,7 @@ if (NOT TARGET Qt5::qmake)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5Core_install_prefix}/$${CMAKE_BIN_DIR}qmake$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}qmake$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/qmake$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_Core_check_file_exists(${imported_location})
+ 
+@@ -20,7 +20,7 @@ if (NOT TARGET Qt5::moc)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5Core_install_prefix}/$${CMAKE_BIN_DIR}moc$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}moc$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/moc$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_Core_check_file_exists(${imported_location})
+ 
+@@ -37,7 +37,7 @@ if (NOT TARGET Qt5::rcc)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5Core_install_prefix}/$${CMAKE_BIN_DIR}rcc$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}rcc$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/rcc$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_Core_check_file_exists(${imported_location})
+ 
+diff --git a/src/dbus/Qt5DBusConfigExtras.cmake.in b/src/dbus/Qt5DBusConfigExtras.cmake.in
+index 1d94715..301af8f 100644
+--- a/src/dbus/Qt5DBusConfigExtras.cmake.in
++++ b/src/dbus/Qt5DBusConfigExtras.cmake.in
+@@ -5,7 +5,7 @@ if (NOT TARGET Qt5::qdbuscpp2xml)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5DBus_install_prefix}/$${CMAKE_BIN_DIR}qdbuscpp2xml$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}qdbuscpp2xml$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/qdbuscpp2xml$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_DBus_check_file_exists(${imported_location})
+ 
+@@ -20,7 +20,7 @@ if (NOT TARGET Qt5::qdbusxml2cpp)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5DBus_install_prefix}/$${CMAKE_BIN_DIR}qdbusxml2cpp$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}qdbusxml2cpp$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/qdbusxml2cpp$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_DBus_check_file_exists(${imported_location})
+ 
+diff --git a/src/widgets/Qt5WidgetsConfigExtras.cmake.in b/src/widgets/Qt5WidgetsConfigExtras.cmake.in
+index e5650ff..16ff007 100644
+--- a/src/widgets/Qt5WidgetsConfigExtras.cmake.in
++++ b/src/widgets/Qt5WidgetsConfigExtras.cmake.in
+@@ -5,7 +5,7 @@ if (NOT TARGET Qt5::uic)
+ !!IF isEmpty(CMAKE_BIN_DIR_IS_ABSOLUTE)
+     set(imported_location \"${_qt5Widgets_install_prefix}/$${CMAKE_BIN_DIR}uic$$CMAKE_BIN_SUFFIX\")
+ !!ELSE
+-    set(imported_location \"$${CMAKE_BIN_DIR}uic$$CMAKE_BIN_SUFFIX\")
++    set(imported_location \"${OE_QMAKE_PATH_EXTERNAL_HOST_BINS}/uic$$CMAKE_BIN_SUFFIX\")
+ !!ENDIF
+     _qt5_Widgets_check_file_exists(${imported_location})
+ 
+-- 
+1.8.3.1
+
diff --git a/recipes-qt/qt5/qtbase-native-5.1.1.inc b/recipes-qt/qt5/qtbase-native-5.1.1.inc
new file mode 100644
index 0000000..1adf422
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-native-5.1.1.inc
@@ -0,0 +1,110 @@
+DESCRIPTION = "Native version of Qt/[X11|Mac|Embedded]"
+DEPENDS = "zlib-native dbus-native"
+SECTION = "libs"
+HOMEPAGE = "http://qt-project.org"
+
+QT_MODULE = "qtbase"
+
+require qt5-native.inc
+
+# shared with target qtbase, all except 
+# 0005-qmake-is-already-built-in-qtbase-native.patch
+# 0006-Allow-building-a-separate-qmake-for-the-target.patch
+
+SRC_URI += " \
+    file://0001-Add-linux-oe-g-platform.patch \
+    file://0002-qlibraryinfo-allow-to-set-qt.conf-from-the-outside-u.patch \
+    file://0003-Add-external-hostbindir-option.patch \
+    file://0004-qt_functions-temporary-remove-isEmpty-check.patch \
+    file://0007-configureapp-Prefix-default-LIBDIRS-and-INCDIRS-with.patch \
+    file://0008-qt_module-Fix-pkgconfig-replacement.patch \
+    file://0009-qt_module-Fix-paths-in-.prl-files.patch \
+    file://0010-wayland-scanner-disable-silent-rules.patch \
+    file://0011-configure-don-t-export-SYSTEM_VARIABLES-to-.qmake.va.patch \
+    file://0012-configure.prf-Allow-to-add-extra-arguments-to-make.patch \
+    file://0013-Disable-mkv8snapshot.patch \
+    file://0014-enables-tslib-device-to-be-read-from-env-variable.patch \
+    file://0015-qtbase-allow-build-of-examples.patch \
+"
+
+# specific for native version
+SRC_URI += "file://0001-Always-build-uic.patch"
+
+QT_CONF_PATH = "${B}/qt.conf"
+
+do_generate_qt_config_file() {
+    :
+}
+
+EXTRA_OECONF = " \
+    -dont-process \
+    -prefix ${prefix} \
+    -sysroot ${STAGING_DIR_NATIVE} \
+    -no-gcc-sysroot \
+    -system-zlib \
+    -no-libjpeg \
+    -no-libpng \
+    -no-gif \
+    -no-accessibility \
+    -no-cups \
+    -no-nis \
+    -no-gui \
+    -no-qml-debug \
+    -no-sql-mysql \
+    -no-sql-sqlite \
+    -no-opengl \
+    -no-openssl \
+    -no-xcb \
+    -verbose \
+    -release \
+    -prefix ${OE_QMAKE_PATH_PREFIX} \
+    -bindir ${OE_QMAKE_PATH_BINS} \
+    -libdir ${OE_QMAKE_PATH_LIBS} \
+    -headerdir ${OE_QMAKE_PATH_HEADERS} \
+    -archdatadir ${OE_QMAKE_PATH_ARCHDATA} \
+    -datadir ${OE_QMAKE_PATH_DATA} \
+    -docdir ${OE_QMAKE_PATH_DOCS} \
+    -sysconfdir ${OE_QMAKE_PATH_SETTINGS} \
+    -no-glib \
+    -no-iconv \
+    -silent \
+    -nomake examples \
+    -nomake tests \
+    -no-rpath \
+    -platform linux-oe-g++ \
+"
+
+# qtbase is exception, configure script is using our get(X)QEvalMakeConf and setBootstrapEvalVariable functions to read it from shell
+export OE_QMAKE_COMPILER
+export OE_QMAKE_CC
+export OE_QMAKE_CFLAGS
+export OE_QMAKE_CXX
+export OE_QMAKE_CXXFLAGS
+export OE_QMAKE_LINK
+export OE_QMAKE_LDFLAGS
+export OE_QMAKE_AR
+export OE_QMAKE_STRIP
+
+do_configure_prepend() {
+    (echo o; echo yes) | ${S}/configure ${EXTRA_OECONF} || die "Configuring qt failed. EXTRA_OECONF was ${EXTRA_OECONF}"
+    bin/qmake ${OE_QMAKE_DEBUG_OUTPUT} ${S} -o Makefile || die "Configuring qt with qmake failed. EXTRA_OECONF was ${EXTRA_OECONF}"
+}
+
+do_install() {
+    # Fix install paths for all
+    find -name "Makefile*" | xargs sed -i "s,(INSTALL_ROOT)${STAGING_DIR_NATIVE}${STAGING_DIR_NATIVE},(INSTALL_ROOT)${STAGING_DIR_NATIVE},g"
+
+    oe_runmake install INSTALL_ROOT=${D}
+
+    if [ -d ${D}${STAGING_DIR_NATIVE}${STAGING_DIR_NATIVE} ] ; then
+        echo "Some files are installed in wrong directory ${D}${STAGING_DIR_NATIVE}"
+        cp -ra ${D}${STAGING_DIR_NATIVE}${STAGING_DIR_NATIVE}/* ${D}${STAGING_DIR_NATIVE}
+        rm -rf ${D}${STAGING_DIR_NATIVE}${STAGING_DIR_NATIVE}
+        # remove empty dirs
+        TMP=`dirname ${D}/${STAGING_DIR_NATIVE}${STAGING_DIR_NATIVE}`
+        while test ${TMP} != ${D}${STAGING_DIR_NATIVE}; do
+            rmdir ${TMP}
+            TMP=`dirname ${TMP}`;
+        done
+    fi
+}
diff --git a/recipes-qt/qt5/qtbase-native_5.1.1.bb b/recipes-qt/qt5/qtbase-native_5.1.1.bb
new file mode 100644
index 0000000..45cc229
--- /dev/null
+++ b/recipes-qt/qt5/qtbase-native_5.1.1.bb
@@ -0,0 +1,11 @@
+require qt5-${PV}.inc
+require ${PN}-${PV}.inc
+
+do_install_append() {
+    # for modules which are still using syncqt and call qtPrepareTool(QMAKE_SYNCQT, syncqt)
+    # e.g. qt3d, qtwayland
+    ln -sf syncqt.pl ${D}${OE_QMAKE_PATH_QT_BINS}/syncqt
+}
+
+SRC_URI[md5sum] = "955d1e4da875f3872ef3208f21a757dd"
+SRC_URI[sha256sum] = "d4620e0b1aff6d2b6f4d8066e6f8258e012a8b5507af7c03b661029a1ffa75c9"
diff --git a/recipes-qt/qt5/qtbase_5.1.1.bb b/recipes-qt/qt5/qtbase_5.1.1.bb
new file mode 100644
index 0000000..81d8bef
--- /dev/null
+++ b/recipes-qt/qt5/qtbase_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}-${PV}.inc
+
+SRC_URI[md5sum] = "955d1e4da875f3872ef3208f21a757dd"
+SRC_URI[sha256sum] = "d4620e0b1aff6d2b6f4d8066e6f8258e012a8b5507af7c03b661029a1ffa75c9"
diff --git a/recipes-qt/qt5/qtdeclarative-5.1.1/0001-qmltestexample-fix-link.patch b/recipes-qt/qt5/qtdeclarative-5.1.1/0001-qmltestexample-fix-link.patch
new file mode 100644
index 0000000..7a68dd5
--- /dev/null
+++ b/recipes-qt/qt5/qtdeclarative-5.1.1/0001-qmltestexample-fix-link.patch
@@ -0,0 +1,46 @@
+From ea698b0a2588585356d1ea5139ca6feb7110611a Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Eric=20B=C3=A9nard?= <eric@eukrea.com>
+Date: Sun, 26 May 2013 14:26:19 +0200
+Subject: [PATCH 1/3] qmltestexample: fix link
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+else we get :
+ld: warning: libQt5Quick.so.5, needed by libQt5QuickTest.so, not found
+
+Upstream-Status: Inappropriate
+
+Signed-off-by: Eric Bénard <eric@eukrea.com>
+---
+ examples/qmltest/qmltest/qmltest.pro  | 2 +-
+ tools/qmltestrunner/qmltestrunner.pro | 2 +-
+ 2 files changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/examples/qmltest/qmltest/qmltest.pro b/examples/qmltest/qmltest/qmltest.pro
+index b5893c5..1b00e6c 100644
+--- a/examples/qmltest/qmltest/qmltest.pro
++++ b/examples/qmltest/qmltest/qmltest.pro
+@@ -14,7 +14,7 @@ TESTDATA += tst_basic.qml tst_item.qml
+ # This code exists solely for the purpose of building this example
+ # inside the examples/ hierarchy.
+ 
+-QT += qml qmltest
++QT += qml qmltest quick
+ 
+ macx: CONFIG -= app_bundle
+ 
+diff --git a/tools/qmltestrunner/qmltestrunner.pro b/tools/qmltestrunner/qmltestrunner.pro
+index 5184c1f..668cf17 100644
+--- a/tools/qmltestrunner/qmltestrunner.pro
++++ b/tools/qmltestrunner/qmltestrunner.pro
+@@ -1,5 +1,5 @@
+ SOURCES += main.cpp
+ 
+-QT += qml qmltest
++QT += qml qmltest quick
+ 
+ load(qt_tool)
+-- 
+1.8.3.2
+
diff --git a/recipes-qt/qt5/qtdeclarative-5.1.1/0003-Fix-wrong-calculation-of-viewPort-for-transitions.patch b/recipes-qt/qt5/qtdeclarative-5.1.1/0003-Fix-wrong-calculation-of-viewPort-for-transitions.patch
new file mode 100644
index 0000000..d355e48
--- /dev/null
+++ b/recipes-qt/qt5/qtdeclarative-5.1.1/0003-Fix-wrong-calculation-of-viewPort-for-transitions.patch
@@ -0,0 +1,41 @@
+From 6d28b0ec1bc93fea7502fadfbc12f8198ccf9d14 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Florian=20H=C3=A4nel?= <florian.haenel@basyskom.com>
+Date: Wed, 5 Jun 2013 19:23:32 +0200
+Subject: [PATCH 3/3] Fix wrong calculation of viewPort for transitions
+
+Viewport is calculated wrong for horizontal layout in a second instance
+
+Task-number: QTBUG-29944
+Task-Number: QTBUG-31546
+
+Upstream-Status: Pending
+
+Looks like backport of https://codereview.qt-project.org/49226 but this
+one was applied in previous patch, this change looks the same but is
+in different part of qquickitemview.cpp and ISN'T applied yet in dev
+branch.
+
+Signed-off-by: Florian Haenel <florian.haenel@lge.com>
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+
+Change-Id: I136ae4484278d14f796613505e3f38c65ec51ebe
+---
+ src/quick/items/qquickitemview.cpp | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/quick/items/qquickitemview.cpp b/src/quick/items/qquickitemview.cpp
+index a6dabee..290f283 100644
+--- a/src/quick/items/qquickitemview.cpp
++++ b/src/quick/items/qquickitemview.cpp
+@@ -1815,7 +1815,7 @@ void QQuickItemViewPrivate::layout()
+ 
+         prepareVisibleItemTransitions();
+ 
+-        QRectF viewBounds(0, position(), q->width(), q->height());
++        QRectF viewBounds(q->contentX(),  q->contentY(), q->width(), q->height());
+         for (QList<FxViewItem*>::Iterator it = releasePendingTransition.begin();
+              it != releasePendingTransition.end(); ) {
+             FxViewItem *item = *it;
+-- 
+1.8.3.2
+
diff --git a/recipes-qt/qt5/qtdeclarative_5.1.1.bb b/recipes-qt/qt5/qtdeclarative_5.1.1.bb
new file mode 100644
index 0000000..322cad9
--- /dev/null
+++ b/recipes-qt/qt5/qtdeclarative_5.1.1.bb
@@ -0,0 +1,16 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+DEPENDS += "qtjsbackend qtsvg qtxmlpatterns"
+
+SRC_URI += " \
+    file://0003-Fix-wrong-calculation-of-viewPort-for-transitions.patch \
+"
+
+SRC_URI[md5sum] = "486fc16ad7b7d0c1488ba5482536d66c"
+SRC_URI[sha256sum] = "0ee989a5d45a94e927609b22e2413c7f2788a7b4a23af66ecfa15c31db2a9b31"
+
+# /usr/lib/qt5/qml/QtQuick/Dialogs/images/*.png
+FILES_${PN}-qmlplugins += " \
+    ${OE_QMAKE_PATH_QML}/*/*/*/*.png \
+"
diff --git a/recipes-qt/qt5/qtgraphicaleffects_5.1.1.bb b/recipes-qt/qt5/qtgraphicaleffects_5.1.1.bb
new file mode 100644
index 0000000..311f113
--- /dev/null
+++ b/recipes-qt/qt5/qtgraphicaleffects_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "40d0989d68fb08c1184b7d5088da9c48"
+SRC_URI[sha256sum] = "347c33ee496d67d98d64b6fa43797c45eae85752bb0026eb234bfb420f77febf"
diff --git a/recipes-qt/qt5/qtimageformats_5.1.1.bb b/recipes-qt/qt5/qtimageformats_5.1.1.bb
new file mode 100644
index 0000000..ccb539a
--- /dev/null
+++ b/recipes-qt/qt5/qtimageformats_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "209edddd5899b36ea7ea7ad52204a593"
+SRC_URI[sha256sum] = "3bbb7825c0298c7d95d26b205e48da02c5bac3b35d66a601f939f8ee8b3463a4"
diff --git a/recipes-qt/qt5/qtjsbackend-5.1.1/0001-Install-the-mkv8snapshot-tool-to-the-native-side.patch b/recipes-qt/qt5/qtjsbackend-5.1.1/0001-Install-the-mkv8snapshot-tool-to-the-native-side.patch
new file mode 100644
index 0000000..1f94e4c
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend-5.1.1/0001-Install-the-mkv8snapshot-tool-to-the-native-side.patch
@@ -0,0 +1,32 @@
+From 973d4f0974c0b9c2504c56a2b9b8d6c709275ee4 Mon Sep 17 00:00:00 2001
+From: Mikko Levonmaa <mikko.levonmaa@palm.com>
+Date: Tue, 4 Dec 2012 11:20:13 -0800
+Subject: [PATCH 1/2] Install the mkv8snapshot tool to the native side
+
+Upstream-Status: Inappropriate [configuration]
+
+Signed-off-by: Mikko Levonmaa <mikko.levonmaa@palm.com>
+---
+ src/tools/mkv8snapshot/mkv8snapshot.pro | 9 +++++++--
+ 1 file changed, 7 insertions(+), 2 deletions(-)
+
+diff --git a/src/tools/mkv8snapshot/mkv8snapshot.pro b/src/tools/mkv8snapshot/mkv8snapshot.pro
+index 16beb02..5e327f7 100644
+--- a/src/tools/mkv8snapshot/mkv8snapshot.pro
++++ b/src/tools/mkv8snapshot/mkv8snapshot.pro
+@@ -24,5 +24,10 @@ unix:LIBS += -lpthread
+ 
+ # We don't need to install this tool, it's only used for building v8.
+ # However we do have to make sure that 'make install' builds it.
+-dummytarget.CONFIG = dummy_install
+-INSTALLS += dummytarget
++#dummytarget.CONFIG = dummy_install
++#INSTALLS += dummytarget
++
++# Install the tool so that during target cross compilation we have access to the native side binary
++target.path = $$[QT_HOST_BINS]
++INSTALLS += target
++
+-- 
+1.8.3.2
+
diff --git a/recipes-qt/qt5/qtjsbackend-5.1.1/0002-v8.pro-respect-external-host-bindir-when-set.patch b/recipes-qt/qt5/qtjsbackend-5.1.1/0002-v8.pro-respect-external-host-bindir-when-set.patch
new file mode 100644
index 0000000..d9bb5b4
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend-5.1.1/0002-v8.pro-respect-external-host-bindir-when-set.patch
@@ -0,0 +1,31 @@
+From b0610cdb0c53be6da6d8f94be9af40bf50075368 Mon Sep 17 00:00:00 2001
+From: Martin Jansa <Martin.Jansa@gmail.com>
+Date: Sun, 28 Apr 2013 02:45:01 +0200
+Subject: [PATCH 2/2] v8.pro: respect external-host-bindir, when set
+
+Upstream-Status: Pending
+
+Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
+---
+ src/v8/v8.pro | 5 ++++-
+ 1 file changed, 4 insertions(+), 1 deletion(-)
+
+diff --git a/src/v8/v8.pro b/src/v8/v8.pro
+index 2be6a19..d3da4e1 100644
+--- a/src/v8/v8.pro
++++ b/src/v8/v8.pro
+@@ -25,7 +25,10 @@ INCLUDEPATH -= $$MODULE_INCLUDES $$MODULE_INCLUDES/..
+ include(v8.pri)
+ 
+ contains(QT_CONFIG, v8snapshot) {
+-    mkv8snapshot.commands = ../../bin/mkv8snapshot$$qtPlatformTargetSuffix() ${QMAKE_FILE_OUT}
++    mkv8snapshot.tool=$$[QT_EXTERNAL_HOST_BINS]/mkv8snapshot$$qtPlatformTargetSuffix()
++    !exists($$mkv8snapshot.tool): \
++        mkv8snapshot.tool=../../bin/mkv8snapshot$$qtPlatformTargetSuffix()
++    mkv8snapshot.commands = $$mkv8snapshot.tool ${QMAKE_FILE_OUT}
+     DUMMY_FILE = v8.pro
+     mkv8snapshot.input = DUMMY_FILE
+     mkv8snapshot.output = $$V8_GENERATED_SOURCES_DIR/snapshot.cpp
+-- 
+1.8.3.2
+
diff --git a/recipes-qt/qt5/qtjsbackend-native.inc b/recipes-qt/qt5/qtjsbackend-native.inc
new file mode 100644
index 0000000..30663b8
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend-native.inc
@@ -0,0 +1,24 @@
+# doesn't have GFDL-1.3 like qtbase, LICENSE files are missing in 5.0.0 and 5.0.1, this is for 5.0.2 and git
+LICENSE = "LGPL-2.1 | GPL-3.0"
+LIC_FILES_CHKSUM = "file://LICENSE.LGPL;md5=4193e7f1d47a858f6b7c0f1ee66161de \
+                    file://LICENSE.GPL;md5=d32239bcb673463ab874e80d47fae504 \
+                    file://LGPL_EXCEPTION.txt;md5=0145c4d1b6f96a661c2c139dfb268fb6 \
+"
+
+DEPENDS = "qtbase-native"
+
+QT_MODULE = "qtjsbackend"
+
+require qt5-native.inc
+
+SRC_URI += "\
+    file://0001-Install-the-mkv8snapshot-tool-to-the-native-side.patch \
+"
+
+do_configure() {
+    ${OE_QMAKE_QMAKE} ${OE_QMAKE_DEBUG_OUTPUT} -r ${S}
+}
+
+do_install() {
+    oe_runmake install INSTALL_ROOT=${D}
+}
diff --git a/recipes-qt/qt5/qtjsbackend-native_5.1.1.bb b/recipes-qt/qt5/qtjsbackend-native_5.1.1.bb
new file mode 100644
index 0000000..aac7b85
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend-native_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "7225169d7d166cc5660384a85e4d4a2f"
+SRC_URI[sha256sum] = "42628eac133738df30e9104c2014eb70478e8fcf2cc86c1f500359c12216b192"
diff --git a/recipes-qt/qt5/qtjsbackend.inc b/recipes-qt/qt5/qtjsbackend.inc
new file mode 100644
index 0000000..66afc94
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend.inc
@@ -0,0 +1,14 @@
+require qt5.inc
+
+# doesn't have GFDL-1.3 like qtbase, LICENSE files are missing in 5.0.0 and 5.0.1, this is for 5.0.2 and git
+LICENSE = "LGPL-2.1 | GPL-3.0"
+LIC_FILES_CHKSUM = "file://LICENSE.LGPL;md5=4193e7f1d47a858f6b7c0f1ee66161de \
+                    file://LICENSE.GPL;md5=d32239bcb673463ab874e80d47fae504 \
+                    file://LGPL_EXCEPTION.txt;md5=0145c4d1b6f96a661c2c139dfb268fb6 \
+"
+
+DEPENDS += "qtbase qtjsbackend-native"
+
+SRC_URI += " \
+    file://0002-v8.pro-respect-external-host-bindir-when-set.patch \
+"
diff --git a/recipes-qt/qt5/qtjsbackend_5.1.1.bb b/recipes-qt/qt5/qtjsbackend_5.1.1.bb
new file mode 100644
index 0000000..aac7b85
--- /dev/null
+++ b/recipes-qt/qt5/qtjsbackend_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "7225169d7d166cc5660384a85e4d4a2f"
+SRC_URI[sha256sum] = "42628eac133738df30e9104c2014eb70478e8fcf2cc86c1f500359c12216b192"
diff --git a/recipes-qt/qt5/qtlocation_5.1.1.bb b/recipes-qt/qt5/qtlocation_5.1.1.bb
new file mode 100644
index 0000000..08932c9
--- /dev/null
+++ b/recipes-qt/qt5/qtlocation_5.1.1.bb
@@ -0,0 +1,10 @@
+require qt5-git.inc
+require ${PN}.inc
+
+PV = "4.999+5.0.0-beta1+git${SRCPV}"
+
+# drop when bumping SRCREV
+PR = "r1"
+
+SRCREV = "f28408346243cf090326f4738fd838219c21e00f"
+
diff --git a/recipes-qt/qt5/qtmultimedia_5.1.1.bb b/recipes-qt/qt5/qtmultimedia_5.1.1.bb
new file mode 100644
index 0000000..f8b61ce
--- /dev/null
+++ b/recipes-qt/qt5/qtmultimedia_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "4b6e74bd7752bc241617f41539632bba"
+SRC_URI[sha256sum] = "df907a81c4ef15c9aec216c1f57aa72a7a7b274ea3cb3950f87fa1b04e369ebe"
diff --git a/recipes-qt/qt5/qtquick1_5.1.1.bb b/recipes-qt/qt5/qtquick1_5.1.1.bb
new file mode 100644
index 0000000..bc07600
--- /dev/null
+++ b/recipes-qt/qt5/qtquick1_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "05956168e0a4bba44c31b61dd4fc5e6e"
+SRC_URI[sha256sum] = "f5dc431fb33a195414d2d75d7dff1c101f4101489f38b4ea9c5e8782b1807a64"
diff --git a/recipes-qt/qt5/qtscript_5.1.1.bb b/recipes-qt/qt5/qtscript_5.1.1.bb
new file mode 100644
index 0000000..d43e789
--- /dev/null
+++ b/recipes-qt/qt5/qtscript_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "5c0e8633fbf560f711b7af689f8bcb99"
+SRC_URI[sha256sum] = "d80061f7652ae3992e2b9ffbc7052d54872f6042a7a258b50d22eadf0175f364"
diff --git a/recipes-qt/qt5/qtsensors_5.1.1.bb b/recipes-qt/qt5/qtsensors_5.1.1.bb
new file mode 100644
index 0000000..a363d87
--- /dev/null
+++ b/recipes-qt/qt5/qtsensors_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "219607895e15348d723fa67324d7061a"
+SRC_URI[sha256sum] = "07f2d94964b47786a33ba1e24049c81b29e95b791647f9116ea350dc4cbc814f"
diff --git a/recipes-qt/qt5/qtsvg_5.1.1.bb b/recipes-qt/qt5/qtsvg_5.1.1.bb
new file mode 100644
index 0000000..4dcb243
--- /dev/null
+++ b/recipes-qt/qt5/qtsvg_5.1.1.bb
@@ -0,0 +1,6 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "9db8209602b0ea942273e01a874ea5b7"
+SRC_URI[sha256sum] = "6bfe7705ff58391205ca797d84ca6dda57ebcce106fdff52d4908b0e443567bf"
+
diff --git a/recipes-qt/qt5/qtwebkit-5.1.1.inc b/recipes-qt/qt5/qtwebkit-5.1.1.inc
new file mode 100644
index 0000000..ef791e7
--- /dev/null
+++ b/recipes-qt/qt5/qtwebkit-5.1.1.inc
@@ -0,0 +1,45 @@
+require qt5.inc
+
+LICENSE = "BSD & LGPLv2+"
+LIC_FILES_CHKSUM = "file://Source/WebCore/rendering/RenderApplet.h;endline=22;md5=fb9694013ad71b78f8913af7a5959680 \
+                    file://Source/WebKit/gtk/webkit/webkit.h;endline=21;md5=b4fbe9f4a944f1d071dba1d2c76b3351 \
+                    file://Source/JavaScriptCore/parser/Parser.h;endline=23;md5=b57c8a2952a8d0e655988fa0ecb2bf7f"
+
+DEPENDS += "qtbase qtdeclarative icu ruby-native sqlite3 glib-2.0 libxslt"
+
+PACKAGECONFIG ??= "gstreamer qtlocation qtsensors"
+PACKAGECONFIG[gstreamer] = ",,gstreamer1.0 gstreamer1.0-plugins-base"
+PACKAGECONFIG[gstreamer010] = ",,gstreamer gst-plugins-base"
+PACKAGECONFIG[qtlocation] = ",,qtlocation"
+PACKAGECONFIG[qtsensors] = ",,qtsensors"
+
+do_configure_prepend() {
+    # disable gstreamer-1.0 test if it isn't enabled by PACKAGECONFIG
+    sed -e 's/\s\(packagesExist(".*\<gstreamer-1.0\>.*")\)/ OE_GSTREAMER_ENABLED:\1/' -i ${S}/Tools/qmake/mkspecs/features/features.prf
+    # disable gstreamer-0.10 test if it isn't enabled by PACKAGECONFIG
+    sed -e 's/\s\(packagesExist(".*\<gstreamer-0.10\>.*")\)/ OE_GSTREAMER010_ENABLED:\1/' -i ${S}/Tools/qmake/mkspecs/features/features.prf
+    # disable qtlocation test if it isn't enabled by PACKAGECONFIG
+    sed -e 's/\s\(qtHaveModule(positioning)\)/ OE_QTLOCATION_ENABLED:\1/' -i ${S}/Tools/qmake/mkspecs/features/features.prf
+    # disable qtsensors test if it isn't enabled by PACKAGECONFIG
+    sed -e 's/\s\(qtHaveModule(sensors)\)/ OE_QTSENSORS_ENABLED:\1/' -i ${S}/Tools/qmake/mkspecs/features/features.prf
+}
+
+EXTRA_QMAKEVARS_PRE += "${@base_contains('PACKAGECONFIG', 'gstreamer', 'CONFIG+=OE_GSTREAMER_ENABLED', '', d)}"
+EXTRA_QMAKEVARS_PRE += "${@base_contains('PACKAGECONFIG', 'gstreamer010', 'CONFIG+=OE_GSTREAMER010_ENABLED', '', d)}"
+EXTRA_QMAKEVARS_PRE += "${@base_contains('PACKAGECONFIG', 'qtlocation', 'CONFIG+=OE_QTLOCATION_ENABLED', '', d)}"
+EXTRA_QMAKEVARS_PRE += "${@base_contains('PACKAGECONFIG', 'qtsensors', 'CONFIG+=OE_QTSENSORS_ENABLED', '', d)}"
+
+# qtwebkit gets terribly big when linking with all debug info, disable by default
+QTWEBKIT_DEBUG = "QMAKE_CFLAGS+=-g0 QMAKE_CXXFLAGS+=-g0"
+EXTRA_QMAKEVARS_PRE += "${QTWEBKIT_DEBUG}"
+
+# remove default ${PN}-examples-dbg ${PN}-examples set in qt5.inc, because it conflicts with ${PN} from separate webkit-examples recipe
+PACKAGES = "${PN}-dbg ${PN}-staticdev ${PN}-dev ${PN}-doc ${PN}-locale ${PACKAGE_BEFORE_PN} ${PN} ${PN}-qmlplugins-dbg ${PN}-tools-dbg ${PN}-plugins-dbg ${PN}-qmlplugins ${PN}-tools ${PN}-plugins ${PN}-mkspecs "
+
+SRC_URI += "file://fix-rpath.patch"
+
+# make sure rb files are used from sysroot, not from host
+# ruby-1.9.3-always-use-i386.patch is doing target_cpu=`echo $target_cpu | sed s/i.86/i386/`
+# we need to replace it too (a bit longer version without importing re)
+RUBY_SYS = "${@ '${BUILD_SYS}'.replace('i486', 'i386').replace('i586', 'i386').replace('i686', 'i386') }"
+export RUBYLIB="${STAGING_DATADIR_NATIVE}/rubygems:${STAGING_LIBDIR_NATIVE}/ruby:${STAGING_LIBDIR_NATIVE}/ruby/${RUBY_SYS}"
diff --git a/recipes-qt/qt5/qtwebkit-5.1.1/fix-rpath.patch b/recipes-qt/qt5/qtwebkit-5.1.1/fix-rpath.patch
new file mode 100644
index 0000000..5c20514
--- /dev/null
+++ b/recipes-qt/qt5/qtwebkit-5.1.1/fix-rpath.patch
@@ -0,0 +1,13 @@
+Index: qtwebkit-opensource-src-5.1.0/Tools/qmake/mkspecs/features/unix/default_post.prf
+===================================================================
+--- qtwebkit-opensource-src-5.1.0.orig/Tools/qmake/mkspecs/features/unix/default_post.prf
++++ qtwebkit-opensource-src-5.1.0/Tools/qmake/mkspecs/features/unix/default_post.prf
+@@ -32,8 +32,6 @@ linux-*g++* {
+     QMAKE_OBJECTIVE_CFLAGS += -Wno-c++11-extensions -Wno-c++0x-extensions
+ }
+ 
+-contains(TEMPLATE, app): CONFIG += rpath
+-
+ isEqual(QT_ARCH,i386):CONFIG(debug, debug|release) {
+   # Make ld not cache the symbol tables of input files in memory to avoid memory exhaustion during the linking phase.
+   config_gnuld: QMAKE_LFLAGS += -Wl,--no-keep-memory
diff --git a/recipes-qt/qt5/qtwebkit-examples_5.1.1.bb b/recipes-qt/qt5/qtwebkit-examples_5.1.1.bb
new file mode 100644
index 0000000..d0f61de
--- /dev/null
+++ b/recipes-qt/qt5/qtwebkit-examples_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "660b4e169a13074d2edcc3110a7b5ba8"
+SRC_URI[sha256sum] = "1297212198790f186cb647dcfa929fd2de0824bd04578cf041355e4eabb33ff2"
diff --git a/recipes-qt/qt5/qtwebkit_5.1.1.bb b/recipes-qt/qt5/qtwebkit_5.1.1.bb
new file mode 100644
index 0000000..b797677
--- /dev/null
+++ b/recipes-qt/qt5/qtwebkit_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}-${PV}.inc
+
+SRC_URI[md5sum] = "70e956dafcee1969de53d4de7b4691ad"
+SRC_URI[sha256sum] = "d6ee1e9111b0996277a512ae71736a05faa7c0de6d69ac2978adce79c3116a24"
diff --git a/recipes-qt/qt5/qtxmlpatterns_5.1.1.bb b/recipes-qt/qt5/qtxmlpatterns_5.1.1.bb
new file mode 100644
index 0000000..646e32a
--- /dev/null
+++ b/recipes-qt/qt5/qtxmlpatterns_5.1.1.bb
@@ -0,0 +1,5 @@
+require qt5-${PV}.inc
+require ${PN}.inc
+
+SRC_URI[md5sum] = "0db5f74de2a2e93bc2747a609ff81d5f"
+SRC_URI[sha256sum] = "bc7b48347ce3ab5d6a22223c001659f3d898cbd3ef9e35688d7ad1bf8e7510b5"
-- 
2.4.0

